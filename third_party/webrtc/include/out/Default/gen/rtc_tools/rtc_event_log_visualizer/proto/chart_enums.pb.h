// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chart_enums.proto
// Protobuf C++ Version: 6.30.1

#ifndef chart_5fenums_2eproto_2epb_2eh
#define chart_5fenums_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chart_5fenums_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chart_5fenums_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace analytics {
enum ChartStyle_Type : int;
extern const uint32_t ChartStyle_Type_internal_data_[];
class ChartStyle;
struct ChartStyleDefaultTypeInternal;
extern ChartStyleDefaultTypeInternal _ChartStyle_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<28> ChartStyle_class_data_;
}  // namespace analytics
}  // namespace webrtc
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::webrtc::analytics::ChartStyle_Type_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::analytics::ChartStyle_Type>;
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace analytics {
enum ChartStyle_Type : int {
  ChartStyle_Type_UNDEFINED = 0,
  ChartStyle_Type_LINE_CHART = 1,
  ChartStyle_Type_BAR_CHART = 2,
  ChartStyle_Type_LINE_STEP_CHART = 3,
  ChartStyle_Type_SCATTER_CHART = 4,
  ChartStyle_Type_ChartStyle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ChartStyle_Type_ChartStyle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ChartStyle_Type_internal_data_[];
inline constexpr ChartStyle_Type ChartStyle_Type_Type_MIN =
    static_cast<ChartStyle_Type>(0);
inline constexpr ChartStyle_Type ChartStyle_Type_Type_MAX =
    static_cast<ChartStyle_Type>(4);
inline bool ChartStyle_Type_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int ChartStyle_Type_Type_ARRAYSIZE = 4 + 1;
const std::string& ChartStyle_Type_Name(ChartStyle_Type value);
template <typename T>
const std::string& ChartStyle_Type_Name(T value) {
  static_assert(std::is_same<T, ChartStyle_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ChartStyle_Type_Name(static_cast<ChartStyle_Type>(value));
}
bool ChartStyle_Type_Parse(
    absl::string_view name, ChartStyle_Type* PROTOBUF_NONNULL value);

// ===================================================================


// -------------------------------------------------------------------

class ChartStyle final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.analytics.ChartStyle) */ {
 public:
  inline ChartStyle() : ChartStyle(nullptr) {}
  ~ChartStyle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChartStyle* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChartStyle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChartStyle(::google::protobuf::internal::ConstantInitialized);

  inline ChartStyle(const ChartStyle& from) : ChartStyle(nullptr, from) {}
  inline ChartStyle(ChartStyle&& from) noexcept
      : ChartStyle(nullptr, std::move(from)) {}
  inline ChartStyle& operator=(const ChartStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartStyle& operator=(ChartStyle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChartStyle& default_instance() {
    return *reinterpret_cast<const ChartStyle*>(
        &_ChartStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ChartStyle& a, ChartStyle& b) { a.Swap(&b); }
  inline void Swap(ChartStyle* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartStyle* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartStyle* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<ChartStyle>(arena);
  }
  void CopyFrom(const ChartStyle& from);
  void MergeFrom(const ChartStyle& from) { ChartStyle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChartStyle* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.analytics.ChartStyle"; }

 protected:
  explicit ChartStyle(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChartStyle(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChartStyle& from);
  ChartStyle(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChartStyle&& from) noexcept
      : ChartStyle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using Type = ChartStyle_Type;
  static constexpr Type UNDEFINED = ChartStyle_Type_UNDEFINED;
  static constexpr Type LINE_CHART = ChartStyle_Type_LINE_CHART;
  static constexpr Type BAR_CHART = ChartStyle_Type_BAR_CHART;
  static constexpr Type LINE_STEP_CHART = ChartStyle_Type_LINE_STEP_CHART;
  static constexpr Type SCATTER_CHART = ChartStyle_Type_SCATTER_CHART;
  static inline bool Type_IsValid(int value) {
    return ChartStyle_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ChartStyle_Type_Type_MIN;
  static constexpr Type Type_MAX = ChartStyle_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ChartStyle_Type_Type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return ChartStyle_Type_Name(value);
  }
  static inline bool Type_Parse(
      absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return ChartStyle_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:webrtc.analytics.ChartStyle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChartStyle& from_msg);
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fenums_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<28> ChartStyle_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChartStyle

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace analytics
}  // namespace webrtc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::webrtc::analytics::ChartStyle_Type> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // chart_5fenums_2eproto_2epb_2eh
