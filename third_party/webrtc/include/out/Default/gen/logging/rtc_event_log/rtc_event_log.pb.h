// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: rtc_event_log.proto
// Protobuf C++ Version: 6.30.1

#ifndef rtc_5fevent_5flog_2eproto_2epb_2eh
#define rtc_5fevent_5flog_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rtc_5fevent_5flog_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_rtc_5fevent_5flog_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace rtclog {
enum BweProbeResult_ResultType : int;
extern const uint32_t BweProbeResult_ResultType_internal_data_[];
enum DelayBasedBweUpdate_DetectorState : int;
extern const uint32_t DelayBasedBweUpdate_DetectorState_internal_data_[];
enum Event_EventType : int;
extern const uint32_t Event_EventType_internal_data_[];
enum IceCandidatePairConfig_AddressFamily : int;
extern const uint32_t IceCandidatePairConfig_AddressFamily_internal_data_[];
enum IceCandidatePairConfig_IceCandidatePairConfigType : int;
extern const uint32_t IceCandidatePairConfig_IceCandidatePairConfigType_internal_data_[];
enum IceCandidatePairConfig_IceCandidateType : int;
extern const uint32_t IceCandidatePairConfig_IceCandidateType_internal_data_[];
enum IceCandidatePairConfig_NetworkType : int;
extern const uint32_t IceCandidatePairConfig_NetworkType_internal_data_[];
enum IceCandidatePairConfig_Protocol : int;
extern const uint32_t IceCandidatePairConfig_Protocol_internal_data_[];
enum IceCandidatePairEvent_IceCandidatePairEventType : int;
extern const uint32_t IceCandidatePairEvent_IceCandidatePairEventType_internal_data_[];
enum MediaType : int;
extern const uint32_t MediaType_internal_data_[];
enum VideoReceiveConfig_RtcpMode : int;
extern const uint32_t VideoReceiveConfig_RtcpMode_internal_data_[];
class AlrState;
struct AlrStateDefaultTypeInternal;
extern AlrStateDefaultTypeInternal _AlrState_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<23> AlrState_class_data_;
class AudioNetworkAdaptation;
struct AudioNetworkAdaptationDefaultTypeInternal;
extern AudioNetworkAdaptationDefaultTypeInternal _AudioNetworkAdaptation_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<37> AudioNetworkAdaptation_class_data_;
class AudioPlayoutEvent;
struct AudioPlayoutEventDefaultTypeInternal;
extern AudioPlayoutEventDefaultTypeInternal _AudioPlayoutEvent_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<32> AudioPlayoutEvent_class_data_;
class AudioReceiveConfig;
struct AudioReceiveConfigDefaultTypeInternal;
extern AudioReceiveConfigDefaultTypeInternal _AudioReceiveConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<33> AudioReceiveConfig_class_data_;
class AudioSendConfig;
struct AudioSendConfigDefaultTypeInternal;
extern AudioSendConfigDefaultTypeInternal _AudioSendConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<30> AudioSendConfig_class_data_;
class BweProbeCluster;
struct BweProbeClusterDefaultTypeInternal;
extern BweProbeClusterDefaultTypeInternal _BweProbeCluster_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<30> BweProbeCluster_class_data_;
class BweProbeResult;
struct BweProbeResultDefaultTypeInternal;
extern BweProbeResultDefaultTypeInternal _BweProbeResult_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<29> BweProbeResult_class_data_;
class DecoderConfig;
struct DecoderConfigDefaultTypeInternal;
extern DecoderConfigDefaultTypeInternal _DecoderConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<28> DecoderConfig_class_data_;
class DelayBasedBweUpdate;
struct DelayBasedBweUpdateDefaultTypeInternal;
extern DelayBasedBweUpdateDefaultTypeInternal _DelayBasedBweUpdate_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<34> DelayBasedBweUpdate_class_data_;
class EncoderConfig;
struct EncoderConfigDefaultTypeInternal;
extern EncoderConfigDefaultTypeInternal _EncoderConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<28> EncoderConfig_class_data_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<20> Event_class_data_;
class EventStream;
struct EventStreamDefaultTypeInternal;
extern EventStreamDefaultTypeInternal _EventStream_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<26> EventStream_class_data_;
class IceCandidatePairConfig;
struct IceCandidatePairConfigDefaultTypeInternal;
extern IceCandidatePairConfigDefaultTypeInternal _IceCandidatePairConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<37> IceCandidatePairConfig_class_data_;
class IceCandidatePairEvent;
struct IceCandidatePairEventDefaultTypeInternal;
extern IceCandidatePairEventDefaultTypeInternal _IceCandidatePairEvent_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<36> IceCandidatePairEvent_class_data_;
class LossBasedBweUpdate;
struct LossBasedBweUpdateDefaultTypeInternal;
extern LossBasedBweUpdateDefaultTypeInternal _LossBasedBweUpdate_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<33> LossBasedBweUpdate_class_data_;
class RemoteEstimate;
struct RemoteEstimateDefaultTypeInternal;
extern RemoteEstimateDefaultTypeInternal _RemoteEstimate_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<29> RemoteEstimate_class_data_;
class RtcpPacket;
struct RtcpPacketDefaultTypeInternal;
extern RtcpPacketDefaultTypeInternal _RtcpPacket_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<25> RtcpPacket_class_data_;
class RtpHeaderExtension;
struct RtpHeaderExtensionDefaultTypeInternal;
extern RtpHeaderExtensionDefaultTypeInternal _RtpHeaderExtension_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<33> RtpHeaderExtension_class_data_;
class RtpPacket;
struct RtpPacketDefaultTypeInternal;
extern RtpPacketDefaultTypeInternal _RtpPacket_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<24> RtpPacket_class_data_;
class RtxConfig;
struct RtxConfigDefaultTypeInternal;
extern RtxConfigDefaultTypeInternal _RtxConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<24> RtxConfig_class_data_;
class RtxMap;
struct RtxMapDefaultTypeInternal;
extern RtxMapDefaultTypeInternal _RtxMap_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<21> RtxMap_class_data_;
class VideoReceiveConfig;
struct VideoReceiveConfigDefaultTypeInternal;
extern VideoReceiveConfigDefaultTypeInternal _VideoReceiveConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<33> VideoReceiveConfig_class_data_;
class VideoSendConfig;
struct VideoSendConfigDefaultTypeInternal;
extern VideoSendConfigDefaultTypeInternal _VideoSendConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<30> VideoSendConfig_class_data_;
}  // namespace rtclog
}  // namespace webrtc
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::webrtc::rtclog::BweProbeResult_ResultType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::BweProbeResult_ResultType>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::DelayBasedBweUpdate_DetectorState_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::DelayBasedBweUpdate_DetectorState>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::Event_EventType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::Event_EventType>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::IceCandidatePairConfig_AddressFamily_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::IceCandidatePairConfig_AddressFamily>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::IceCandidatePairConfig_NetworkType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::IceCandidatePairConfig_NetworkType>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::IceCandidatePairConfig_Protocol_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::IceCandidatePairConfig_Protocol>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::MediaType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::MediaType>;
template <>
internal::EnumTraitsT<::webrtc::rtclog::VideoReceiveConfig_RtcpMode_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::rtclog::VideoReceiveConfig_RtcpMode>;
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace rtclog {
enum Event_EventType : int {
  Event_EventType_UNKNOWN_EVENT = 0,
  Event_EventType_LOG_START = 1,
  Event_EventType_LOG_END = 2,
  Event_EventType_RTP_EVENT = 3,
  Event_EventType_RTCP_EVENT = 4,
  Event_EventType_AUDIO_PLAYOUT_EVENT = 5,
  Event_EventType_LOSS_BASED_BWE_UPDATE = 6,
  Event_EventType_DELAY_BASED_BWE_UPDATE = 7,
  Event_EventType_VIDEO_RECEIVER_CONFIG_EVENT = 8,
  Event_EventType_VIDEO_SENDER_CONFIG_EVENT = 9,
  Event_EventType_AUDIO_RECEIVER_CONFIG_EVENT = 10,
  Event_EventType_AUDIO_SENDER_CONFIG_EVENT = 11,
  Event_EventType_AUDIO_NETWORK_ADAPTATION_EVENT = 16,
  Event_EventType_BWE_PROBE_CLUSTER_CREATED_EVENT = 17,
  Event_EventType_BWE_PROBE_RESULT_EVENT = 18,
  Event_EventType_ALR_STATE_EVENT = 19,
  Event_EventType_ICE_CANDIDATE_PAIR_CONFIG = 20,
  Event_EventType_ICE_CANDIDATE_PAIR_EVENT = 21,
  Event_EventType_REMOTE_ESTIMATE = 22,
};

extern const uint32_t Event_EventType_internal_data_[];
inline constexpr Event_EventType Event_EventType_EventType_MIN =
    static_cast<Event_EventType>(0);
inline constexpr Event_EventType Event_EventType_EventType_MAX =
    static_cast<Event_EventType>(22);
inline bool Event_EventType_IsValid(int value) {
  return 0 <= value && value <= 22 && ((8327167u >> value) & 1) != 0;
}
inline constexpr int Event_EventType_EventType_ARRAYSIZE = 22 + 1;
const std::string& Event_EventType_Name(Event_EventType value);
template <typename T>
const std::string& Event_EventType_Name(T value) {
  static_assert(std::is_same<T, Event_EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return Event_EventType_Name(static_cast<Event_EventType>(value));
}
bool Event_EventType_Parse(
    absl::string_view name, Event_EventType* PROTOBUF_NONNULL value);
enum DelayBasedBweUpdate_DetectorState : int {
  DelayBasedBweUpdate_DetectorState_BWE_NORMAL = 0,
  DelayBasedBweUpdate_DetectorState_BWE_UNDERUSING = 1,
  DelayBasedBweUpdate_DetectorState_BWE_OVERUSING = 2,
};

extern const uint32_t DelayBasedBweUpdate_DetectorState_internal_data_[];
inline constexpr DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate_DetectorState_DetectorState_MIN =
    static_cast<DelayBasedBweUpdate_DetectorState>(0);
inline constexpr DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate_DetectorState_DetectorState_MAX =
    static_cast<DelayBasedBweUpdate_DetectorState>(2);
inline bool DelayBasedBweUpdate_DetectorState_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int DelayBasedBweUpdate_DetectorState_DetectorState_ARRAYSIZE = 2 + 1;
const std::string& DelayBasedBweUpdate_DetectorState_Name(DelayBasedBweUpdate_DetectorState value);
template <typename T>
const std::string& DelayBasedBweUpdate_DetectorState_Name(T value) {
  static_assert(std::is_same<T, DelayBasedBweUpdate_DetectorState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DetectorState_Name().");
  return DelayBasedBweUpdate_DetectorState_Name(static_cast<DelayBasedBweUpdate_DetectorState>(value));
}
bool DelayBasedBweUpdate_DetectorState_Parse(
    absl::string_view name, DelayBasedBweUpdate_DetectorState* PROTOBUF_NONNULL value);
enum VideoReceiveConfig_RtcpMode : int {
  VideoReceiveConfig_RtcpMode_RTCP_COMPOUND = 1,
  VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE = 2,
};

extern const uint32_t VideoReceiveConfig_RtcpMode_internal_data_[];
inline constexpr VideoReceiveConfig_RtcpMode VideoReceiveConfig_RtcpMode_RtcpMode_MIN =
    static_cast<VideoReceiveConfig_RtcpMode>(1);
inline constexpr VideoReceiveConfig_RtcpMode VideoReceiveConfig_RtcpMode_RtcpMode_MAX =
    static_cast<VideoReceiveConfig_RtcpMode>(2);
inline bool VideoReceiveConfig_RtcpMode_IsValid(int value) {
  return 1 <= value && value <= 2;
}
inline constexpr int VideoReceiveConfig_RtcpMode_RtcpMode_ARRAYSIZE = 2 + 1;
const std::string& VideoReceiveConfig_RtcpMode_Name(VideoReceiveConfig_RtcpMode value);
template <typename T>
const std::string& VideoReceiveConfig_RtcpMode_Name(T value) {
  static_assert(std::is_same<T, VideoReceiveConfig_RtcpMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RtcpMode_Name().");
  return VideoReceiveConfig_RtcpMode_Name(static_cast<VideoReceiveConfig_RtcpMode>(value));
}
bool VideoReceiveConfig_RtcpMode_Parse(
    absl::string_view name, VideoReceiveConfig_RtcpMode* PROTOBUF_NONNULL value);
enum BweProbeResult_ResultType : int {
  BweProbeResult_ResultType_SUCCESS = 0,
  BweProbeResult_ResultType_INVALID_SEND_RECEIVE_INTERVAL = 1,
  BweProbeResult_ResultType_INVALID_SEND_RECEIVE_RATIO = 2,
  BweProbeResult_ResultType_TIMEOUT = 3,
};

extern const uint32_t BweProbeResult_ResultType_internal_data_[];
inline constexpr BweProbeResult_ResultType BweProbeResult_ResultType_ResultType_MIN =
    static_cast<BweProbeResult_ResultType>(0);
inline constexpr BweProbeResult_ResultType BweProbeResult_ResultType_ResultType_MAX =
    static_cast<BweProbeResult_ResultType>(3);
inline bool BweProbeResult_ResultType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int BweProbeResult_ResultType_ResultType_ARRAYSIZE = 3 + 1;
const std::string& BweProbeResult_ResultType_Name(BweProbeResult_ResultType value);
template <typename T>
const std::string& BweProbeResult_ResultType_Name(T value) {
  static_assert(std::is_same<T, BweProbeResult_ResultType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResultType_Name().");
  return BweProbeResult_ResultType_Name(static_cast<BweProbeResult_ResultType>(value));
}
bool BweProbeResult_ResultType_Parse(
    absl::string_view name, BweProbeResult_ResultType* PROTOBUF_NONNULL value);
enum IceCandidatePairConfig_IceCandidatePairConfigType : int {
  IceCandidatePairConfig_IceCandidatePairConfigType_ADDED = 0,
  IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED = 1,
  IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED = 2,
  IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED = 3,
};

extern const uint32_t IceCandidatePairConfig_IceCandidatePairConfigType_internal_data_[];
inline constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN =
    static_cast<IceCandidatePairConfig_IceCandidatePairConfigType>(0);
inline constexpr IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX =
    static_cast<IceCandidatePairConfig_IceCandidatePairConfigType>(3);
inline bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE = 3 + 1;
const std::string& IceCandidatePairConfig_IceCandidatePairConfigType_Name(IceCandidatePairConfig_IceCandidatePairConfigType value);
template <typename T>
const std::string& IceCandidatePairConfig_IceCandidatePairConfigType_Name(T value) {
  static_assert(std::is_same<T, IceCandidatePairConfig_IceCandidatePairConfigType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IceCandidatePairConfigType_Name().");
  return IceCandidatePairConfig_IceCandidatePairConfigType_Name(static_cast<IceCandidatePairConfig_IceCandidatePairConfigType>(value));
}
bool IceCandidatePairConfig_IceCandidatePairConfigType_Parse(
    absl::string_view name, IceCandidatePairConfig_IceCandidatePairConfigType* PROTOBUF_NONNULL value);
enum IceCandidatePairConfig_IceCandidateType : int {
  IceCandidatePairConfig_IceCandidateType_LOCAL = 0,
  IceCandidatePairConfig_IceCandidateType_STUN = 1,
  IceCandidatePairConfig_IceCandidateType_PRFLX = 2,
  IceCandidatePairConfig_IceCandidateType_RELAY = 3,
  IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE = 4,
};

extern const uint32_t IceCandidatePairConfig_IceCandidateType_internal_data_[];
inline constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN =
    static_cast<IceCandidatePairConfig_IceCandidateType>(0);
inline constexpr IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX =
    static_cast<IceCandidatePairConfig_IceCandidateType>(4);
inline bool IceCandidatePairConfig_IceCandidateType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE = 4 + 1;
const std::string& IceCandidatePairConfig_IceCandidateType_Name(IceCandidatePairConfig_IceCandidateType value);
template <typename T>
const std::string& IceCandidatePairConfig_IceCandidateType_Name(T value) {
  static_assert(std::is_same<T, IceCandidatePairConfig_IceCandidateType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IceCandidateType_Name().");
  return IceCandidatePairConfig_IceCandidateType_Name(static_cast<IceCandidatePairConfig_IceCandidateType>(value));
}
bool IceCandidatePairConfig_IceCandidateType_Parse(
    absl::string_view name, IceCandidatePairConfig_IceCandidateType* PROTOBUF_NONNULL value);
enum IceCandidatePairConfig_Protocol : int {
  IceCandidatePairConfig_Protocol_UDP = 0,
  IceCandidatePairConfig_Protocol_TCP = 1,
  IceCandidatePairConfig_Protocol_SSLTCP = 2,
  IceCandidatePairConfig_Protocol_TLS = 3,
  IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL = 4,
};

extern const uint32_t IceCandidatePairConfig_Protocol_internal_data_[];
inline constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MIN =
    static_cast<IceCandidatePairConfig_Protocol>(0);
inline constexpr IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MAX =
    static_cast<IceCandidatePairConfig_Protocol>(4);
inline bool IceCandidatePairConfig_Protocol_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE = 4 + 1;
const std::string& IceCandidatePairConfig_Protocol_Name(IceCandidatePairConfig_Protocol value);
template <typename T>
const std::string& IceCandidatePairConfig_Protocol_Name(T value) {
  static_assert(std::is_same<T, IceCandidatePairConfig_Protocol>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Protocol_Name().");
  return IceCandidatePairConfig_Protocol_Name(static_cast<IceCandidatePairConfig_Protocol>(value));
}
bool IceCandidatePairConfig_Protocol_Parse(
    absl::string_view name, IceCandidatePairConfig_Protocol* PROTOBUF_NONNULL value);
enum IceCandidatePairConfig_AddressFamily : int {
  IceCandidatePairConfig_AddressFamily_IPV4 = 0,
  IceCandidatePairConfig_AddressFamily_IPV6 = 1,
  IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY = 2,
};

extern const uint32_t IceCandidatePairConfig_AddressFamily_internal_data_[];
inline constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MIN =
    static_cast<IceCandidatePairConfig_AddressFamily>(0);
inline constexpr IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MAX =
    static_cast<IceCandidatePairConfig_AddressFamily>(2);
inline bool IceCandidatePairConfig_AddressFamily_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE = 2 + 1;
const std::string& IceCandidatePairConfig_AddressFamily_Name(IceCandidatePairConfig_AddressFamily value);
template <typename T>
const std::string& IceCandidatePairConfig_AddressFamily_Name(T value) {
  static_assert(std::is_same<T, IceCandidatePairConfig_AddressFamily>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AddressFamily_Name().");
  return IceCandidatePairConfig_AddressFamily_Name(static_cast<IceCandidatePairConfig_AddressFamily>(value));
}
bool IceCandidatePairConfig_AddressFamily_Parse(
    absl::string_view name, IceCandidatePairConfig_AddressFamily* PROTOBUF_NONNULL value);
enum IceCandidatePairConfig_NetworkType : int {
  IceCandidatePairConfig_NetworkType_ETHERNET = 0,
  IceCandidatePairConfig_NetworkType_LOOPBACK = 1,
  IceCandidatePairConfig_NetworkType_WIFI = 2,
  IceCandidatePairConfig_NetworkType_VPN = 3,
  IceCandidatePairConfig_NetworkType_CELLULAR = 4,
  IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE = 5,
};

extern const uint32_t IceCandidatePairConfig_NetworkType_internal_data_[];
inline constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MIN =
    static_cast<IceCandidatePairConfig_NetworkType>(0);
inline constexpr IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MAX =
    static_cast<IceCandidatePairConfig_NetworkType>(5);
inline bool IceCandidatePairConfig_NetworkType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
inline constexpr int IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE = 5 + 1;
const std::string& IceCandidatePairConfig_NetworkType_Name(IceCandidatePairConfig_NetworkType value);
template <typename T>
const std::string& IceCandidatePairConfig_NetworkType_Name(T value) {
  static_assert(std::is_same<T, IceCandidatePairConfig_NetworkType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NetworkType_Name().");
  return IceCandidatePairConfig_NetworkType_Name(static_cast<IceCandidatePairConfig_NetworkType>(value));
}
bool IceCandidatePairConfig_NetworkType_Parse(
    absl::string_view name, IceCandidatePairConfig_NetworkType* PROTOBUF_NONNULL value);
enum IceCandidatePairEvent_IceCandidatePairEventType : int {
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT = 0,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED = 1,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT = 2,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED = 3,
};

extern const uint32_t IceCandidatePairEvent_IceCandidatePairEventType_internal_data_[];
inline constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN =
    static_cast<IceCandidatePairEvent_IceCandidatePairEventType>(0);
inline constexpr IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX =
    static_cast<IceCandidatePairEvent_IceCandidatePairEventType>(3);
inline bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE = 3 + 1;
const std::string& IceCandidatePairEvent_IceCandidatePairEventType_Name(IceCandidatePairEvent_IceCandidatePairEventType value);
template <typename T>
const std::string& IceCandidatePairEvent_IceCandidatePairEventType_Name(T value) {
  static_assert(std::is_same<T, IceCandidatePairEvent_IceCandidatePairEventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IceCandidatePairEventType_Name().");
  return IceCandidatePairEvent_IceCandidatePairEventType_Name(static_cast<IceCandidatePairEvent_IceCandidatePairEventType>(value));
}
bool IceCandidatePairEvent_IceCandidatePairEventType_Parse(
    absl::string_view name, IceCandidatePairEvent_IceCandidatePairEventType* PROTOBUF_NONNULL value);
enum MediaType : int {
  ANY = 0,
  AUDIO = 1,
  VIDEO = 2,
  DATA = 3,
};

extern const uint32_t MediaType_internal_data_[];
inline constexpr MediaType MediaType_MIN =
    static_cast<MediaType>(0);
inline constexpr MediaType MediaType_MAX =
    static_cast<MediaType>(3);
inline bool MediaType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int MediaType_ARRAYSIZE = 3 + 1;
const std::string& MediaType_Name(MediaType value);
template <typename T>
const std::string& MediaType_Name(T value) {
  static_assert(std::is_same<T, MediaType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MediaType_Name().");
  return MediaType_Name(static_cast<MediaType>(value));
}
bool MediaType_Parse(
    absl::string_view name, MediaType* PROTOBUF_NONNULL value);

// ===================================================================


// -------------------------------------------------------------------

class RtxConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtxConfig) */ {
 public:
  inline RtxConfig() : RtxConfig(nullptr) {}
  ~RtxConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RtxConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RtxConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RtxConfig(::google::protobuf::internal::ConstantInitialized);

  inline RtxConfig(const RtxConfig& from) : RtxConfig(nullptr, from) {}
  inline RtxConfig(RtxConfig&& from) noexcept
      : RtxConfig(nullptr, std::move(from)) {}
  inline RtxConfig& operator=(const RtxConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtxConfig& operator=(RtxConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RtxConfig& default_instance() {
    return *reinterpret_cast<const RtxConfig*>(
        &_RtxConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(RtxConfig& a, RtxConfig& b) { a.Swap(&b); }
  inline void Swap(RtxConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtxConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtxConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<RtxConfig>(arena);
  }
  void CopyFrom(const RtxConfig& from);
  void MergeFrom(const RtxConfig& from) { RtxConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RtxConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.RtxConfig"; }

 protected:
  explicit RtxConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RtxConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RtxConfig& from);
  RtxConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RtxConfig&& from) noexcept
      : RtxConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRtxSsrcFieldNumber = 1,
    kRtxPayloadTypeFieldNumber = 2,
  };
  // optional uint32 rtx_ssrc = 1;
  bool has_rtx_ssrc() const;
  void clear_rtx_ssrc() ;
  ::uint32_t rtx_ssrc() const;
  void set_rtx_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_rtx_ssrc() const;
  void _internal_set_rtx_ssrc(::uint32_t value);

  public:
  // optional int32 rtx_payload_type = 2;
  bool has_rtx_payload_type() const;
  void clear_rtx_payload_type() ;
  ::int32_t rtx_payload_type() const;
  void set_rtx_payload_type(::int32_t value);

  private:
  ::int32_t _internal_rtx_payload_type() const;
  void _internal_set_rtx_payload_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtxConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RtxConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t rtx_ssrc_;
    ::int32_t rtx_payload_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<24> RtxConfig_class_data_;
// -------------------------------------------------------------------

class RtpPacket final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtpPacket) */ {
 public:
  inline RtpPacket() : RtpPacket(nullptr) {}
  ~RtpPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RtpPacket* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RtpPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RtpPacket(::google::protobuf::internal::ConstantInitialized);

  inline RtpPacket(const RtpPacket& from) : RtpPacket(nullptr, from) {}
  inline RtpPacket(RtpPacket&& from) noexcept
      : RtpPacket(nullptr, std::move(from)) {}
  inline RtpPacket& operator=(const RtpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtpPacket& operator=(RtpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RtpPacket& default_instance() {
    return *reinterpret_cast<const RtpPacket*>(
        &_RtpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RtpPacket& a, RtpPacket& b) { a.Swap(&b); }
  inline void Swap(RtpPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtpPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtpPacket* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<RtpPacket>(arena);
  }
  void CopyFrom(const RtpPacket& from);
  void MergeFrom(const RtpPacket& from) { RtpPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RtpPacket* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.RtpPacket"; }

 protected:
  explicit RtpPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RtpPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RtpPacket& from);
  RtpPacket(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RtpPacket&& from) noexcept
      : RtpPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 4,
    kIncomingFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPacketLengthFieldNumber = 3,
    kProbeClusterIdFieldNumber = 5,
  };
  // optional bytes header = 4;
  bool has_header() const;
  void clear_header() ;
  const std::string& header() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_header();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_header();
  void set_allocated_header(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_header() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_header();

  public:
  // optional bool incoming = 1;
  bool has_incoming() const;
  void clear_incoming() ;
  bool incoming() const;
  void set_incoming(bool value);

  private:
  bool _internal_incoming() const;
  void _internal_set_incoming(bool value);

  public:
  // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
  bool has_type() const;
  void clear_type() ;
  ::webrtc::rtclog::MediaType type() const;
  void set_type(::webrtc::rtclog::MediaType value);

  private:
  ::webrtc::rtclog::MediaType _internal_type() const;
  void _internal_set_type(::webrtc::rtclog::MediaType value);

  public:
  // optional uint32 packet_length = 3;
  bool has_packet_length() const;
  void clear_packet_length() ;
  ::uint32_t packet_length() const;
  void set_packet_length(::uint32_t value);

  private:
  ::uint32_t _internal_packet_length() const;
  void _internal_set_packet_length(::uint32_t value);

  public:
  // optional int32 probe_cluster_id = 5;
  bool has_probe_cluster_id() const;
  void clear_probe_cluster_id() ;
  ::int32_t probe_cluster_id() const;
  void set_probe_cluster_id(::int32_t value);

  private:
  ::int32_t _internal_probe_cluster_id() const;
  void _internal_set_probe_cluster_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtpPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RtpPacket& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr header_;
    bool incoming_;
    int type_;
    ::uint32_t packet_length_;
    ::int32_t probe_cluster_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<24> RtpPacket_class_data_;
// -------------------------------------------------------------------

class RtpHeaderExtension final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtpHeaderExtension) */ {
 public:
  inline RtpHeaderExtension() : RtpHeaderExtension(nullptr) {}
  ~RtpHeaderExtension() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RtpHeaderExtension* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RtpHeaderExtension));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RtpHeaderExtension(::google::protobuf::internal::ConstantInitialized);

  inline RtpHeaderExtension(const RtpHeaderExtension& from) : RtpHeaderExtension(nullptr, from) {}
  inline RtpHeaderExtension(RtpHeaderExtension&& from) noexcept
      : RtpHeaderExtension(nullptr, std::move(from)) {}
  inline RtpHeaderExtension& operator=(const RtpHeaderExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtpHeaderExtension& operator=(RtpHeaderExtension&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RtpHeaderExtension& default_instance() {
    return *reinterpret_cast<const RtpHeaderExtension*>(
        &_RtpHeaderExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(RtpHeaderExtension& a, RtpHeaderExtension& b) { a.Swap(&b); }
  inline void Swap(RtpHeaderExtension* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtpHeaderExtension* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtpHeaderExtension* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<RtpHeaderExtension>(arena);
  }
  void CopyFrom(const RtpHeaderExtension& from);
  void MergeFrom(const RtpHeaderExtension& from) { RtpHeaderExtension::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RtpHeaderExtension* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.RtpHeaderExtension"; }

 protected:
  explicit RtpHeaderExtension(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RtpHeaderExtension(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RtpHeaderExtension& from);
  RtpHeaderExtension(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RtpHeaderExtension&& from) noexcept
      : RtpHeaderExtension(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // optional int32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtpHeaderExtension)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RtpHeaderExtension& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<33> RtpHeaderExtension_class_data_;
// -------------------------------------------------------------------

class RtcpPacket final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtcpPacket) */ {
 public:
  inline RtcpPacket() : RtcpPacket(nullptr) {}
  ~RtcpPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RtcpPacket* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RtcpPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RtcpPacket(::google::protobuf::internal::ConstantInitialized);

  inline RtcpPacket(const RtcpPacket& from) : RtcpPacket(nullptr, from) {}
  inline RtcpPacket(RtcpPacket&& from) noexcept
      : RtcpPacket(nullptr, std::move(from)) {}
  inline RtcpPacket& operator=(const RtcpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcpPacket& operator=(RtcpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RtcpPacket& default_instance() {
    return *reinterpret_cast<const RtcpPacket*>(
        &_RtcpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RtcpPacket& a, RtcpPacket& b) { a.Swap(&b); }
  inline void Swap(RtcpPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcpPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcpPacket* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<RtcpPacket>(arena);
  }
  void CopyFrom(const RtcpPacket& from);
  void MergeFrom(const RtcpPacket& from) { RtcpPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RtcpPacket* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.RtcpPacket"; }

 protected:
  explicit RtcpPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RtcpPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RtcpPacket& from);
  RtcpPacket(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RtcpPacket&& from) noexcept
      : RtcpPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPacketDataFieldNumber = 3,
    kIncomingFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional bytes packet_data = 3;
  bool has_packet_data() const;
  void clear_packet_data() ;
  const std::string& packet_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_packet_data(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_packet_data();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_packet_data();
  void set_allocated_packet_data(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_packet_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_packet_data(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_packet_data();

  public:
  // optional bool incoming = 1;
  bool has_incoming() const;
  void clear_incoming() ;
  bool incoming() const;
  void set_incoming(bool value);

  private:
  bool _internal_incoming() const;
  void _internal_set_incoming(bool value);

  public:
  // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
  bool has_type() const;
  void clear_type() ;
  ::webrtc::rtclog::MediaType type() const;
  void set_type(::webrtc::rtclog::MediaType value);

  private:
  ::webrtc::rtclog::MediaType _internal_type() const;
  void _internal_set_type(::webrtc::rtclog::MediaType value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtcpPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RtcpPacket& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr packet_data_;
    bool incoming_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<25> RtcpPacket_class_data_;
// -------------------------------------------------------------------

class RemoteEstimate final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.RemoteEstimate) */ {
 public:
  inline RemoteEstimate() : RemoteEstimate(nullptr) {}
  ~RemoteEstimate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemoteEstimate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemoteEstimate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoteEstimate(::google::protobuf::internal::ConstantInitialized);

  inline RemoteEstimate(const RemoteEstimate& from) : RemoteEstimate(nullptr, from) {}
  inline RemoteEstimate(RemoteEstimate&& from) noexcept
      : RemoteEstimate(nullptr, std::move(from)) {}
  inline RemoteEstimate& operator=(const RemoteEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteEstimate& operator=(RemoteEstimate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteEstimate& default_instance() {
    return *reinterpret_cast<const RemoteEstimate*>(
        &_RemoteEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(RemoteEstimate& a, RemoteEstimate& b) { a.Swap(&b); }
  inline void Swap(RemoteEstimate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteEstimate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteEstimate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<RemoteEstimate>(arena);
  }
  void CopyFrom(const RemoteEstimate& from);
  void MergeFrom(const RemoteEstimate& from) { RemoteEstimate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemoteEstimate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.RemoteEstimate"; }

 protected:
  explicit RemoteEstimate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RemoteEstimate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RemoteEstimate& from);
  RemoteEstimate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RemoteEstimate&& from) noexcept
      : RemoteEstimate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLinkCapacityLowerKbpsFieldNumber = 1,
    kLinkCapacityUpperKbpsFieldNumber = 2,
  };
  // optional uint32 link_capacity_lower_kbps = 1;
  bool has_link_capacity_lower_kbps() const;
  void clear_link_capacity_lower_kbps() ;
  ::uint32_t link_capacity_lower_kbps() const;
  void set_link_capacity_lower_kbps(::uint32_t value);

  private:
  ::uint32_t _internal_link_capacity_lower_kbps() const;
  void _internal_set_link_capacity_lower_kbps(::uint32_t value);

  public:
  // optional uint32 link_capacity_upper_kbps = 2;
  bool has_link_capacity_upper_kbps() const;
  void clear_link_capacity_upper_kbps() ;
  ::uint32_t link_capacity_upper_kbps() const;
  void set_link_capacity_upper_kbps(::uint32_t value);

  private:
  ::uint32_t _internal_link_capacity_upper_kbps() const;
  void _internal_set_link_capacity_upper_kbps(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RemoteEstimate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RemoteEstimate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t link_capacity_lower_kbps_;
    ::uint32_t link_capacity_upper_kbps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<29> RemoteEstimate_class_data_;
// -------------------------------------------------------------------

class LossBasedBweUpdate final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.LossBasedBweUpdate) */ {
 public:
  inline LossBasedBweUpdate() : LossBasedBweUpdate(nullptr) {}
  ~LossBasedBweUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LossBasedBweUpdate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LossBasedBweUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LossBasedBweUpdate(::google::protobuf::internal::ConstantInitialized);

  inline LossBasedBweUpdate(const LossBasedBweUpdate& from) : LossBasedBweUpdate(nullptr, from) {}
  inline LossBasedBweUpdate(LossBasedBweUpdate&& from) noexcept
      : LossBasedBweUpdate(nullptr, std::move(from)) {}
  inline LossBasedBweUpdate& operator=(const LossBasedBweUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossBasedBweUpdate& operator=(LossBasedBweUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LossBasedBweUpdate& default_instance() {
    return *reinterpret_cast<const LossBasedBweUpdate*>(
        &_LossBasedBweUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(LossBasedBweUpdate& a, LossBasedBweUpdate& b) { a.Swap(&b); }
  inline void Swap(LossBasedBweUpdate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossBasedBweUpdate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LossBasedBweUpdate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<LossBasedBweUpdate>(arena);
  }
  void CopyFrom(const LossBasedBweUpdate& from);
  void MergeFrom(const LossBasedBweUpdate& from) { LossBasedBweUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LossBasedBweUpdate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.LossBasedBweUpdate"; }

 protected:
  explicit LossBasedBweUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  LossBasedBweUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const LossBasedBweUpdate& from);
  LossBasedBweUpdate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, LossBasedBweUpdate&& from) noexcept
      : LossBasedBweUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBitrateBpsFieldNumber = 1,
    kFractionLossFieldNumber = 2,
    kTotalPacketsFieldNumber = 3,
  };
  // optional int32 bitrate_bps = 1;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps() ;
  ::int32_t bitrate_bps() const;
  void set_bitrate_bps(::int32_t value);

  private:
  ::int32_t _internal_bitrate_bps() const;
  void _internal_set_bitrate_bps(::int32_t value);

  public:
  // optional uint32 fraction_loss = 2;
  bool has_fraction_loss() const;
  void clear_fraction_loss() ;
  ::uint32_t fraction_loss() const;
  void set_fraction_loss(::uint32_t value);

  private:
  ::uint32_t _internal_fraction_loss() const;
  void _internal_set_fraction_loss(::uint32_t value);

  public:
  // optional int32 total_packets = 3;
  bool has_total_packets() const;
  void clear_total_packets() ;
  ::int32_t total_packets() const;
  void set_total_packets(::int32_t value);

  private:
  ::int32_t _internal_total_packets() const;
  void _internal_set_total_packets(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.LossBasedBweUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const LossBasedBweUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t bitrate_bps_;
    ::uint32_t fraction_loss_;
    ::int32_t total_packets_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<33> LossBasedBweUpdate_class_data_;
// -------------------------------------------------------------------

class IceCandidatePairEvent final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.IceCandidatePairEvent) */ {
 public:
  inline IceCandidatePairEvent() : IceCandidatePairEvent(nullptr) {}
  ~IceCandidatePairEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IceCandidatePairEvent* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IceCandidatePairEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IceCandidatePairEvent(::google::protobuf::internal::ConstantInitialized);

  inline IceCandidatePairEvent(const IceCandidatePairEvent& from) : IceCandidatePairEvent(nullptr, from) {}
  inline IceCandidatePairEvent(IceCandidatePairEvent&& from) noexcept
      : IceCandidatePairEvent(nullptr, std::move(from)) {}
  inline IceCandidatePairEvent& operator=(const IceCandidatePairEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IceCandidatePairEvent& operator=(IceCandidatePairEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IceCandidatePairEvent& default_instance() {
    return *reinterpret_cast<const IceCandidatePairEvent*>(
        &_IceCandidatePairEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(IceCandidatePairEvent& a, IceCandidatePairEvent& b) { a.Swap(&b); }
  inline void Swap(IceCandidatePairEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IceCandidatePairEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IceCandidatePairEvent* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<IceCandidatePairEvent>(arena);
  }
  void CopyFrom(const IceCandidatePairEvent& from);
  void MergeFrom(const IceCandidatePairEvent& from) { IceCandidatePairEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IceCandidatePairEvent* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.IceCandidatePairEvent"; }

 protected:
  explicit IceCandidatePairEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  IceCandidatePairEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const IceCandidatePairEvent& from);
  IceCandidatePairEvent(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, IceCandidatePairEvent&& from) noexcept
      : IceCandidatePairEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using IceCandidatePairEventType = IceCandidatePairEvent_IceCandidatePairEventType;
  static constexpr IceCandidatePairEventType CHECK_SENT = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT;
  static constexpr IceCandidatePairEventType CHECK_RECEIVED = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED;
  static constexpr IceCandidatePairEventType CHECK_RESPONSE_SENT = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT;
  static constexpr IceCandidatePairEventType CHECK_RESPONSE_RECEIVED = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED;
  static inline bool IceCandidatePairEventType_IsValid(int value) {
    return IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value);
  }
  static constexpr IceCandidatePairEventType IceCandidatePairEventType_MIN = IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN;
  static constexpr IceCandidatePairEventType IceCandidatePairEventType_MAX = IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX;
  static constexpr int IceCandidatePairEventType_ARRAYSIZE = IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& IceCandidatePairEventType_Name(T value) {
    return IceCandidatePairEvent_IceCandidatePairEventType_Name(value);
  }
  static inline bool IceCandidatePairEventType_Parse(
      absl::string_view name, IceCandidatePairEventType* PROTOBUF_NONNULL value) {
    return IceCandidatePairEvent_IceCandidatePairEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kEventTypeFieldNumber = 1,
    kCandidatePairIdFieldNumber = 2,
  };
  // optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
  bool has_event_type() const;
  void clear_event_type() ;
  ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType event_type() const;
  void set_event_type(::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType value);

  private:
  ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType _internal_event_type() const;
  void _internal_set_event_type(::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType value);

  public:
  // optional uint32 candidate_pair_id = 2;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id() ;
  ::uint32_t candidate_pair_id() const;
  void set_candidate_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_candidate_pair_id() const;
  void _internal_set_candidate_pair_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.IceCandidatePairEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const IceCandidatePairEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int event_type_;
    ::uint32_t candidate_pair_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<36> IceCandidatePairEvent_class_data_;
// -------------------------------------------------------------------

class IceCandidatePairConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.IceCandidatePairConfig) */ {
 public:
  inline IceCandidatePairConfig() : IceCandidatePairConfig(nullptr) {}
  ~IceCandidatePairConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IceCandidatePairConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IceCandidatePairConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IceCandidatePairConfig(::google::protobuf::internal::ConstantInitialized);

  inline IceCandidatePairConfig(const IceCandidatePairConfig& from) : IceCandidatePairConfig(nullptr, from) {}
  inline IceCandidatePairConfig(IceCandidatePairConfig&& from) noexcept
      : IceCandidatePairConfig(nullptr, std::move(from)) {}
  inline IceCandidatePairConfig& operator=(const IceCandidatePairConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IceCandidatePairConfig& operator=(IceCandidatePairConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IceCandidatePairConfig& default_instance() {
    return *reinterpret_cast<const IceCandidatePairConfig*>(
        &_IceCandidatePairConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(IceCandidatePairConfig& a, IceCandidatePairConfig& b) { a.Swap(&b); }
  inline void Swap(IceCandidatePairConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IceCandidatePairConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IceCandidatePairConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<IceCandidatePairConfig>(arena);
  }
  void CopyFrom(const IceCandidatePairConfig& from);
  void MergeFrom(const IceCandidatePairConfig& from) { IceCandidatePairConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IceCandidatePairConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.IceCandidatePairConfig"; }

 protected:
  explicit IceCandidatePairConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  IceCandidatePairConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const IceCandidatePairConfig& from);
  IceCandidatePairConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, IceCandidatePairConfig&& from) noexcept
      : IceCandidatePairConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using IceCandidatePairConfigType = IceCandidatePairConfig_IceCandidatePairConfigType;
  static constexpr IceCandidatePairConfigType ADDED = IceCandidatePairConfig_IceCandidatePairConfigType_ADDED;
  static constexpr IceCandidatePairConfigType UPDATED = IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED;
  static constexpr IceCandidatePairConfigType DESTROYED = IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED;
  static constexpr IceCandidatePairConfigType SELECTED = IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED;
  static inline bool IceCandidatePairConfigType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value);
  }
  static constexpr IceCandidatePairConfigType IceCandidatePairConfigType_MIN = IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN;
  static constexpr IceCandidatePairConfigType IceCandidatePairConfigType_MAX = IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX;
  static constexpr int IceCandidatePairConfigType_ARRAYSIZE = IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& IceCandidatePairConfigType_Name(T value) {
    return IceCandidatePairConfig_IceCandidatePairConfigType_Name(value);
  }
  static inline bool IceCandidatePairConfigType_Parse(
      absl::string_view name, IceCandidatePairConfigType* PROTOBUF_NONNULL value) {
    return IceCandidatePairConfig_IceCandidatePairConfigType_Parse(name, value);
  }
  using IceCandidateType = IceCandidatePairConfig_IceCandidateType;
  static constexpr IceCandidateType LOCAL = IceCandidatePairConfig_IceCandidateType_LOCAL;
  static constexpr IceCandidateType STUN = IceCandidatePairConfig_IceCandidateType_STUN;
  static constexpr IceCandidateType PRFLX = IceCandidatePairConfig_IceCandidateType_PRFLX;
  static constexpr IceCandidateType RELAY = IceCandidatePairConfig_IceCandidateType_RELAY;
  static constexpr IceCandidateType UNKNOWN_CANDIDATE_TYPE = IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE;
  static inline bool IceCandidateType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidateType_IsValid(value);
  }
  static constexpr IceCandidateType IceCandidateType_MIN = IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN;
  static constexpr IceCandidateType IceCandidateType_MAX = IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX;
  static constexpr int IceCandidateType_ARRAYSIZE = IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& IceCandidateType_Name(T value) {
    return IceCandidatePairConfig_IceCandidateType_Name(value);
  }
  static inline bool IceCandidateType_Parse(
      absl::string_view name, IceCandidateType* PROTOBUF_NONNULL value) {
    return IceCandidatePairConfig_IceCandidateType_Parse(name, value);
  }
  using Protocol = IceCandidatePairConfig_Protocol;
  static constexpr Protocol UDP = IceCandidatePairConfig_Protocol_UDP;
  static constexpr Protocol TCP = IceCandidatePairConfig_Protocol_TCP;
  static constexpr Protocol SSLTCP = IceCandidatePairConfig_Protocol_SSLTCP;
  static constexpr Protocol TLS = IceCandidatePairConfig_Protocol_TLS;
  static constexpr Protocol UNKNOWN_PROTOCOL = IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL;
  static inline bool Protocol_IsValid(int value) {
    return IceCandidatePairConfig_Protocol_IsValid(value);
  }
  static constexpr Protocol Protocol_MIN = IceCandidatePairConfig_Protocol_Protocol_MIN;
  static constexpr Protocol Protocol_MAX = IceCandidatePairConfig_Protocol_Protocol_MAX;
  static constexpr int Protocol_ARRAYSIZE = IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Protocol_Name(T value) {
    return IceCandidatePairConfig_Protocol_Name(value);
  }
  static inline bool Protocol_Parse(
      absl::string_view name, Protocol* PROTOBUF_NONNULL value) {
    return IceCandidatePairConfig_Protocol_Parse(name, value);
  }
  using AddressFamily = IceCandidatePairConfig_AddressFamily;
  static constexpr AddressFamily IPV4 = IceCandidatePairConfig_AddressFamily_IPV4;
  static constexpr AddressFamily IPV6 = IceCandidatePairConfig_AddressFamily_IPV6;
  static constexpr AddressFamily UNKNOWN_ADDRESS_FAMILY = IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY;
  static inline bool AddressFamily_IsValid(int value) {
    return IceCandidatePairConfig_AddressFamily_IsValid(value);
  }
  static constexpr AddressFamily AddressFamily_MIN = IceCandidatePairConfig_AddressFamily_AddressFamily_MIN;
  static constexpr AddressFamily AddressFamily_MAX = IceCandidatePairConfig_AddressFamily_AddressFamily_MAX;
  static constexpr int AddressFamily_ARRAYSIZE = IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE;
  template <typename T>
  static inline const std::string& AddressFamily_Name(T value) {
    return IceCandidatePairConfig_AddressFamily_Name(value);
  }
  static inline bool AddressFamily_Parse(
      absl::string_view name, AddressFamily* PROTOBUF_NONNULL value) {
    return IceCandidatePairConfig_AddressFamily_Parse(name, value);
  }
  using NetworkType = IceCandidatePairConfig_NetworkType;
  static constexpr NetworkType ETHERNET = IceCandidatePairConfig_NetworkType_ETHERNET;
  static constexpr NetworkType LOOPBACK = IceCandidatePairConfig_NetworkType_LOOPBACK;
  static constexpr NetworkType WIFI = IceCandidatePairConfig_NetworkType_WIFI;
  static constexpr NetworkType VPN = IceCandidatePairConfig_NetworkType_VPN;
  static constexpr NetworkType CELLULAR = IceCandidatePairConfig_NetworkType_CELLULAR;
  static constexpr NetworkType UNKNOWN_NETWORK_TYPE = IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE;
  static inline bool NetworkType_IsValid(int value) {
    return IceCandidatePairConfig_NetworkType_IsValid(value);
  }
  static constexpr NetworkType NetworkType_MIN = IceCandidatePairConfig_NetworkType_NetworkType_MIN;
  static constexpr NetworkType NetworkType_MAX = IceCandidatePairConfig_NetworkType_NetworkType_MAX;
  static constexpr int NetworkType_ARRAYSIZE = IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& NetworkType_Name(T value) {
    return IceCandidatePairConfig_NetworkType_Name(value);
  }
  static inline bool NetworkType_Parse(
      absl::string_view name, NetworkType* PROTOBUF_NONNULL value) {
    return IceCandidatePairConfig_NetworkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kConfigTypeFieldNumber = 1,
    kCandidatePairIdFieldNumber = 2,
    kLocalCandidateTypeFieldNumber = 3,
    kLocalRelayProtocolFieldNumber = 4,
    kLocalNetworkTypeFieldNumber = 5,
    kLocalAddressFamilyFieldNumber = 6,
    kRemoteCandidateTypeFieldNumber = 7,
    kRemoteAddressFamilyFieldNumber = 8,
    kCandidatePairProtocolFieldNumber = 9,
  };
  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
  bool has_config_type() const;
  void clear_config_type() ;
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType config_type() const;
  void set_config_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType _internal_config_type() const;
  void _internal_set_config_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType value);

  public:
  // optional uint32 candidate_pair_id = 2;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id() ;
  ::uint32_t candidate_pair_id() const;
  void set_candidate_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_candidate_pair_id() const;
  void _internal_set_candidate_pair_id(::uint32_t value);

  public:
  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
  bool has_local_candidate_type() const;
  void clear_local_candidate_type() ;
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType local_candidate_type() const;
  void set_local_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType _internal_local_candidate_type() const;
  void _internal_set_local_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value);

  public:
  // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
  bool has_local_relay_protocol() const;
  void clear_local_relay_protocol() ;
  ::webrtc::rtclog::IceCandidatePairConfig_Protocol local_relay_protocol() const;
  void set_local_relay_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_Protocol _internal_local_relay_protocol() const;
  void _internal_set_local_relay_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value);

  public:
  // optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
  bool has_local_network_type() const;
  void clear_local_network_type() ;
  ::webrtc::rtclog::IceCandidatePairConfig_NetworkType local_network_type() const;
  void set_local_network_type(::webrtc::rtclog::IceCandidatePairConfig_NetworkType value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_NetworkType _internal_local_network_type() const;
  void _internal_set_local_network_type(::webrtc::rtclog::IceCandidatePairConfig_NetworkType value);

  public:
  // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
  bool has_local_address_family() const;
  void clear_local_address_family() ;
  ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily local_address_family() const;
  void set_local_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily _internal_local_address_family() const;
  void _internal_set_local_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value);

  public:
  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
  bool has_remote_candidate_type() const;
  void clear_remote_candidate_type() ;
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType remote_candidate_type() const;
  void set_remote_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType _internal_remote_candidate_type() const;
  void _internal_set_remote_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value);

  public:
  // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
  bool has_remote_address_family() const;
  void clear_remote_address_family() ;
  ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily remote_address_family() const;
  void set_remote_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily _internal_remote_address_family() const;
  void _internal_set_remote_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value);

  public:
  // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
  bool has_candidate_pair_protocol() const;
  void clear_candidate_pair_protocol() ;
  ::webrtc::rtclog::IceCandidatePairConfig_Protocol candidate_pair_protocol() const;
  void set_candidate_pair_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value);

  private:
  ::webrtc::rtclog::IceCandidatePairConfig_Protocol _internal_candidate_pair_protocol() const;
  void _internal_set_candidate_pair_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.IceCandidatePairConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   8, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const IceCandidatePairConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int config_type_;
    ::uint32_t candidate_pair_id_;
    int local_candidate_type_;
    int local_relay_protocol_;
    int local_network_type_;
    int local_address_family_;
    int remote_candidate_type_;
    int remote_address_family_;
    int candidate_pair_protocol_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<37> IceCandidatePairConfig_class_data_;
// -------------------------------------------------------------------

class EncoderConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.EncoderConfig) */ {
 public:
  inline EncoderConfig() : EncoderConfig(nullptr) {}
  ~EncoderConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EncoderConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EncoderConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EncoderConfig(::google::protobuf::internal::ConstantInitialized);

  inline EncoderConfig(const EncoderConfig& from) : EncoderConfig(nullptr, from) {}
  inline EncoderConfig(EncoderConfig&& from) noexcept
      : EncoderConfig(nullptr, std::move(from)) {}
  inline EncoderConfig& operator=(const EncoderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncoderConfig& operator=(EncoderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EncoderConfig& default_instance() {
    return *reinterpret_cast<const EncoderConfig*>(
        &_EncoderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(EncoderConfig& a, EncoderConfig& b) { a.Swap(&b); }
  inline void Swap(EncoderConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncoderConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncoderConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<EncoderConfig>(arena);
  }
  void CopyFrom(const EncoderConfig& from);
  void MergeFrom(const EncoderConfig& from) { EncoderConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EncoderConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.EncoderConfig"; }

 protected:
  explicit EncoderConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EncoderConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EncoderConfig& from);
  EncoderConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EncoderConfig&& from) noexcept
      : EncoderConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPayloadTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // optional int32 payload_type = 2;
  bool has_payload_type() const;
  void clear_payload_type() ;
  ::int32_t payload_type() const;
  void set_payload_type(::int32_t value);

  private:
  ::int32_t _internal_payload_type() const;
  void _internal_set_payload_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.EncoderConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EncoderConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t payload_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<28> EncoderConfig_class_data_;
// -------------------------------------------------------------------

class DelayBasedBweUpdate final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.DelayBasedBweUpdate) */ {
 public:
  inline DelayBasedBweUpdate() : DelayBasedBweUpdate(nullptr) {}
  ~DelayBasedBweUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DelayBasedBweUpdate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DelayBasedBweUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DelayBasedBweUpdate(::google::protobuf::internal::ConstantInitialized);

  inline DelayBasedBweUpdate(const DelayBasedBweUpdate& from) : DelayBasedBweUpdate(nullptr, from) {}
  inline DelayBasedBweUpdate(DelayBasedBweUpdate&& from) noexcept
      : DelayBasedBweUpdate(nullptr, std::move(from)) {}
  inline DelayBasedBweUpdate& operator=(const DelayBasedBweUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelayBasedBweUpdate& operator=(DelayBasedBweUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DelayBasedBweUpdate& default_instance() {
    return *reinterpret_cast<const DelayBasedBweUpdate*>(
        &_DelayBasedBweUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(DelayBasedBweUpdate& a, DelayBasedBweUpdate& b) { a.Swap(&b); }
  inline void Swap(DelayBasedBweUpdate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelayBasedBweUpdate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelayBasedBweUpdate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<DelayBasedBweUpdate>(arena);
  }
  void CopyFrom(const DelayBasedBweUpdate& from);
  void MergeFrom(const DelayBasedBweUpdate& from) { DelayBasedBweUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DelayBasedBweUpdate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.DelayBasedBweUpdate"; }

 protected:
  explicit DelayBasedBweUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DelayBasedBweUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DelayBasedBweUpdate& from);
  DelayBasedBweUpdate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DelayBasedBweUpdate&& from) noexcept
      : DelayBasedBweUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using DetectorState = DelayBasedBweUpdate_DetectorState;
  static constexpr DetectorState BWE_NORMAL = DelayBasedBweUpdate_DetectorState_BWE_NORMAL;
  static constexpr DetectorState BWE_UNDERUSING = DelayBasedBweUpdate_DetectorState_BWE_UNDERUSING;
  static constexpr DetectorState BWE_OVERUSING = DelayBasedBweUpdate_DetectorState_BWE_OVERUSING;
  static inline bool DetectorState_IsValid(int value) {
    return DelayBasedBweUpdate_DetectorState_IsValid(value);
  }
  static constexpr DetectorState DetectorState_MIN = DelayBasedBweUpdate_DetectorState_DetectorState_MIN;
  static constexpr DetectorState DetectorState_MAX = DelayBasedBweUpdate_DetectorState_DetectorState_MAX;
  static constexpr int DetectorState_ARRAYSIZE = DelayBasedBweUpdate_DetectorState_DetectorState_ARRAYSIZE;
  template <typename T>
  static inline const std::string& DetectorState_Name(T value) {
    return DelayBasedBweUpdate_DetectorState_Name(value);
  }
  static inline bool DetectorState_Parse(
      absl::string_view name, DetectorState* PROTOBUF_NONNULL value) {
    return DelayBasedBweUpdate_DetectorState_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kBitrateBpsFieldNumber = 1,
    kDetectorStateFieldNumber = 2,
  };
  // optional int32 bitrate_bps = 1;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps() ;
  ::int32_t bitrate_bps() const;
  void set_bitrate_bps(::int32_t value);

  private:
  ::int32_t _internal_bitrate_bps() const;
  void _internal_set_bitrate_bps(::int32_t value);

  public:
  // optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
  bool has_detector_state() const;
  void clear_detector_state() ;
  ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState detector_state() const;
  void set_detector_state(::webrtc::rtclog::DelayBasedBweUpdate_DetectorState value);

  private:
  ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState _internal_detector_state() const;
  void _internal_set_detector_state(::webrtc::rtclog::DelayBasedBweUpdate_DetectorState value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.DelayBasedBweUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DelayBasedBweUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t bitrate_bps_;
    int detector_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<34> DelayBasedBweUpdate_class_data_;
// -------------------------------------------------------------------

class DecoderConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.DecoderConfig) */ {
 public:
  inline DecoderConfig() : DecoderConfig(nullptr) {}
  ~DecoderConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecoderConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecoderConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecoderConfig(::google::protobuf::internal::ConstantInitialized);

  inline DecoderConfig(const DecoderConfig& from) : DecoderConfig(nullptr, from) {}
  inline DecoderConfig(DecoderConfig&& from) noexcept
      : DecoderConfig(nullptr, std::move(from)) {}
  inline DecoderConfig& operator=(const DecoderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecoderConfig& operator=(DecoderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DecoderConfig& default_instance() {
    return *reinterpret_cast<const DecoderConfig*>(
        &_DecoderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DecoderConfig& a, DecoderConfig& b) { a.Swap(&b); }
  inline void Swap(DecoderConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecoderConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecoderConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<DecoderConfig>(arena);
  }
  void CopyFrom(const DecoderConfig& from);
  void MergeFrom(const DecoderConfig& from) { DecoderConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecoderConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.DecoderConfig"; }

 protected:
  explicit DecoderConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DecoderConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DecoderConfig& from);
  DecoderConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DecoderConfig&& from) noexcept
      : DecoderConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPayloadTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // optional int32 payload_type = 2;
  bool has_payload_type() const;
  void clear_payload_type() ;
  ::int32_t payload_type() const;
  void set_payload_type(::int32_t value);

  private:
  ::int32_t _internal_payload_type() const;
  void _internal_set_payload_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.DecoderConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DecoderConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t payload_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<28> DecoderConfig_class_data_;
// -------------------------------------------------------------------

class BweProbeResult final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.BweProbeResult) */ {
 public:
  inline BweProbeResult() : BweProbeResult(nullptr) {}
  ~BweProbeResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BweProbeResult* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BweProbeResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BweProbeResult(::google::protobuf::internal::ConstantInitialized);

  inline BweProbeResult(const BweProbeResult& from) : BweProbeResult(nullptr, from) {}
  inline BweProbeResult(BweProbeResult&& from) noexcept
      : BweProbeResult(nullptr, std::move(from)) {}
  inline BweProbeResult& operator=(const BweProbeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BweProbeResult& operator=(BweProbeResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BweProbeResult& default_instance() {
    return *reinterpret_cast<const BweProbeResult*>(
        &_BweProbeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(BweProbeResult& a, BweProbeResult& b) { a.Swap(&b); }
  inline void Swap(BweProbeResult* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BweProbeResult* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BweProbeResult* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<BweProbeResult>(arena);
  }
  void CopyFrom(const BweProbeResult& from);
  void MergeFrom(const BweProbeResult& from) { BweProbeResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BweProbeResult* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.BweProbeResult"; }

 protected:
  explicit BweProbeResult(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  BweProbeResult(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const BweProbeResult& from);
  BweProbeResult(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, BweProbeResult&& from) noexcept
      : BweProbeResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using ResultType = BweProbeResult_ResultType;
  static constexpr ResultType SUCCESS = BweProbeResult_ResultType_SUCCESS;
  static constexpr ResultType INVALID_SEND_RECEIVE_INTERVAL = BweProbeResult_ResultType_INVALID_SEND_RECEIVE_INTERVAL;
  static constexpr ResultType INVALID_SEND_RECEIVE_RATIO = BweProbeResult_ResultType_INVALID_SEND_RECEIVE_RATIO;
  static constexpr ResultType TIMEOUT = BweProbeResult_ResultType_TIMEOUT;
  static inline bool ResultType_IsValid(int value) {
    return BweProbeResult_ResultType_IsValid(value);
  }
  static constexpr ResultType ResultType_MIN = BweProbeResult_ResultType_ResultType_MIN;
  static constexpr ResultType ResultType_MAX = BweProbeResult_ResultType_ResultType_MAX;
  static constexpr int ResultType_ARRAYSIZE = BweProbeResult_ResultType_ResultType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& ResultType_Name(T value) {
    return BweProbeResult_ResultType_Name(value);
  }
  static inline bool ResultType_Parse(
      absl::string_view name, ResultType* PROTOBUF_NONNULL value) {
    return BweProbeResult_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kResultFieldNumber = 2,
    kBitrateBpsFieldNumber = 3,
  };
  // optional int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
  bool has_result() const;
  void clear_result() ;
  ::webrtc::rtclog::BweProbeResult_ResultType result() const;
  void set_result(::webrtc::rtclog::BweProbeResult_ResultType value);

  private:
  ::webrtc::rtclog::BweProbeResult_ResultType _internal_result() const;
  void _internal_set_result(::webrtc::rtclog::BweProbeResult_ResultType value);

  public:
  // optional int32 bitrate_bps = 3;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps() ;
  ::int32_t bitrate_bps() const;
  void set_bitrate_bps(::int32_t value);

  private:
  ::int32_t _internal_bitrate_bps() const;
  void _internal_set_bitrate_bps(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.BweProbeResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const BweProbeResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t id_;
    int result_;
    ::int32_t bitrate_bps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<29> BweProbeResult_class_data_;
// -------------------------------------------------------------------

class BweProbeCluster final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.BweProbeCluster) */ {
 public:
  inline BweProbeCluster() : BweProbeCluster(nullptr) {}
  ~BweProbeCluster() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BweProbeCluster* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BweProbeCluster));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BweProbeCluster(::google::protobuf::internal::ConstantInitialized);

  inline BweProbeCluster(const BweProbeCluster& from) : BweProbeCluster(nullptr, from) {}
  inline BweProbeCluster(BweProbeCluster&& from) noexcept
      : BweProbeCluster(nullptr, std::move(from)) {}
  inline BweProbeCluster& operator=(const BweProbeCluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline BweProbeCluster& operator=(BweProbeCluster&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BweProbeCluster& default_instance() {
    return *reinterpret_cast<const BweProbeCluster*>(
        &_BweProbeCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(BweProbeCluster& a, BweProbeCluster& b) { a.Swap(&b); }
  inline void Swap(BweProbeCluster* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BweProbeCluster* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BweProbeCluster* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<BweProbeCluster>(arena);
  }
  void CopyFrom(const BweProbeCluster& from);
  void MergeFrom(const BweProbeCluster& from) { BweProbeCluster::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BweProbeCluster* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.BweProbeCluster"; }

 protected:
  explicit BweProbeCluster(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  BweProbeCluster(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const BweProbeCluster& from);
  BweProbeCluster(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, BweProbeCluster&& from) noexcept
      : BweProbeCluster(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kBitrateBpsFieldNumber = 2,
    kMinPacketsFieldNumber = 3,
    kMinBytesFieldNumber = 4,
  };
  // optional int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps() ;
  ::int32_t bitrate_bps() const;
  void set_bitrate_bps(::int32_t value);

  private:
  ::int32_t _internal_bitrate_bps() const;
  void _internal_set_bitrate_bps(::int32_t value);

  public:
  // optional uint32 min_packets = 3;
  bool has_min_packets() const;
  void clear_min_packets() ;
  ::uint32_t min_packets() const;
  void set_min_packets(::uint32_t value);

  private:
  ::uint32_t _internal_min_packets() const;
  void _internal_set_min_packets(::uint32_t value);

  public:
  // optional uint32 min_bytes = 4;
  bool has_min_bytes() const;
  void clear_min_bytes() ;
  ::uint32_t min_bytes() const;
  void set_min_bytes(::uint32_t value);

  private:
  ::uint32_t _internal_min_bytes() const;
  void _internal_set_min_bytes(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.BweProbeCluster)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const BweProbeCluster& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t id_;
    ::int32_t bitrate_bps_;
    ::uint32_t min_packets_;
    ::uint32_t min_bytes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<30> BweProbeCluster_class_data_;
// -------------------------------------------------------------------

class AudioPlayoutEvent final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioPlayoutEvent) */ {
 public:
  inline AudioPlayoutEvent() : AudioPlayoutEvent(nullptr) {}
  ~AudioPlayoutEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioPlayoutEvent* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioPlayoutEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioPlayoutEvent(::google::protobuf::internal::ConstantInitialized);

  inline AudioPlayoutEvent(const AudioPlayoutEvent& from) : AudioPlayoutEvent(nullptr, from) {}
  inline AudioPlayoutEvent(AudioPlayoutEvent&& from) noexcept
      : AudioPlayoutEvent(nullptr, std::move(from)) {}
  inline AudioPlayoutEvent& operator=(const AudioPlayoutEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioPlayoutEvent& operator=(AudioPlayoutEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AudioPlayoutEvent& default_instance() {
    return *reinterpret_cast<const AudioPlayoutEvent*>(
        &_AudioPlayoutEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AudioPlayoutEvent& a, AudioPlayoutEvent& b) { a.Swap(&b); }
  inline void Swap(AudioPlayoutEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioPlayoutEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioPlayoutEvent* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<AudioPlayoutEvent>(arena);
  }
  void CopyFrom(const AudioPlayoutEvent& from);
  void MergeFrom(const AudioPlayoutEvent& from) { AudioPlayoutEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioPlayoutEvent* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.AudioPlayoutEvent"; }

 protected:
  explicit AudioPlayoutEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioPlayoutEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioPlayoutEvent& from);
  AudioPlayoutEvent(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioPlayoutEvent&& from) noexcept
      : AudioPlayoutEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocalSsrcFieldNumber = 2,
  };
  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc() ;
  ::uint32_t local_ssrc() const;
  void set_local_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_local_ssrc() const;
  void _internal_set_local_ssrc(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioPlayoutEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioPlayoutEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t local_ssrc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<32> AudioPlayoutEvent_class_data_;
// -------------------------------------------------------------------

class AudioNetworkAdaptation final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioNetworkAdaptation) */ {
 public:
  inline AudioNetworkAdaptation() : AudioNetworkAdaptation(nullptr) {}
  ~AudioNetworkAdaptation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioNetworkAdaptation* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioNetworkAdaptation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioNetworkAdaptation(::google::protobuf::internal::ConstantInitialized);

  inline AudioNetworkAdaptation(const AudioNetworkAdaptation& from) : AudioNetworkAdaptation(nullptr, from) {}
  inline AudioNetworkAdaptation(AudioNetworkAdaptation&& from) noexcept
      : AudioNetworkAdaptation(nullptr, std::move(from)) {}
  inline AudioNetworkAdaptation& operator=(const AudioNetworkAdaptation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioNetworkAdaptation& operator=(AudioNetworkAdaptation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AudioNetworkAdaptation& default_instance() {
    return *reinterpret_cast<const AudioNetworkAdaptation*>(
        &_AudioNetworkAdaptation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(AudioNetworkAdaptation& a, AudioNetworkAdaptation& b) { a.Swap(&b); }
  inline void Swap(AudioNetworkAdaptation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioNetworkAdaptation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioNetworkAdaptation* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<AudioNetworkAdaptation>(arena);
  }
  void CopyFrom(const AudioNetworkAdaptation& from);
  void MergeFrom(const AudioNetworkAdaptation& from) { AudioNetworkAdaptation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioNetworkAdaptation* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.AudioNetworkAdaptation"; }

 protected:
  explicit AudioNetworkAdaptation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioNetworkAdaptation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioNetworkAdaptation& from);
  AudioNetworkAdaptation(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioNetworkAdaptation&& from) noexcept
      : AudioNetworkAdaptation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBitrateBpsFieldNumber = 1,
    kFrameLengthMsFieldNumber = 2,
    kUplinkPacketLossFractionFieldNumber = 3,
    kEnableFecFieldNumber = 4,
    kEnableDtxFieldNumber = 5,
    kNumChannelsFieldNumber = 6,
  };
  // optional int32 bitrate_bps = 1;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps() ;
  ::int32_t bitrate_bps() const;
  void set_bitrate_bps(::int32_t value);

  private:
  ::int32_t _internal_bitrate_bps() const;
  void _internal_set_bitrate_bps(::int32_t value);

  public:
  // optional int32 frame_length_ms = 2;
  bool has_frame_length_ms() const;
  void clear_frame_length_ms() ;
  ::int32_t frame_length_ms() const;
  void set_frame_length_ms(::int32_t value);

  private:
  ::int32_t _internal_frame_length_ms() const;
  void _internal_set_frame_length_ms(::int32_t value);

  public:
  // optional float uplink_packet_loss_fraction = 3;
  bool has_uplink_packet_loss_fraction() const;
  void clear_uplink_packet_loss_fraction() ;
  float uplink_packet_loss_fraction() const;
  void set_uplink_packet_loss_fraction(float value);

  private:
  float _internal_uplink_packet_loss_fraction() const;
  void _internal_set_uplink_packet_loss_fraction(float value);

  public:
  // optional bool enable_fec = 4;
  bool has_enable_fec() const;
  void clear_enable_fec() ;
  bool enable_fec() const;
  void set_enable_fec(bool value);

  private:
  bool _internal_enable_fec() const;
  void _internal_set_enable_fec(bool value);

  public:
  // optional bool enable_dtx = 5;
  bool has_enable_dtx() const;
  void clear_enable_dtx() ;
  bool enable_dtx() const;
  void set_enable_dtx(bool value);

  private:
  bool _internal_enable_dtx() const;
  void _internal_set_enable_dtx(bool value);

  public:
  // optional uint32 num_channels = 6;
  bool has_num_channels() const;
  void clear_num_channels() ;
  ::uint32_t num_channels() const;
  void set_num_channels(::uint32_t value);

  private:
  ::uint32_t _internal_num_channels() const;
  void _internal_set_num_channels(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioNetworkAdaptation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioNetworkAdaptation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t bitrate_bps_;
    ::int32_t frame_length_ms_;
    float uplink_packet_loss_fraction_;
    bool enable_fec_;
    bool enable_dtx_;
    ::uint32_t num_channels_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<37> AudioNetworkAdaptation_class_data_;
// -------------------------------------------------------------------

class AlrState final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.AlrState) */ {
 public:
  inline AlrState() : AlrState(nullptr) {}
  ~AlrState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AlrState* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AlrState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AlrState(::google::protobuf::internal::ConstantInitialized);

  inline AlrState(const AlrState& from) : AlrState(nullptr, from) {}
  inline AlrState(AlrState&& from) noexcept
      : AlrState(nullptr, std::move(from)) {}
  inline AlrState& operator=(const AlrState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlrState& operator=(AlrState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AlrState& default_instance() {
    return *reinterpret_cast<const AlrState*>(
        &_AlrState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(AlrState& a, AlrState& b) { a.Swap(&b); }
  inline void Swap(AlrState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlrState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlrState* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<AlrState>(arena);
  }
  void CopyFrom(const AlrState& from);
  void MergeFrom(const AlrState& from) { AlrState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AlrState* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.AlrState"; }

 protected:
  explicit AlrState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AlrState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AlrState& from);
  AlrState(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AlrState&& from) noexcept
      : AlrState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInAlrFieldNumber = 1,
  };
  // optional bool in_alr = 1;
  bool has_in_alr() const;
  void clear_in_alr() ;
  bool in_alr() const;
  void set_in_alr(bool value);

  private:
  bool _internal_in_alr() const;
  void _internal_set_in_alr(bool value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AlrState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AlrState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    bool in_alr_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<23> AlrState_class_data_;
// -------------------------------------------------------------------

class VideoSendConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.VideoSendConfig) */ {
 public:
  inline VideoSendConfig() : VideoSendConfig(nullptr) {}
  ~VideoSendConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VideoSendConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VideoSendConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoSendConfig(::google::protobuf::internal::ConstantInitialized);

  inline VideoSendConfig(const VideoSendConfig& from) : VideoSendConfig(nullptr, from) {}
  inline VideoSendConfig(VideoSendConfig&& from) noexcept
      : VideoSendConfig(nullptr, std::move(from)) {}
  inline VideoSendConfig& operator=(const VideoSendConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSendConfig& operator=(VideoSendConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSendConfig& default_instance() {
    return *reinterpret_cast<const VideoSendConfig*>(
        &_VideoSendConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(VideoSendConfig& a, VideoSendConfig& b) { a.Swap(&b); }
  inline void Swap(VideoSendConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSendConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSendConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<VideoSendConfig>(arena);
  }
  void CopyFrom(const VideoSendConfig& from);
  void MergeFrom(const VideoSendConfig& from) { VideoSendConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VideoSendConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.VideoSendConfig"; }

 protected:
  explicit VideoSendConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  VideoSendConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VideoSendConfig& from);
  VideoSendConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, VideoSendConfig&& from) noexcept
      : VideoSendConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSsrcsFieldNumber = 1,
    kHeaderExtensionsFieldNumber = 2,
    kRtxSsrcsFieldNumber = 3,
    kEncoderFieldNumber = 5,
    kRtxPayloadTypeFieldNumber = 4,
  };
  // repeated uint32 ssrcs = 1;
  int ssrcs_size() const;
  private:
  int _internal_ssrcs_size() const;

  public:
  void clear_ssrcs() ;
  ::uint32_t ssrcs(int index) const;
  void set_ssrcs(int index, ::uint32_t value);
  void add_ssrcs(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& ssrcs() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL mutable_ssrcs();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_ssrcs() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL _internal_mutable_ssrcs();

  public:
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  int header_extensions_size() const;
  private:
  int _internal_header_extensions_size() const;

  public:
  void clear_header_extensions() ;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL mutable_header_extensions();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& _internal_header_extensions() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL _internal_mutable_header_extensions();
  public:
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL add_header_extensions();
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& header_extensions() const;
  // repeated uint32 rtx_ssrcs = 3;
  int rtx_ssrcs_size() const;
  private:
  int _internal_rtx_ssrcs_size() const;

  public:
  void clear_rtx_ssrcs() ;
  ::uint32_t rtx_ssrcs(int index) const;
  void set_rtx_ssrcs(int index, ::uint32_t value);
  void add_rtx_ssrcs(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& rtx_ssrcs() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL mutable_rtx_ssrcs();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_rtx_ssrcs() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL _internal_mutable_rtx_ssrcs();

  public:
  // optional .webrtc.rtclog.EncoderConfig encoder = 5;
  bool has_encoder() const;
  void clear_encoder() ;
  const ::webrtc::rtclog::EncoderConfig& encoder() const;
  [[nodiscard]] ::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE release_encoder();
  ::webrtc::rtclog::EncoderConfig* PROTOBUF_NONNULL mutable_encoder();
  void set_allocated_encoder(::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_encoder(::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE unsafe_arena_release_encoder();

  private:
  const ::webrtc::rtclog::EncoderConfig& _internal_encoder() const;
  ::webrtc::rtclog::EncoderConfig* PROTOBUF_NONNULL _internal_mutable_encoder();

  public:
  // optional int32 rtx_payload_type = 4;
  bool has_rtx_payload_type() const;
  void clear_rtx_payload_type() ;
  ::int32_t rtx_payload_type() const;
  void set_rtx_payload_type(::int32_t value);

  private:
  ::int32_t _internal_rtx_payload_type() const;
  void _internal_set_rtx_payload_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.VideoSendConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const VideoSendConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> ssrcs_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
    ::google::protobuf::RepeatedField<::uint32_t> rtx_ssrcs_;
    ::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE encoder_;
    ::int32_t rtx_payload_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<30> VideoSendConfig_class_data_;
// -------------------------------------------------------------------

class RtxMap final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtxMap) */ {
 public:
  inline RtxMap() : RtxMap(nullptr) {}
  ~RtxMap() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RtxMap* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RtxMap));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RtxMap(::google::protobuf::internal::ConstantInitialized);

  inline RtxMap(const RtxMap& from) : RtxMap(nullptr, from) {}
  inline RtxMap(RtxMap&& from) noexcept
      : RtxMap(nullptr, std::move(from)) {}
  inline RtxMap& operator=(const RtxMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtxMap& operator=(RtxMap&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RtxMap& default_instance() {
    return *reinterpret_cast<const RtxMap*>(
        &_RtxMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(RtxMap& a, RtxMap& b) { a.Swap(&b); }
  inline void Swap(RtxMap* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtxMap* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtxMap* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<RtxMap>(arena);
  }
  void CopyFrom(const RtxMap& from);
  void MergeFrom(const RtxMap& from) { RtxMap::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RtxMap* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.RtxMap"; }

 protected:
  explicit RtxMap(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RtxMap(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RtxMap& from);
  RtxMap(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RtxMap&& from) noexcept
      : RtxMap(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 2,
    kPayloadTypeFieldNumber = 1,
  };
  // optional .webrtc.rtclog.RtxConfig config = 2;
  bool has_config() const;
  void clear_config() ;
  const ::webrtc::rtclog::RtxConfig& config() const;
  [[nodiscard]] ::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE release_config();
  ::webrtc::rtclog::RtxConfig* PROTOBUF_NONNULL mutable_config();
  void set_allocated_config(::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_config(::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE unsafe_arena_release_config();

  private:
  const ::webrtc::rtclog::RtxConfig& _internal_config() const;
  ::webrtc::rtclog::RtxConfig* PROTOBUF_NONNULL _internal_mutable_config();

  public:
  // optional int32 payload_type = 1;
  bool has_payload_type() const;
  void clear_payload_type() ;
  ::int32_t payload_type() const;
  void set_payload_type(::int32_t value);

  private:
  ::int32_t _internal_payload_type() const;
  void _internal_set_payload_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtxMap)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RtxMap& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE config_;
    ::int32_t payload_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<21> RtxMap_class_data_;
// -------------------------------------------------------------------

class AudioSendConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioSendConfig) */ {
 public:
  inline AudioSendConfig() : AudioSendConfig(nullptr) {}
  ~AudioSendConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioSendConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioSendConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioSendConfig(::google::protobuf::internal::ConstantInitialized);

  inline AudioSendConfig(const AudioSendConfig& from) : AudioSendConfig(nullptr, from) {}
  inline AudioSendConfig(AudioSendConfig&& from) noexcept
      : AudioSendConfig(nullptr, std::move(from)) {}
  inline AudioSendConfig& operator=(const AudioSendConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSendConfig& operator=(AudioSendConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AudioSendConfig& default_instance() {
    return *reinterpret_cast<const AudioSendConfig*>(
        &_AudioSendConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(AudioSendConfig& a, AudioSendConfig& b) { a.Swap(&b); }
  inline void Swap(AudioSendConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioSendConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioSendConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<AudioSendConfig>(arena);
  }
  void CopyFrom(const AudioSendConfig& from);
  void MergeFrom(const AudioSendConfig& from) { AudioSendConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioSendConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.AudioSendConfig"; }

 protected:
  explicit AudioSendConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioSendConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioSendConfig& from);
  AudioSendConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioSendConfig&& from) noexcept
      : AudioSendConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderExtensionsFieldNumber = 2,
    kSsrcFieldNumber = 1,
  };
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  int header_extensions_size() const;
  private:
  int _internal_header_extensions_size() const;

  public:
  void clear_header_extensions() ;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL mutable_header_extensions();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& _internal_header_extensions() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL _internal_mutable_header_extensions();
  public:
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL add_header_extensions();
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& header_extensions() const;
  // optional uint32 ssrc = 1;
  bool has_ssrc() const;
  void clear_ssrc() ;
  ::uint32_t ssrc() const;
  void set_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_ssrc() const;
  void _internal_set_ssrc(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioSendConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioSendConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
    ::uint32_t ssrc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<30> AudioSendConfig_class_data_;
// -------------------------------------------------------------------

class AudioReceiveConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioReceiveConfig) */ {
 public:
  inline AudioReceiveConfig() : AudioReceiveConfig(nullptr) {}
  ~AudioReceiveConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioReceiveConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioReceiveConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioReceiveConfig(::google::protobuf::internal::ConstantInitialized);

  inline AudioReceiveConfig(const AudioReceiveConfig& from) : AudioReceiveConfig(nullptr, from) {}
  inline AudioReceiveConfig(AudioReceiveConfig&& from) noexcept
      : AudioReceiveConfig(nullptr, std::move(from)) {}
  inline AudioReceiveConfig& operator=(const AudioReceiveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioReceiveConfig& operator=(AudioReceiveConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AudioReceiveConfig& default_instance() {
    return *reinterpret_cast<const AudioReceiveConfig*>(
        &_AudioReceiveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(AudioReceiveConfig& a, AudioReceiveConfig& b) { a.Swap(&b); }
  inline void Swap(AudioReceiveConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioReceiveConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioReceiveConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<AudioReceiveConfig>(arena);
  }
  void CopyFrom(const AudioReceiveConfig& from);
  void MergeFrom(const AudioReceiveConfig& from) { AudioReceiveConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioReceiveConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.AudioReceiveConfig"; }

 protected:
  explicit AudioReceiveConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AudioReceiveConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AudioReceiveConfig& from);
  AudioReceiveConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AudioReceiveConfig&& from) noexcept
      : AudioReceiveConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderExtensionsFieldNumber = 3,
    kRemoteSsrcFieldNumber = 1,
    kLocalSsrcFieldNumber = 2,
  };
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
  int header_extensions_size() const;
  private:
  int _internal_header_extensions_size() const;

  public:
  void clear_header_extensions() ;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL mutable_header_extensions();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& _internal_header_extensions() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL _internal_mutable_header_extensions();
  public:
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL add_header_extensions();
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& header_extensions() const;
  // optional uint32 remote_ssrc = 1;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc() ;
  ::uint32_t remote_ssrc() const;
  void set_remote_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_remote_ssrc() const;
  void _internal_set_remote_ssrc(::uint32_t value);

  public:
  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc() ;
  ::uint32_t local_ssrc() const;
  void set_local_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_local_ssrc() const;
  void _internal_set_local_ssrc(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioReceiveConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AudioReceiveConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
    ::uint32_t remote_ssrc_;
    ::uint32_t local_ssrc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<33> AudioReceiveConfig_class_data_;
// -------------------------------------------------------------------

class VideoReceiveConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.VideoReceiveConfig) */ {
 public:
  inline VideoReceiveConfig() : VideoReceiveConfig(nullptr) {}
  ~VideoReceiveConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VideoReceiveConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VideoReceiveConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoReceiveConfig(::google::protobuf::internal::ConstantInitialized);

  inline VideoReceiveConfig(const VideoReceiveConfig& from) : VideoReceiveConfig(nullptr, from) {}
  inline VideoReceiveConfig(VideoReceiveConfig&& from) noexcept
      : VideoReceiveConfig(nullptr, std::move(from)) {}
  inline VideoReceiveConfig& operator=(const VideoReceiveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoReceiveConfig& operator=(VideoReceiveConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoReceiveConfig& default_instance() {
    return *reinterpret_cast<const VideoReceiveConfig*>(
        &_VideoReceiveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(VideoReceiveConfig& a, VideoReceiveConfig& b) { a.Swap(&b); }
  inline void Swap(VideoReceiveConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoReceiveConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoReceiveConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<VideoReceiveConfig>(arena);
  }
  void CopyFrom(const VideoReceiveConfig& from);
  void MergeFrom(const VideoReceiveConfig& from) { VideoReceiveConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VideoReceiveConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.VideoReceiveConfig"; }

 protected:
  explicit VideoReceiveConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  VideoReceiveConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VideoReceiveConfig& from);
  VideoReceiveConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, VideoReceiveConfig&& from) noexcept
      : VideoReceiveConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using RtcpMode = VideoReceiveConfig_RtcpMode;
  static constexpr RtcpMode RTCP_COMPOUND = VideoReceiveConfig_RtcpMode_RTCP_COMPOUND;
  static constexpr RtcpMode RTCP_REDUCEDSIZE = VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE;
  static inline bool RtcpMode_IsValid(int value) {
    return VideoReceiveConfig_RtcpMode_IsValid(value);
  }
  static constexpr RtcpMode RtcpMode_MIN = VideoReceiveConfig_RtcpMode_RtcpMode_MIN;
  static constexpr RtcpMode RtcpMode_MAX = VideoReceiveConfig_RtcpMode_RtcpMode_MAX;
  static constexpr int RtcpMode_ARRAYSIZE = VideoReceiveConfig_RtcpMode_RtcpMode_ARRAYSIZE;
  template <typename T>
  static inline const std::string& RtcpMode_Name(T value) {
    return VideoReceiveConfig_RtcpMode_Name(value);
  }
  static inline bool RtcpMode_Parse(
      absl::string_view name, RtcpMode* PROTOBUF_NONNULL value) {
    return VideoReceiveConfig_RtcpMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRtxMapFieldNumber = 5,
    kHeaderExtensionsFieldNumber = 6,
    kDecodersFieldNumber = 7,
    kRemoteSsrcFieldNumber = 1,
    kLocalSsrcFieldNumber = 2,
    kRembFieldNumber = 4,
    kRtcpModeFieldNumber = 3,
  };
  // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
  int rtx_map_size() const;
  private:
  int _internal_rtx_map_size() const;

  public:
  void clear_rtx_map() ;
  ::webrtc::rtclog::RtxMap* PROTOBUF_NONNULL mutable_rtx_map(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>* PROTOBUF_NONNULL mutable_rtx_map();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>& _internal_rtx_map() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>* PROTOBUF_NONNULL _internal_mutable_rtx_map();
  public:
  const ::webrtc::rtclog::RtxMap& rtx_map(int index) const;
  ::webrtc::rtclog::RtxMap* PROTOBUF_NONNULL add_rtx_map();
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>& rtx_map() const;
  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
  int header_extensions_size() const;
  private:
  int _internal_header_extensions_size() const;

  public:
  void clear_header_extensions() ;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL mutable_header_extensions();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& _internal_header_extensions() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL _internal_mutable_header_extensions();
  public:
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL add_header_extensions();
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& header_extensions() const;
  // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
  int decoders_size() const;
  private:
  int _internal_decoders_size() const;

  public:
  void clear_decoders() ;
  ::webrtc::rtclog::DecoderConfig* PROTOBUF_NONNULL mutable_decoders(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>* PROTOBUF_NONNULL mutable_decoders();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>& _internal_decoders() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>* PROTOBUF_NONNULL _internal_mutable_decoders();
  public:
  const ::webrtc::rtclog::DecoderConfig& decoders(int index) const;
  ::webrtc::rtclog::DecoderConfig* PROTOBUF_NONNULL add_decoders();
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>& decoders() const;
  // optional uint32 remote_ssrc = 1;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc() ;
  ::uint32_t remote_ssrc() const;
  void set_remote_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_remote_ssrc() const;
  void _internal_set_remote_ssrc(::uint32_t value);

  public:
  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc() ;
  ::uint32_t local_ssrc() const;
  void set_local_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_local_ssrc() const;
  void _internal_set_local_ssrc(::uint32_t value);

  public:
  // optional bool remb = 4;
  bool has_remb() const;
  void clear_remb() ;
  bool remb() const;
  void set_remb(bool value);

  private:
  bool _internal_remb() const;
  void _internal_set_remb(bool value);

  public:
  // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
  bool has_rtcp_mode() const;
  void clear_rtcp_mode() ;
  ::webrtc::rtclog::VideoReceiveConfig_RtcpMode rtcp_mode() const;
  void set_rtcp_mode(::webrtc::rtclog::VideoReceiveConfig_RtcpMode value);

  private:
  ::webrtc::rtclog::VideoReceiveConfig_RtcpMode _internal_rtcp_mode() const;
  void _internal_set_rtcp_mode(::webrtc::rtclog::VideoReceiveConfig_RtcpMode value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.VideoReceiveConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   4, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const VideoReceiveConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtxMap > rtx_map_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::DecoderConfig > decoders_;
    ::uint32_t remote_ssrc_;
    ::uint32_t local_ssrc_;
    bool remb_;
    int rtcp_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<33> VideoReceiveConfig_class_data_;
// -------------------------------------------------------------------

class Event final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Event* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Event));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Event& default_instance() {
    return *reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  enum SubtypeCase {
    kRtpPacket = 3,
    kRtcpPacket = 4,
    kAudioPlayoutEvent = 5,
    kLossBasedBweUpdate = 6,
    kDelayBasedBweUpdate = 7,
    kVideoReceiverConfig = 8,
    kVideoSenderConfig = 9,
    kAudioReceiverConfig = 10,
    kAudioSenderConfig = 11,
    kAudioNetworkAdaptation = 16,
    kProbeCluster = 17,
    kProbeResult = 18,
    kAlrState = 19,
    kIceCandidatePairConfig = 20,
    kIceCandidatePairEvent = 21,
    kRemoteEstimate = 22,
    SUBTYPE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Event>(arena);
  }
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Event* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Event(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Event& from);
  Event(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using EventType = Event_EventType;
  static constexpr EventType UNKNOWN_EVENT = Event_EventType_UNKNOWN_EVENT;
  static constexpr EventType LOG_START = Event_EventType_LOG_START;
  static constexpr EventType LOG_END = Event_EventType_LOG_END;
  static constexpr EventType RTP_EVENT = Event_EventType_RTP_EVENT;
  static constexpr EventType RTCP_EVENT = Event_EventType_RTCP_EVENT;
  static constexpr EventType AUDIO_PLAYOUT_EVENT = Event_EventType_AUDIO_PLAYOUT_EVENT;
  static constexpr EventType LOSS_BASED_BWE_UPDATE = Event_EventType_LOSS_BASED_BWE_UPDATE;
  static constexpr EventType DELAY_BASED_BWE_UPDATE = Event_EventType_DELAY_BASED_BWE_UPDATE;
  static constexpr EventType VIDEO_RECEIVER_CONFIG_EVENT = Event_EventType_VIDEO_RECEIVER_CONFIG_EVENT;
  static constexpr EventType VIDEO_SENDER_CONFIG_EVENT = Event_EventType_VIDEO_SENDER_CONFIG_EVENT;
  static constexpr EventType AUDIO_RECEIVER_CONFIG_EVENT = Event_EventType_AUDIO_RECEIVER_CONFIG_EVENT;
  static constexpr EventType AUDIO_SENDER_CONFIG_EVENT = Event_EventType_AUDIO_SENDER_CONFIG_EVENT;
  static constexpr EventType AUDIO_NETWORK_ADAPTATION_EVENT = Event_EventType_AUDIO_NETWORK_ADAPTATION_EVENT;
  static constexpr EventType BWE_PROBE_CLUSTER_CREATED_EVENT = Event_EventType_BWE_PROBE_CLUSTER_CREATED_EVENT;
  static constexpr EventType BWE_PROBE_RESULT_EVENT = Event_EventType_BWE_PROBE_RESULT_EVENT;
  static constexpr EventType ALR_STATE_EVENT = Event_EventType_ALR_STATE_EVENT;
  static constexpr EventType ICE_CANDIDATE_PAIR_CONFIG = Event_EventType_ICE_CANDIDATE_PAIR_CONFIG;
  static constexpr EventType ICE_CANDIDATE_PAIR_EVENT = Event_EventType_ICE_CANDIDATE_PAIR_EVENT;
  static constexpr EventType REMOTE_ESTIMATE = Event_EventType_REMOTE_ESTIMATE;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN = Event_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX = Event_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE = Event_EventType_EventType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& EventType_Name(T value) {
    return Event_EventType_Name(value);
  }
  static inline bool EventType_Parse(
      absl::string_view name, EventType* PROTOBUF_NONNULL value) {
    return Event_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampUsFieldNumber = 1,
    kTypeFieldNumber = 2,
    kRtpPacketFieldNumber = 3,
    kRtcpPacketFieldNumber = 4,
    kAudioPlayoutEventFieldNumber = 5,
    kLossBasedBweUpdateFieldNumber = 6,
    kDelayBasedBweUpdateFieldNumber = 7,
    kVideoReceiverConfigFieldNumber = 8,
    kVideoSenderConfigFieldNumber = 9,
    kAudioReceiverConfigFieldNumber = 10,
    kAudioSenderConfigFieldNumber = 11,
    kAudioNetworkAdaptationFieldNumber = 16,
    kProbeClusterFieldNumber = 17,
    kProbeResultFieldNumber = 18,
    kAlrStateFieldNumber = 19,
    kIceCandidatePairConfigFieldNumber = 20,
    kIceCandidatePairEventFieldNumber = 21,
    kRemoteEstimateFieldNumber = 22,
  };
  // optional int64 timestamp_us = 1;
  bool has_timestamp_us() const;
  void clear_timestamp_us() ;
  ::int64_t timestamp_us() const;
  void set_timestamp_us(::int64_t value);

  private:
  ::int64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::int64_t value);

  public:
  // optional .webrtc.rtclog.Event.EventType type = 2;
  bool has_type() const;
  void clear_type() ;
  ::webrtc::rtclog::Event_EventType type() const;
  void set_type(::webrtc::rtclog::Event_EventType value);

  private:
  ::webrtc::rtclog::Event_EventType _internal_type() const;
  void _internal_set_type(::webrtc::rtclog::Event_EventType value);

  public:
  // .webrtc.rtclog.RtpPacket rtp_packet = 3;
  bool has_rtp_packet() const;
  private:
  bool _internal_has_rtp_packet() const;

  public:
  void clear_rtp_packet() ;
  const ::webrtc::rtclog::RtpPacket& rtp_packet() const;
  [[nodiscard]] ::webrtc::rtclog::RtpPacket* PROTOBUF_NULLABLE release_rtp_packet();
  ::webrtc::rtclog::RtpPacket* PROTOBUF_NONNULL mutable_rtp_packet();
  void set_allocated_rtp_packet(::webrtc::rtclog::RtpPacket* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rtp_packet(::webrtc::rtclog::RtpPacket* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::RtpPacket* PROTOBUF_NULLABLE unsafe_arena_release_rtp_packet();

  private:
  const ::webrtc::rtclog::RtpPacket& _internal_rtp_packet() const;
  ::webrtc::rtclog::RtpPacket* PROTOBUF_NONNULL _internal_mutable_rtp_packet();

  public:
  // .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
  bool has_rtcp_packet() const;
  private:
  bool _internal_has_rtcp_packet() const;

  public:
  void clear_rtcp_packet() ;
  const ::webrtc::rtclog::RtcpPacket& rtcp_packet() const;
  [[nodiscard]] ::webrtc::rtclog::RtcpPacket* PROTOBUF_NULLABLE release_rtcp_packet();
  ::webrtc::rtclog::RtcpPacket* PROTOBUF_NONNULL mutable_rtcp_packet();
  void set_allocated_rtcp_packet(::webrtc::rtclog::RtcpPacket* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rtcp_packet(::webrtc::rtclog::RtcpPacket* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::RtcpPacket* PROTOBUF_NULLABLE unsafe_arena_release_rtcp_packet();

  private:
  const ::webrtc::rtclog::RtcpPacket& _internal_rtcp_packet() const;
  ::webrtc::rtclog::RtcpPacket* PROTOBUF_NONNULL _internal_mutable_rtcp_packet();

  public:
  // .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
  bool has_audio_playout_event() const;
  private:
  bool _internal_has_audio_playout_event() const;

  public:
  void clear_audio_playout_event() ;
  const ::webrtc::rtclog::AudioPlayoutEvent& audio_playout_event() const;
  [[nodiscard]] ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NULLABLE release_audio_playout_event();
  ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NONNULL mutable_audio_playout_event();
  void set_allocated_audio_playout_event(::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio_playout_event(::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NULLABLE unsafe_arena_release_audio_playout_event();

  private:
  const ::webrtc::rtclog::AudioPlayoutEvent& _internal_audio_playout_event() const;
  ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NONNULL _internal_mutable_audio_playout_event();

  public:
  // .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
  bool has_loss_based_bwe_update() const;
  private:
  bool _internal_has_loss_based_bwe_update() const;

  public:
  void clear_loss_based_bwe_update() ;
  const ::webrtc::rtclog::LossBasedBweUpdate& loss_based_bwe_update() const;
  [[nodiscard]] ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NULLABLE release_loss_based_bwe_update();
  ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NONNULL mutable_loss_based_bwe_update();
  void set_allocated_loss_based_bwe_update(::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_loss_based_bwe_update(::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NULLABLE unsafe_arena_release_loss_based_bwe_update();

  private:
  const ::webrtc::rtclog::LossBasedBweUpdate& _internal_loss_based_bwe_update() const;
  ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NONNULL _internal_mutable_loss_based_bwe_update();

  public:
  // .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
  bool has_delay_based_bwe_update() const;
  private:
  bool _internal_has_delay_based_bwe_update() const;

  public:
  void clear_delay_based_bwe_update() ;
  const ::webrtc::rtclog::DelayBasedBweUpdate& delay_based_bwe_update() const;
  [[nodiscard]] ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NULLABLE release_delay_based_bwe_update();
  ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NONNULL mutable_delay_based_bwe_update();
  void set_allocated_delay_based_bwe_update(::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_delay_based_bwe_update(::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NULLABLE unsafe_arena_release_delay_based_bwe_update();

  private:
  const ::webrtc::rtclog::DelayBasedBweUpdate& _internal_delay_based_bwe_update() const;
  ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NONNULL _internal_mutable_delay_based_bwe_update();

  public:
  // .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
  bool has_video_receiver_config() const;
  private:
  bool _internal_has_video_receiver_config() const;

  public:
  void clear_video_receiver_config() ;
  const ::webrtc::rtclog::VideoReceiveConfig& video_receiver_config() const;
  [[nodiscard]] ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NULLABLE release_video_receiver_config();
  ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NONNULL mutable_video_receiver_config();
  void set_allocated_video_receiver_config(::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_video_receiver_config(::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NULLABLE unsafe_arena_release_video_receiver_config();

  private:
  const ::webrtc::rtclog::VideoReceiveConfig& _internal_video_receiver_config() const;
  ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NONNULL _internal_mutable_video_receiver_config();

  public:
  // .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
  bool has_video_sender_config() const;
  private:
  bool _internal_has_video_sender_config() const;

  public:
  void clear_video_sender_config() ;
  const ::webrtc::rtclog::VideoSendConfig& video_sender_config() const;
  [[nodiscard]] ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NULLABLE release_video_sender_config();
  ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NONNULL mutable_video_sender_config();
  void set_allocated_video_sender_config(::webrtc::rtclog::VideoSendConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_video_sender_config(::webrtc::rtclog::VideoSendConfig* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NULLABLE unsafe_arena_release_video_sender_config();

  private:
  const ::webrtc::rtclog::VideoSendConfig& _internal_video_sender_config() const;
  ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NONNULL _internal_mutable_video_sender_config();

  public:
  // .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
  bool has_audio_receiver_config() const;
  private:
  bool _internal_has_audio_receiver_config() const;

  public:
  void clear_audio_receiver_config() ;
  const ::webrtc::rtclog::AudioReceiveConfig& audio_receiver_config() const;
  [[nodiscard]] ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NULLABLE release_audio_receiver_config();
  ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NONNULL mutable_audio_receiver_config();
  void set_allocated_audio_receiver_config(::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio_receiver_config(::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NULLABLE unsafe_arena_release_audio_receiver_config();

  private:
  const ::webrtc::rtclog::AudioReceiveConfig& _internal_audio_receiver_config() const;
  ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NONNULL _internal_mutable_audio_receiver_config();

  public:
  // .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
  bool has_audio_sender_config() const;
  private:
  bool _internal_has_audio_sender_config() const;

  public:
  void clear_audio_sender_config() ;
  const ::webrtc::rtclog::AudioSendConfig& audio_sender_config() const;
  [[nodiscard]] ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NULLABLE release_audio_sender_config();
  ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NONNULL mutable_audio_sender_config();
  void set_allocated_audio_sender_config(::webrtc::rtclog::AudioSendConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio_sender_config(::webrtc::rtclog::AudioSendConfig* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NULLABLE unsafe_arena_release_audio_sender_config();

  private:
  const ::webrtc::rtclog::AudioSendConfig& _internal_audio_sender_config() const;
  ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NONNULL _internal_mutable_audio_sender_config();

  public:
  // .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
  bool has_audio_network_adaptation() const;
  private:
  bool _internal_has_audio_network_adaptation() const;

  public:
  void clear_audio_network_adaptation() ;
  const ::webrtc::rtclog::AudioNetworkAdaptation& audio_network_adaptation() const;
  [[nodiscard]] ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NULLABLE release_audio_network_adaptation();
  ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NONNULL mutable_audio_network_adaptation();
  void set_allocated_audio_network_adaptation(::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_audio_network_adaptation(::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NULLABLE unsafe_arena_release_audio_network_adaptation();

  private:
  const ::webrtc::rtclog::AudioNetworkAdaptation& _internal_audio_network_adaptation() const;
  ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NONNULL _internal_mutable_audio_network_adaptation();

  public:
  // .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
  bool has_probe_cluster() const;
  private:
  bool _internal_has_probe_cluster() const;

  public:
  void clear_probe_cluster() ;
  const ::webrtc::rtclog::BweProbeCluster& probe_cluster() const;
  [[nodiscard]] ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NULLABLE release_probe_cluster();
  ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NONNULL mutable_probe_cluster();
  void set_allocated_probe_cluster(::webrtc::rtclog::BweProbeCluster* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_probe_cluster(::webrtc::rtclog::BweProbeCluster* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NULLABLE unsafe_arena_release_probe_cluster();

  private:
  const ::webrtc::rtclog::BweProbeCluster& _internal_probe_cluster() const;
  ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NONNULL _internal_mutable_probe_cluster();

  public:
  // .webrtc.rtclog.BweProbeResult probe_result = 18;
  bool has_probe_result() const;
  private:
  bool _internal_has_probe_result() const;

  public:
  void clear_probe_result() ;
  const ::webrtc::rtclog::BweProbeResult& probe_result() const;
  [[nodiscard]] ::webrtc::rtclog::BweProbeResult* PROTOBUF_NULLABLE release_probe_result();
  ::webrtc::rtclog::BweProbeResult* PROTOBUF_NONNULL mutable_probe_result();
  void set_allocated_probe_result(::webrtc::rtclog::BweProbeResult* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_probe_result(::webrtc::rtclog::BweProbeResult* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::BweProbeResult* PROTOBUF_NULLABLE unsafe_arena_release_probe_result();

  private:
  const ::webrtc::rtclog::BweProbeResult& _internal_probe_result() const;
  ::webrtc::rtclog::BweProbeResult* PROTOBUF_NONNULL _internal_mutable_probe_result();

  public:
  // .webrtc.rtclog.AlrState alr_state = 19;
  bool has_alr_state() const;
  private:
  bool _internal_has_alr_state() const;

  public:
  void clear_alr_state() ;
  const ::webrtc::rtclog::AlrState& alr_state() const;
  [[nodiscard]] ::webrtc::rtclog::AlrState* PROTOBUF_NULLABLE release_alr_state();
  ::webrtc::rtclog::AlrState* PROTOBUF_NONNULL mutable_alr_state();
  void set_allocated_alr_state(::webrtc::rtclog::AlrState* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_alr_state(::webrtc::rtclog::AlrState* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::AlrState* PROTOBUF_NULLABLE unsafe_arena_release_alr_state();

  private:
  const ::webrtc::rtclog::AlrState& _internal_alr_state() const;
  ::webrtc::rtclog::AlrState* PROTOBUF_NONNULL _internal_mutable_alr_state();

  public:
  // .webrtc.rtclog.IceCandidatePairConfig ice_candidate_pair_config = 20;
  bool has_ice_candidate_pair_config() const;
  private:
  bool _internal_has_ice_candidate_pair_config() const;

  public:
  void clear_ice_candidate_pair_config() ;
  const ::webrtc::rtclog::IceCandidatePairConfig& ice_candidate_pair_config() const;
  [[nodiscard]] ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NULLABLE release_ice_candidate_pair_config();
  ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NONNULL mutable_ice_candidate_pair_config();
  void set_allocated_ice_candidate_pair_config(::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ice_candidate_pair_config(::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NULLABLE unsafe_arena_release_ice_candidate_pair_config();

  private:
  const ::webrtc::rtclog::IceCandidatePairConfig& _internal_ice_candidate_pair_config() const;
  ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NONNULL _internal_mutable_ice_candidate_pair_config();

  public:
  // .webrtc.rtclog.IceCandidatePairEvent ice_candidate_pair_event = 21;
  bool has_ice_candidate_pair_event() const;
  private:
  bool _internal_has_ice_candidate_pair_event() const;

  public:
  void clear_ice_candidate_pair_event() ;
  const ::webrtc::rtclog::IceCandidatePairEvent& ice_candidate_pair_event() const;
  [[nodiscard]] ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NULLABLE release_ice_candidate_pair_event();
  ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NONNULL mutable_ice_candidate_pair_event();
  void set_allocated_ice_candidate_pair_event(::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ice_candidate_pair_event(::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NULLABLE unsafe_arena_release_ice_candidate_pair_event();

  private:
  const ::webrtc::rtclog::IceCandidatePairEvent& _internal_ice_candidate_pair_event() const;
  ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NONNULL _internal_mutable_ice_candidate_pair_event();

  public:
  // .webrtc.rtclog.RemoteEstimate remote_estimate = 22;
  bool has_remote_estimate() const;
  private:
  bool _internal_has_remote_estimate() const;

  public:
  void clear_remote_estimate() ;
  const ::webrtc::rtclog::RemoteEstimate& remote_estimate() const;
  [[nodiscard]] ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NULLABLE release_remote_estimate();
  ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NONNULL mutable_remote_estimate();
  void set_allocated_remote_estimate(::webrtc::rtclog::RemoteEstimate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_remote_estimate(::webrtc::rtclog::RemoteEstimate* PROTOBUF_NULLABLE value);
  ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NULLABLE unsafe_arena_release_remote_estimate();

  private:
  const ::webrtc::rtclog::RemoteEstimate& _internal_remote_estimate() const;
  ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NONNULL _internal_mutable_remote_estimate();

  public:
  void clear_subtype();
  SubtypeCase subtype_case() const;
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.Event)
 private:
  class _Internal;
  void set_has_rtp_packet();
  void set_has_rtcp_packet();
  void set_has_audio_playout_event();
  void set_has_loss_based_bwe_update();
  void set_has_delay_based_bwe_update();
  void set_has_video_receiver_config();
  void set_has_video_sender_config();
  void set_has_audio_receiver_config();
  void set_has_audio_sender_config();
  void set_has_audio_network_adaptation();
  void set_has_probe_cluster();
  void set_has_probe_result();
  void set_has_alr_state();
  void set_has_ice_candidate_pair_config();
  void set_has_ice_candidate_pair_event();
  void set_has_remote_estimate();
  inline bool has_subtype() const;
  inline void clear_has_subtype();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 18,
                                   17, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Event& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t timestamp_us_;
    int type_;
    union SubtypeUnion {
      constexpr SubtypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE rtp_packet_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE rtcp_packet_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE audio_playout_event_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE loss_based_bwe_update_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE delay_based_bwe_update_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE video_receiver_config_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE video_sender_config_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE audio_receiver_config_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE audio_sender_config_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE audio_network_adaptation_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE probe_cluster_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE probe_result_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE alr_state_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE ice_candidate_pair_config_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE ice_candidate_pair_event_;
      ::google::protobuf::MessageLite* PROTOBUF_NULLABLE remote_estimate_;
    } subtype_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<20> Event_class_data_;
// -------------------------------------------------------------------

class EventStream final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.rtclog.EventStream) */ {
 public:
  inline EventStream() : EventStream(nullptr) {}
  ~EventStream() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventStream* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventStream));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventStream(::google::protobuf::internal::ConstantInitialized);

  inline EventStream(const EventStream& from) : EventStream(nullptr, from) {}
  inline EventStream(EventStream&& from) noexcept
      : EventStream(nullptr, std::move(from)) {}
  inline EventStream& operator=(const EventStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventStream& operator=(EventStream&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EventStream& default_instance() {
    return *reinterpret_cast<const EventStream*>(
        &_EventStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EventStream& a, EventStream& b) { a.Swap(&b); }
  inline void Swap(EventStream* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventStream* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventStream* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<EventStream>(arena);
  }
  void CopyFrom(const EventStream& from);
  void MergeFrom(const EventStream& from) { EventStream::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventStream* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.rtclog.EventStream"; }

 protected:
  explicit EventStream(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EventStream(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EventStream& from);
  EventStream(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EventStream&& from) noexcept
      : EventStream(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStreamFieldNumber = 1,
  };
  // repeated .webrtc.rtclog.Event stream = 1;
  int stream_size() const;
  private:
  int _internal_stream_size() const;

  public:
  void clear_stream() ;
  ::webrtc::rtclog::Event* PROTOBUF_NONNULL mutable_stream(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>* PROTOBUF_NONNULL mutable_stream();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>& _internal_stream() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>* PROTOBUF_NONNULL _internal_mutable_stream();
  public:
  const ::webrtc::rtclog::Event& stream(int index) const;
  ::webrtc::rtclog::Event* PROTOBUF_NONNULL add_stream();
  const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>& stream() const;
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.EventStream)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EventStream& from_msg);
    ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::Event > stream_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtc_5fevent_5flog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<26> EventStream_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventStream

// repeated .webrtc.rtclog.Event stream = 1;
inline int EventStream::_internal_stream_size() const {
  return _internal_stream().size();
}
inline int EventStream::stream_size() const {
  return _internal_stream_size();
}
inline void EventStream::clear_stream() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_.Clear();
}
inline ::webrtc::rtclog::Event* PROTOBUF_NONNULL EventStream::mutable_stream(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.EventStream.stream)
  return _internal_mutable_stream()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>* PROTOBUF_NONNULL EventStream::mutable_stream()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.EventStream.stream)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_stream();
}
inline const ::webrtc::rtclog::Event& EventStream::stream(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EventStream.stream)
  return _internal_stream().Get(index);
}
inline ::webrtc::rtclog::Event* PROTOBUF_NONNULL EventStream::add_stream()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::rtclog::Event* _add = _internal_mutable_stream()->Add();
  // @@protoc_insertion_point(field_add:webrtc.rtclog.EventStream.stream)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>& EventStream::stream() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.EventStream.stream)
  return _internal_stream();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>&
EventStream::_internal_stream() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::Event>* PROTOBUF_NONNULL
EventStream::_internal_mutable_stream() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.stream_;
}

// -------------------------------------------------------------------

// Event

// optional int64 timestamp_us = 1;
inline bool Event::has_timestamp_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Event::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Event::timestamp_us() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.timestamp_us)
  return _internal_timestamp_us();
}
inline void Event::set_timestamp_us(::int64_t value) {
  _internal_set_timestamp_us(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.Event.timestamp_us)
}
inline ::int64_t Event::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void Event::_internal_set_timestamp_us(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// optional .webrtc.rtclog.Event.EventType type = 2;
inline bool Event::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Event::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::rtclog::Event_EventType Event::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.type)
  return _internal_type();
}
inline void Event::set_type(::webrtc::rtclog::Event_EventType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.Event.type)
}
inline ::webrtc::rtclog::Event_EventType Event::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::Event_EventType>(_impl_.type_);
}
inline void Event::_internal_set_type(::webrtc::rtclog::Event_EventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::Event_EventType_internal_data_));
                                          _impl_.type_ = value;
}

// .webrtc.rtclog.RtpPacket rtp_packet = 3;
inline bool Event::has_rtp_packet() const {
  return subtype_case() == kRtpPacket;
}
inline bool Event::_internal_has_rtp_packet() const {
  return subtype_case() == kRtpPacket;
}
inline void Event::set_has_rtp_packet() {
  _impl_._oneof_case_[0] = kRtpPacket;
}
inline void Event::clear_rtp_packet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kRtpPacket) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.rtp_packet_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.rtp_packet_ != nullptr) {
        _impl_.subtype_.rtp_packet_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::RtpPacket* PROTOBUF_NULLABLE Event::release_rtp_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.rtp_packet)
  if (subtype_case() == kRtpPacket) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::RtpPacket*>(_impl_.subtype_.rtp_packet_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.rtp_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::RtpPacket& Event::_internal_rtp_packet() const {
  return subtype_case() == kRtpPacket ? *reinterpret_cast<::webrtc::rtclog::RtpPacket*>(_impl_.subtype_.rtp_packet_) : reinterpret_cast<::webrtc::rtclog::RtpPacket&>(::webrtc::rtclog::_RtpPacket_default_instance_);
}
inline const ::webrtc::rtclog::RtpPacket& Event::rtp_packet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.rtp_packet)
  return _internal_rtp_packet();
}
inline ::webrtc::rtclog::RtpPacket* PROTOBUF_NULLABLE Event::unsafe_arena_release_rtp_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.rtp_packet)
  if (subtype_case() == kRtpPacket) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::RtpPacket*>(_impl_.subtype_.rtp_packet_);
    _impl_.subtype_.rtp_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_rtp_packet(
    ::webrtc::rtclog::RtpPacket* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_rtp_packet();
    _impl_.subtype_.rtp_packet_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.rtp_packet)
}
inline ::webrtc::rtclog::RtpPacket* PROTOBUF_NONNULL Event::_internal_mutable_rtp_packet() {
  if (subtype_case() != kRtpPacket) {
    clear_subtype();
    set_has_rtp_packet();
    _impl_.subtype_.rtp_packet_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::RtpPacket>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::RtpPacket*>(_impl_.subtype_.rtp_packet_);
}
inline ::webrtc::rtclog::RtpPacket* PROTOBUF_NONNULL Event::mutable_rtp_packet()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::RtpPacket* _msg = _internal_mutable_rtp_packet();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.rtp_packet)
  return _msg;
}

// .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
inline bool Event::has_rtcp_packet() const {
  return subtype_case() == kRtcpPacket;
}
inline bool Event::_internal_has_rtcp_packet() const {
  return subtype_case() == kRtcpPacket;
}
inline void Event::set_has_rtcp_packet() {
  _impl_._oneof_case_[0] = kRtcpPacket;
}
inline void Event::clear_rtcp_packet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kRtcpPacket) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.rtcp_packet_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.rtcp_packet_ != nullptr) {
        _impl_.subtype_.rtcp_packet_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::RtcpPacket* PROTOBUF_NULLABLE Event::release_rtcp_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.rtcp_packet)
  if (subtype_case() == kRtcpPacket) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::RtcpPacket*>(_impl_.subtype_.rtcp_packet_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.rtcp_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::RtcpPacket& Event::_internal_rtcp_packet() const {
  return subtype_case() == kRtcpPacket ? *reinterpret_cast<::webrtc::rtclog::RtcpPacket*>(_impl_.subtype_.rtcp_packet_) : reinterpret_cast<::webrtc::rtclog::RtcpPacket&>(::webrtc::rtclog::_RtcpPacket_default_instance_);
}
inline const ::webrtc::rtclog::RtcpPacket& Event::rtcp_packet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.rtcp_packet)
  return _internal_rtcp_packet();
}
inline ::webrtc::rtclog::RtcpPacket* PROTOBUF_NULLABLE Event::unsafe_arena_release_rtcp_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.rtcp_packet)
  if (subtype_case() == kRtcpPacket) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::RtcpPacket*>(_impl_.subtype_.rtcp_packet_);
    _impl_.subtype_.rtcp_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_rtcp_packet(
    ::webrtc::rtclog::RtcpPacket* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_rtcp_packet();
    _impl_.subtype_.rtcp_packet_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.rtcp_packet)
}
inline ::webrtc::rtclog::RtcpPacket* PROTOBUF_NONNULL Event::_internal_mutable_rtcp_packet() {
  if (subtype_case() != kRtcpPacket) {
    clear_subtype();
    set_has_rtcp_packet();
    _impl_.subtype_.rtcp_packet_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::RtcpPacket>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::RtcpPacket*>(_impl_.subtype_.rtcp_packet_);
}
inline ::webrtc::rtclog::RtcpPacket* PROTOBUF_NONNULL Event::mutable_rtcp_packet()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::RtcpPacket* _msg = _internal_mutable_rtcp_packet();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.rtcp_packet)
  return _msg;
}

// .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
inline bool Event::has_audio_playout_event() const {
  return subtype_case() == kAudioPlayoutEvent;
}
inline bool Event::_internal_has_audio_playout_event() const {
  return subtype_case() == kAudioPlayoutEvent;
}
inline void Event::set_has_audio_playout_event() {
  _impl_._oneof_case_[0] = kAudioPlayoutEvent;
}
inline void Event::clear_audio_playout_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kAudioPlayoutEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.audio_playout_event_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.audio_playout_event_ != nullptr) {
        _impl_.subtype_.audio_playout_event_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NULLABLE Event::release_audio_playout_event() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_playout_event)
  if (subtype_case() == kAudioPlayoutEvent) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioPlayoutEvent*>(_impl_.subtype_.audio_playout_event_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.audio_playout_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::AudioPlayoutEvent& Event::_internal_audio_playout_event() const {
  return subtype_case() == kAudioPlayoutEvent ? *reinterpret_cast<::webrtc::rtclog::AudioPlayoutEvent*>(_impl_.subtype_.audio_playout_event_) : reinterpret_cast<::webrtc::rtclog::AudioPlayoutEvent&>(::webrtc::rtclog::_AudioPlayoutEvent_default_instance_);
}
inline const ::webrtc::rtclog::AudioPlayoutEvent& Event::audio_playout_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_playout_event)
  return _internal_audio_playout_event();
}
inline ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NULLABLE Event::unsafe_arena_release_audio_playout_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.audio_playout_event)
  if (subtype_case() == kAudioPlayoutEvent) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioPlayoutEvent*>(_impl_.subtype_.audio_playout_event_);
    _impl_.subtype_.audio_playout_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_audio_playout_event(
    ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_audio_playout_event();
    _impl_.subtype_.audio_playout_event_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.audio_playout_event)
}
inline ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NONNULL Event::_internal_mutable_audio_playout_event() {
  if (subtype_case() != kAudioPlayoutEvent) {
    clear_subtype();
    set_has_audio_playout_event();
    _impl_.subtype_.audio_playout_event_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::AudioPlayoutEvent>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::AudioPlayoutEvent*>(_impl_.subtype_.audio_playout_event_);
}
inline ::webrtc::rtclog::AudioPlayoutEvent* PROTOBUF_NONNULL Event::mutable_audio_playout_event()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::AudioPlayoutEvent* _msg = _internal_mutable_audio_playout_event();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_playout_event)
  return _msg;
}

// .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
inline bool Event::has_loss_based_bwe_update() const {
  return subtype_case() == kLossBasedBweUpdate;
}
inline bool Event::_internal_has_loss_based_bwe_update() const {
  return subtype_case() == kLossBasedBweUpdate;
}
inline void Event::set_has_loss_based_bwe_update() {
  _impl_._oneof_case_[0] = kLossBasedBweUpdate;
}
inline void Event::clear_loss_based_bwe_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kLossBasedBweUpdate) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.loss_based_bwe_update_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.loss_based_bwe_update_ != nullptr) {
        _impl_.subtype_.loss_based_bwe_update_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NULLABLE Event::release_loss_based_bwe_update() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.loss_based_bwe_update)
  if (subtype_case() == kLossBasedBweUpdate) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::LossBasedBweUpdate*>(_impl_.subtype_.loss_based_bwe_update_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.loss_based_bwe_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::LossBasedBweUpdate& Event::_internal_loss_based_bwe_update() const {
  return subtype_case() == kLossBasedBweUpdate ? *reinterpret_cast<::webrtc::rtclog::LossBasedBweUpdate*>(_impl_.subtype_.loss_based_bwe_update_) : reinterpret_cast<::webrtc::rtclog::LossBasedBweUpdate&>(::webrtc::rtclog::_LossBasedBweUpdate_default_instance_);
}
inline const ::webrtc::rtclog::LossBasedBweUpdate& Event::loss_based_bwe_update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.loss_based_bwe_update)
  return _internal_loss_based_bwe_update();
}
inline ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NULLABLE Event::unsafe_arena_release_loss_based_bwe_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.loss_based_bwe_update)
  if (subtype_case() == kLossBasedBweUpdate) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::LossBasedBweUpdate*>(_impl_.subtype_.loss_based_bwe_update_);
    _impl_.subtype_.loss_based_bwe_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_loss_based_bwe_update(
    ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_loss_based_bwe_update();
    _impl_.subtype_.loss_based_bwe_update_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.loss_based_bwe_update)
}
inline ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NONNULL Event::_internal_mutable_loss_based_bwe_update() {
  if (subtype_case() != kLossBasedBweUpdate) {
    clear_subtype();
    set_has_loss_based_bwe_update();
    _impl_.subtype_.loss_based_bwe_update_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::LossBasedBweUpdate>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::LossBasedBweUpdate*>(_impl_.subtype_.loss_based_bwe_update_);
}
inline ::webrtc::rtclog::LossBasedBweUpdate* PROTOBUF_NONNULL Event::mutable_loss_based_bwe_update()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::LossBasedBweUpdate* _msg = _internal_mutable_loss_based_bwe_update();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.loss_based_bwe_update)
  return _msg;
}

// .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
inline bool Event::has_delay_based_bwe_update() const {
  return subtype_case() == kDelayBasedBweUpdate;
}
inline bool Event::_internal_has_delay_based_bwe_update() const {
  return subtype_case() == kDelayBasedBweUpdate;
}
inline void Event::set_has_delay_based_bwe_update() {
  _impl_._oneof_case_[0] = kDelayBasedBweUpdate;
}
inline void Event::clear_delay_based_bwe_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kDelayBasedBweUpdate) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.delay_based_bwe_update_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.delay_based_bwe_update_ != nullptr) {
        _impl_.subtype_.delay_based_bwe_update_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NULLABLE Event::release_delay_based_bwe_update() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.delay_based_bwe_update)
  if (subtype_case() == kDelayBasedBweUpdate) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::DelayBasedBweUpdate*>(_impl_.subtype_.delay_based_bwe_update_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.delay_based_bwe_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::DelayBasedBweUpdate& Event::_internal_delay_based_bwe_update() const {
  return subtype_case() == kDelayBasedBweUpdate ? *reinterpret_cast<::webrtc::rtclog::DelayBasedBweUpdate*>(_impl_.subtype_.delay_based_bwe_update_) : reinterpret_cast<::webrtc::rtclog::DelayBasedBweUpdate&>(::webrtc::rtclog::_DelayBasedBweUpdate_default_instance_);
}
inline const ::webrtc::rtclog::DelayBasedBweUpdate& Event::delay_based_bwe_update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.delay_based_bwe_update)
  return _internal_delay_based_bwe_update();
}
inline ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NULLABLE Event::unsafe_arena_release_delay_based_bwe_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.delay_based_bwe_update)
  if (subtype_case() == kDelayBasedBweUpdate) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::DelayBasedBweUpdate*>(_impl_.subtype_.delay_based_bwe_update_);
    _impl_.subtype_.delay_based_bwe_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_delay_based_bwe_update(
    ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_delay_based_bwe_update();
    _impl_.subtype_.delay_based_bwe_update_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.delay_based_bwe_update)
}
inline ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NONNULL Event::_internal_mutable_delay_based_bwe_update() {
  if (subtype_case() != kDelayBasedBweUpdate) {
    clear_subtype();
    set_has_delay_based_bwe_update();
    _impl_.subtype_.delay_based_bwe_update_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::DelayBasedBweUpdate>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::DelayBasedBweUpdate*>(_impl_.subtype_.delay_based_bwe_update_);
}
inline ::webrtc::rtclog::DelayBasedBweUpdate* PROTOBUF_NONNULL Event::mutable_delay_based_bwe_update()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::DelayBasedBweUpdate* _msg = _internal_mutable_delay_based_bwe_update();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.delay_based_bwe_update)
  return _msg;
}

// .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
inline bool Event::has_video_receiver_config() const {
  return subtype_case() == kVideoReceiverConfig;
}
inline bool Event::_internal_has_video_receiver_config() const {
  return subtype_case() == kVideoReceiverConfig;
}
inline void Event::set_has_video_receiver_config() {
  _impl_._oneof_case_[0] = kVideoReceiverConfig;
}
inline void Event::clear_video_receiver_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kVideoReceiverConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.video_receiver_config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.video_receiver_config_ != nullptr) {
        _impl_.subtype_.video_receiver_config_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NULLABLE Event::release_video_receiver_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.video_receiver_config)
  if (subtype_case() == kVideoReceiverConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::VideoReceiveConfig*>(_impl_.subtype_.video_receiver_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.video_receiver_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::VideoReceiveConfig& Event::_internal_video_receiver_config() const {
  return subtype_case() == kVideoReceiverConfig ? *reinterpret_cast<::webrtc::rtclog::VideoReceiveConfig*>(_impl_.subtype_.video_receiver_config_) : reinterpret_cast<::webrtc::rtclog::VideoReceiveConfig&>(::webrtc::rtclog::_VideoReceiveConfig_default_instance_);
}
inline const ::webrtc::rtclog::VideoReceiveConfig& Event::video_receiver_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.video_receiver_config)
  return _internal_video_receiver_config();
}
inline ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NULLABLE Event::unsafe_arena_release_video_receiver_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.video_receiver_config)
  if (subtype_case() == kVideoReceiverConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::VideoReceiveConfig*>(_impl_.subtype_.video_receiver_config_);
    _impl_.subtype_.video_receiver_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_video_receiver_config(
    ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_video_receiver_config();
    _impl_.subtype_.video_receiver_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.video_receiver_config)
}
inline ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NONNULL Event::_internal_mutable_video_receiver_config() {
  if (subtype_case() != kVideoReceiverConfig) {
    clear_subtype();
    set_has_video_receiver_config();
    _impl_.subtype_.video_receiver_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::VideoReceiveConfig>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::VideoReceiveConfig*>(_impl_.subtype_.video_receiver_config_);
}
inline ::webrtc::rtclog::VideoReceiveConfig* PROTOBUF_NONNULL Event::mutable_video_receiver_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::VideoReceiveConfig* _msg = _internal_mutable_video_receiver_config();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.video_receiver_config)
  return _msg;
}

// .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
inline bool Event::has_video_sender_config() const {
  return subtype_case() == kVideoSenderConfig;
}
inline bool Event::_internal_has_video_sender_config() const {
  return subtype_case() == kVideoSenderConfig;
}
inline void Event::set_has_video_sender_config() {
  _impl_._oneof_case_[0] = kVideoSenderConfig;
}
inline void Event::clear_video_sender_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kVideoSenderConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.video_sender_config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.video_sender_config_ != nullptr) {
        _impl_.subtype_.video_sender_config_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NULLABLE Event::release_video_sender_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.video_sender_config)
  if (subtype_case() == kVideoSenderConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::VideoSendConfig*>(_impl_.subtype_.video_sender_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.video_sender_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::VideoSendConfig& Event::_internal_video_sender_config() const {
  return subtype_case() == kVideoSenderConfig ? *reinterpret_cast<::webrtc::rtclog::VideoSendConfig*>(_impl_.subtype_.video_sender_config_) : reinterpret_cast<::webrtc::rtclog::VideoSendConfig&>(::webrtc::rtclog::_VideoSendConfig_default_instance_);
}
inline const ::webrtc::rtclog::VideoSendConfig& Event::video_sender_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.video_sender_config)
  return _internal_video_sender_config();
}
inline ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NULLABLE Event::unsafe_arena_release_video_sender_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.video_sender_config)
  if (subtype_case() == kVideoSenderConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::VideoSendConfig*>(_impl_.subtype_.video_sender_config_);
    _impl_.subtype_.video_sender_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_video_sender_config(
    ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_video_sender_config();
    _impl_.subtype_.video_sender_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.video_sender_config)
}
inline ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NONNULL Event::_internal_mutable_video_sender_config() {
  if (subtype_case() != kVideoSenderConfig) {
    clear_subtype();
    set_has_video_sender_config();
    _impl_.subtype_.video_sender_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::VideoSendConfig>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::VideoSendConfig*>(_impl_.subtype_.video_sender_config_);
}
inline ::webrtc::rtclog::VideoSendConfig* PROTOBUF_NONNULL Event::mutable_video_sender_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::VideoSendConfig* _msg = _internal_mutable_video_sender_config();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.video_sender_config)
  return _msg;
}

// .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
inline bool Event::has_audio_receiver_config() const {
  return subtype_case() == kAudioReceiverConfig;
}
inline bool Event::_internal_has_audio_receiver_config() const {
  return subtype_case() == kAudioReceiverConfig;
}
inline void Event::set_has_audio_receiver_config() {
  _impl_._oneof_case_[0] = kAudioReceiverConfig;
}
inline void Event::clear_audio_receiver_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kAudioReceiverConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.audio_receiver_config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.audio_receiver_config_ != nullptr) {
        _impl_.subtype_.audio_receiver_config_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NULLABLE Event::release_audio_receiver_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_receiver_config)
  if (subtype_case() == kAudioReceiverConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioReceiveConfig*>(_impl_.subtype_.audio_receiver_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.audio_receiver_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::AudioReceiveConfig& Event::_internal_audio_receiver_config() const {
  return subtype_case() == kAudioReceiverConfig ? *reinterpret_cast<::webrtc::rtclog::AudioReceiveConfig*>(_impl_.subtype_.audio_receiver_config_) : reinterpret_cast<::webrtc::rtclog::AudioReceiveConfig&>(::webrtc::rtclog::_AudioReceiveConfig_default_instance_);
}
inline const ::webrtc::rtclog::AudioReceiveConfig& Event::audio_receiver_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_receiver_config)
  return _internal_audio_receiver_config();
}
inline ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NULLABLE Event::unsafe_arena_release_audio_receiver_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.audio_receiver_config)
  if (subtype_case() == kAudioReceiverConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioReceiveConfig*>(_impl_.subtype_.audio_receiver_config_);
    _impl_.subtype_.audio_receiver_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_audio_receiver_config(
    ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_audio_receiver_config();
    _impl_.subtype_.audio_receiver_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.audio_receiver_config)
}
inline ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NONNULL Event::_internal_mutable_audio_receiver_config() {
  if (subtype_case() != kAudioReceiverConfig) {
    clear_subtype();
    set_has_audio_receiver_config();
    _impl_.subtype_.audio_receiver_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::AudioReceiveConfig>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::AudioReceiveConfig*>(_impl_.subtype_.audio_receiver_config_);
}
inline ::webrtc::rtclog::AudioReceiveConfig* PROTOBUF_NONNULL Event::mutable_audio_receiver_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::AudioReceiveConfig* _msg = _internal_mutable_audio_receiver_config();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_receiver_config)
  return _msg;
}

// .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
inline bool Event::has_audio_sender_config() const {
  return subtype_case() == kAudioSenderConfig;
}
inline bool Event::_internal_has_audio_sender_config() const {
  return subtype_case() == kAudioSenderConfig;
}
inline void Event::set_has_audio_sender_config() {
  _impl_._oneof_case_[0] = kAudioSenderConfig;
}
inline void Event::clear_audio_sender_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kAudioSenderConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.audio_sender_config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.audio_sender_config_ != nullptr) {
        _impl_.subtype_.audio_sender_config_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NULLABLE Event::release_audio_sender_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_sender_config)
  if (subtype_case() == kAudioSenderConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioSendConfig*>(_impl_.subtype_.audio_sender_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.audio_sender_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::AudioSendConfig& Event::_internal_audio_sender_config() const {
  return subtype_case() == kAudioSenderConfig ? *reinterpret_cast<::webrtc::rtclog::AudioSendConfig*>(_impl_.subtype_.audio_sender_config_) : reinterpret_cast<::webrtc::rtclog::AudioSendConfig&>(::webrtc::rtclog::_AudioSendConfig_default_instance_);
}
inline const ::webrtc::rtclog::AudioSendConfig& Event::audio_sender_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_sender_config)
  return _internal_audio_sender_config();
}
inline ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NULLABLE Event::unsafe_arena_release_audio_sender_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.audio_sender_config)
  if (subtype_case() == kAudioSenderConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioSendConfig*>(_impl_.subtype_.audio_sender_config_);
    _impl_.subtype_.audio_sender_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_audio_sender_config(
    ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_audio_sender_config();
    _impl_.subtype_.audio_sender_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.audio_sender_config)
}
inline ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NONNULL Event::_internal_mutable_audio_sender_config() {
  if (subtype_case() != kAudioSenderConfig) {
    clear_subtype();
    set_has_audio_sender_config();
    _impl_.subtype_.audio_sender_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::AudioSendConfig>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::AudioSendConfig*>(_impl_.subtype_.audio_sender_config_);
}
inline ::webrtc::rtclog::AudioSendConfig* PROTOBUF_NONNULL Event::mutable_audio_sender_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::AudioSendConfig* _msg = _internal_mutable_audio_sender_config();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_sender_config)
  return _msg;
}

// .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
inline bool Event::has_audio_network_adaptation() const {
  return subtype_case() == kAudioNetworkAdaptation;
}
inline bool Event::_internal_has_audio_network_adaptation() const {
  return subtype_case() == kAudioNetworkAdaptation;
}
inline void Event::set_has_audio_network_adaptation() {
  _impl_._oneof_case_[0] = kAudioNetworkAdaptation;
}
inline void Event::clear_audio_network_adaptation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kAudioNetworkAdaptation) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.audio_network_adaptation_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.audio_network_adaptation_ != nullptr) {
        _impl_.subtype_.audio_network_adaptation_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NULLABLE Event::release_audio_network_adaptation() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_network_adaptation)
  if (subtype_case() == kAudioNetworkAdaptation) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioNetworkAdaptation*>(_impl_.subtype_.audio_network_adaptation_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.audio_network_adaptation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::AudioNetworkAdaptation& Event::_internal_audio_network_adaptation() const {
  return subtype_case() == kAudioNetworkAdaptation ? *reinterpret_cast<::webrtc::rtclog::AudioNetworkAdaptation*>(_impl_.subtype_.audio_network_adaptation_) : reinterpret_cast<::webrtc::rtclog::AudioNetworkAdaptation&>(::webrtc::rtclog::_AudioNetworkAdaptation_default_instance_);
}
inline const ::webrtc::rtclog::AudioNetworkAdaptation& Event::audio_network_adaptation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_network_adaptation)
  return _internal_audio_network_adaptation();
}
inline ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NULLABLE Event::unsafe_arena_release_audio_network_adaptation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.audio_network_adaptation)
  if (subtype_case() == kAudioNetworkAdaptation) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AudioNetworkAdaptation*>(_impl_.subtype_.audio_network_adaptation_);
    _impl_.subtype_.audio_network_adaptation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_audio_network_adaptation(
    ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_audio_network_adaptation();
    _impl_.subtype_.audio_network_adaptation_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.audio_network_adaptation)
}
inline ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NONNULL Event::_internal_mutable_audio_network_adaptation() {
  if (subtype_case() != kAudioNetworkAdaptation) {
    clear_subtype();
    set_has_audio_network_adaptation();
    _impl_.subtype_.audio_network_adaptation_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::AudioNetworkAdaptation>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::AudioNetworkAdaptation*>(_impl_.subtype_.audio_network_adaptation_);
}
inline ::webrtc::rtclog::AudioNetworkAdaptation* PROTOBUF_NONNULL Event::mutable_audio_network_adaptation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::AudioNetworkAdaptation* _msg = _internal_mutable_audio_network_adaptation();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_network_adaptation)
  return _msg;
}

// .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
inline bool Event::has_probe_cluster() const {
  return subtype_case() == kProbeCluster;
}
inline bool Event::_internal_has_probe_cluster() const {
  return subtype_case() == kProbeCluster;
}
inline void Event::set_has_probe_cluster() {
  _impl_._oneof_case_[0] = kProbeCluster;
}
inline void Event::clear_probe_cluster() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kProbeCluster) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.probe_cluster_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.probe_cluster_ != nullptr) {
        _impl_.subtype_.probe_cluster_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NULLABLE Event::release_probe_cluster() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.probe_cluster)
  if (subtype_case() == kProbeCluster) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::BweProbeCluster*>(_impl_.subtype_.probe_cluster_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.probe_cluster_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::BweProbeCluster& Event::_internal_probe_cluster() const {
  return subtype_case() == kProbeCluster ? *reinterpret_cast<::webrtc::rtclog::BweProbeCluster*>(_impl_.subtype_.probe_cluster_) : reinterpret_cast<::webrtc::rtclog::BweProbeCluster&>(::webrtc::rtclog::_BweProbeCluster_default_instance_);
}
inline const ::webrtc::rtclog::BweProbeCluster& Event::probe_cluster() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.probe_cluster)
  return _internal_probe_cluster();
}
inline ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NULLABLE Event::unsafe_arena_release_probe_cluster() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.probe_cluster)
  if (subtype_case() == kProbeCluster) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::BweProbeCluster*>(_impl_.subtype_.probe_cluster_);
    _impl_.subtype_.probe_cluster_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_probe_cluster(
    ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_probe_cluster();
    _impl_.subtype_.probe_cluster_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.probe_cluster)
}
inline ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NONNULL Event::_internal_mutable_probe_cluster() {
  if (subtype_case() != kProbeCluster) {
    clear_subtype();
    set_has_probe_cluster();
    _impl_.subtype_.probe_cluster_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::BweProbeCluster>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::BweProbeCluster*>(_impl_.subtype_.probe_cluster_);
}
inline ::webrtc::rtclog::BweProbeCluster* PROTOBUF_NONNULL Event::mutable_probe_cluster()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::BweProbeCluster* _msg = _internal_mutable_probe_cluster();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.probe_cluster)
  return _msg;
}

// .webrtc.rtclog.BweProbeResult probe_result = 18;
inline bool Event::has_probe_result() const {
  return subtype_case() == kProbeResult;
}
inline bool Event::_internal_has_probe_result() const {
  return subtype_case() == kProbeResult;
}
inline void Event::set_has_probe_result() {
  _impl_._oneof_case_[0] = kProbeResult;
}
inline void Event::clear_probe_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kProbeResult) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.probe_result_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.probe_result_ != nullptr) {
        _impl_.subtype_.probe_result_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::BweProbeResult* PROTOBUF_NULLABLE Event::release_probe_result() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.probe_result)
  if (subtype_case() == kProbeResult) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::BweProbeResult*>(_impl_.subtype_.probe_result_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.probe_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::BweProbeResult& Event::_internal_probe_result() const {
  return subtype_case() == kProbeResult ? *reinterpret_cast<::webrtc::rtclog::BweProbeResult*>(_impl_.subtype_.probe_result_) : reinterpret_cast<::webrtc::rtclog::BweProbeResult&>(::webrtc::rtclog::_BweProbeResult_default_instance_);
}
inline const ::webrtc::rtclog::BweProbeResult& Event::probe_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.probe_result)
  return _internal_probe_result();
}
inline ::webrtc::rtclog::BweProbeResult* PROTOBUF_NULLABLE Event::unsafe_arena_release_probe_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.probe_result)
  if (subtype_case() == kProbeResult) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::BweProbeResult*>(_impl_.subtype_.probe_result_);
    _impl_.subtype_.probe_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_probe_result(
    ::webrtc::rtclog::BweProbeResult* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_probe_result();
    _impl_.subtype_.probe_result_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.probe_result)
}
inline ::webrtc::rtclog::BweProbeResult* PROTOBUF_NONNULL Event::_internal_mutable_probe_result() {
  if (subtype_case() != kProbeResult) {
    clear_subtype();
    set_has_probe_result();
    _impl_.subtype_.probe_result_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::BweProbeResult>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::BweProbeResult*>(_impl_.subtype_.probe_result_);
}
inline ::webrtc::rtclog::BweProbeResult* PROTOBUF_NONNULL Event::mutable_probe_result()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::BweProbeResult* _msg = _internal_mutable_probe_result();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.probe_result)
  return _msg;
}

// .webrtc.rtclog.AlrState alr_state = 19;
inline bool Event::has_alr_state() const {
  return subtype_case() == kAlrState;
}
inline bool Event::_internal_has_alr_state() const {
  return subtype_case() == kAlrState;
}
inline void Event::set_has_alr_state() {
  _impl_._oneof_case_[0] = kAlrState;
}
inline void Event::clear_alr_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kAlrState) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.alr_state_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.alr_state_ != nullptr) {
        _impl_.subtype_.alr_state_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::AlrState* PROTOBUF_NULLABLE Event::release_alr_state() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.alr_state)
  if (subtype_case() == kAlrState) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AlrState*>(_impl_.subtype_.alr_state_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.alr_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::AlrState& Event::_internal_alr_state() const {
  return subtype_case() == kAlrState ? *reinterpret_cast<::webrtc::rtclog::AlrState*>(_impl_.subtype_.alr_state_) : reinterpret_cast<::webrtc::rtclog::AlrState&>(::webrtc::rtclog::_AlrState_default_instance_);
}
inline const ::webrtc::rtclog::AlrState& Event::alr_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.alr_state)
  return _internal_alr_state();
}
inline ::webrtc::rtclog::AlrState* PROTOBUF_NULLABLE Event::unsafe_arena_release_alr_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.alr_state)
  if (subtype_case() == kAlrState) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::AlrState*>(_impl_.subtype_.alr_state_);
    _impl_.subtype_.alr_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_alr_state(
    ::webrtc::rtclog::AlrState* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_alr_state();
    _impl_.subtype_.alr_state_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.alr_state)
}
inline ::webrtc::rtclog::AlrState* PROTOBUF_NONNULL Event::_internal_mutable_alr_state() {
  if (subtype_case() != kAlrState) {
    clear_subtype();
    set_has_alr_state();
    _impl_.subtype_.alr_state_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::AlrState>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::AlrState*>(_impl_.subtype_.alr_state_);
}
inline ::webrtc::rtclog::AlrState* PROTOBUF_NONNULL Event::mutable_alr_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::AlrState* _msg = _internal_mutable_alr_state();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.alr_state)
  return _msg;
}

// .webrtc.rtclog.IceCandidatePairConfig ice_candidate_pair_config = 20;
inline bool Event::has_ice_candidate_pair_config() const {
  return subtype_case() == kIceCandidatePairConfig;
}
inline bool Event::_internal_has_ice_candidate_pair_config() const {
  return subtype_case() == kIceCandidatePairConfig;
}
inline void Event::set_has_ice_candidate_pair_config() {
  _impl_._oneof_case_[0] = kIceCandidatePairConfig;
}
inline void Event::clear_ice_candidate_pair_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kIceCandidatePairConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.ice_candidate_pair_config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.ice_candidate_pair_config_ != nullptr) {
        _impl_.subtype_.ice_candidate_pair_config_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NULLABLE Event::release_ice_candidate_pair_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.ice_candidate_pair_config)
  if (subtype_case() == kIceCandidatePairConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::IceCandidatePairConfig*>(_impl_.subtype_.ice_candidate_pair_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.ice_candidate_pair_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::IceCandidatePairConfig& Event::_internal_ice_candidate_pair_config() const {
  return subtype_case() == kIceCandidatePairConfig ? *reinterpret_cast<::webrtc::rtclog::IceCandidatePairConfig*>(_impl_.subtype_.ice_candidate_pair_config_) : reinterpret_cast<::webrtc::rtclog::IceCandidatePairConfig&>(::webrtc::rtclog::_IceCandidatePairConfig_default_instance_);
}
inline const ::webrtc::rtclog::IceCandidatePairConfig& Event::ice_candidate_pair_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.ice_candidate_pair_config)
  return _internal_ice_candidate_pair_config();
}
inline ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NULLABLE Event::unsafe_arena_release_ice_candidate_pair_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.ice_candidate_pair_config)
  if (subtype_case() == kIceCandidatePairConfig) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::IceCandidatePairConfig*>(_impl_.subtype_.ice_candidate_pair_config_);
    _impl_.subtype_.ice_candidate_pair_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_ice_candidate_pair_config(
    ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_ice_candidate_pair_config();
    _impl_.subtype_.ice_candidate_pair_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.ice_candidate_pair_config)
}
inline ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NONNULL Event::_internal_mutable_ice_candidate_pair_config() {
  if (subtype_case() != kIceCandidatePairConfig) {
    clear_subtype();
    set_has_ice_candidate_pair_config();
    _impl_.subtype_.ice_candidate_pair_config_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::IceCandidatePairConfig>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::IceCandidatePairConfig*>(_impl_.subtype_.ice_candidate_pair_config_);
}
inline ::webrtc::rtclog::IceCandidatePairConfig* PROTOBUF_NONNULL Event::mutable_ice_candidate_pair_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::IceCandidatePairConfig* _msg = _internal_mutable_ice_candidate_pair_config();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.ice_candidate_pair_config)
  return _msg;
}

// .webrtc.rtclog.IceCandidatePairEvent ice_candidate_pair_event = 21;
inline bool Event::has_ice_candidate_pair_event() const {
  return subtype_case() == kIceCandidatePairEvent;
}
inline bool Event::_internal_has_ice_candidate_pair_event() const {
  return subtype_case() == kIceCandidatePairEvent;
}
inline void Event::set_has_ice_candidate_pair_event() {
  _impl_._oneof_case_[0] = kIceCandidatePairEvent;
}
inline void Event::clear_ice_candidate_pair_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kIceCandidatePairEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.ice_candidate_pair_event_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.ice_candidate_pair_event_ != nullptr) {
        _impl_.subtype_.ice_candidate_pair_event_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NULLABLE Event::release_ice_candidate_pair_event() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.ice_candidate_pair_event)
  if (subtype_case() == kIceCandidatePairEvent) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::IceCandidatePairEvent*>(_impl_.subtype_.ice_candidate_pair_event_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.ice_candidate_pair_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::IceCandidatePairEvent& Event::_internal_ice_candidate_pair_event() const {
  return subtype_case() == kIceCandidatePairEvent ? *reinterpret_cast<::webrtc::rtclog::IceCandidatePairEvent*>(_impl_.subtype_.ice_candidate_pair_event_) : reinterpret_cast<::webrtc::rtclog::IceCandidatePairEvent&>(::webrtc::rtclog::_IceCandidatePairEvent_default_instance_);
}
inline const ::webrtc::rtclog::IceCandidatePairEvent& Event::ice_candidate_pair_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.ice_candidate_pair_event)
  return _internal_ice_candidate_pair_event();
}
inline ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NULLABLE Event::unsafe_arena_release_ice_candidate_pair_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.ice_candidate_pair_event)
  if (subtype_case() == kIceCandidatePairEvent) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::IceCandidatePairEvent*>(_impl_.subtype_.ice_candidate_pair_event_);
    _impl_.subtype_.ice_candidate_pair_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_ice_candidate_pair_event(
    ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_ice_candidate_pair_event();
    _impl_.subtype_.ice_candidate_pair_event_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.ice_candidate_pair_event)
}
inline ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NONNULL Event::_internal_mutable_ice_candidate_pair_event() {
  if (subtype_case() != kIceCandidatePairEvent) {
    clear_subtype();
    set_has_ice_candidate_pair_event();
    _impl_.subtype_.ice_candidate_pair_event_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::IceCandidatePairEvent>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::IceCandidatePairEvent*>(_impl_.subtype_.ice_candidate_pair_event_);
}
inline ::webrtc::rtclog::IceCandidatePairEvent* PROTOBUF_NONNULL Event::mutable_ice_candidate_pair_event()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::IceCandidatePairEvent* _msg = _internal_mutable_ice_candidate_pair_event();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.ice_candidate_pair_event)
  return _msg;
}

// .webrtc.rtclog.RemoteEstimate remote_estimate = 22;
inline bool Event::has_remote_estimate() const {
  return subtype_case() == kRemoteEstimate;
}
inline bool Event::_internal_has_remote_estimate() const {
  return subtype_case() == kRemoteEstimate;
}
inline void Event::set_has_remote_estimate() {
  _impl_._oneof_case_[0] = kRemoteEstimate;
}
inline void Event::clear_remote_estimate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (subtype_case() == kRemoteEstimate) {
    if (GetArena() == nullptr) {
      delete _impl_.subtype_.remote_estimate_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.subtype_.remote_estimate_ != nullptr) {
        _impl_.subtype_.remote_estimate_->Clear();
      }
    }
    clear_has_subtype();
  }
}
inline ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NULLABLE Event::release_remote_estimate() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.remote_estimate)
  if (subtype_case() == kRemoteEstimate) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::RemoteEstimate*>(_impl_.subtype_.remote_estimate_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subtype_.remote_estimate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::rtclog::RemoteEstimate& Event::_internal_remote_estimate() const {
  return subtype_case() == kRemoteEstimate ? *reinterpret_cast<::webrtc::rtclog::RemoteEstimate*>(_impl_.subtype_.remote_estimate_) : reinterpret_cast<::webrtc::rtclog::RemoteEstimate&>(::webrtc::rtclog::_RemoteEstimate_default_instance_);
}
inline const ::webrtc::rtclog::RemoteEstimate& Event::remote_estimate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.remote_estimate)
  return _internal_remote_estimate();
}
inline ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NULLABLE Event::unsafe_arena_release_remote_estimate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.rtclog.Event.remote_estimate)
  if (subtype_case() == kRemoteEstimate) {
    clear_has_subtype();
    auto* temp = reinterpret_cast<::webrtc::rtclog::RemoteEstimate*>(_impl_.subtype_.remote_estimate_);
    _impl_.subtype_.remote_estimate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_remote_estimate(
    ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_subtype();
  if (value) {
    set_has_remote_estimate();
    _impl_.subtype_.remote_estimate_ = reinterpret_cast<::google::protobuf::MessageLite*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.Event.remote_estimate)
}
inline ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NONNULL Event::_internal_mutable_remote_estimate() {
  if (subtype_case() != kRemoteEstimate) {
    clear_subtype();
    set_has_remote_estimate();
    _impl_.subtype_.remote_estimate_ = reinterpret_cast<::google::protobuf::MessageLite*>(
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::RemoteEstimate>(GetArena()));
  }
  return reinterpret_cast<::webrtc::rtclog::RemoteEstimate*>(_impl_.subtype_.remote_estimate_);
}
inline ::webrtc::rtclog::RemoteEstimate* PROTOBUF_NONNULL Event::mutable_remote_estimate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::rtclog::RemoteEstimate* _msg = _internal_mutable_remote_estimate();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.remote_estimate)
  return _msg;
}

inline bool Event::has_subtype() const {
  return subtype_case() != SUBTYPE_NOT_SET;
}
inline void Event::clear_has_subtype() {
  _impl_._oneof_case_[0] = SUBTYPE_NOT_SET;
}
inline Event::SubtypeCase Event::subtype_case() const {
  return Event::SubtypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RtpPacket

// optional bool incoming = 1;
inline bool RtpPacket::has_incoming() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtpPacket::clear_incoming() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incoming_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RtpPacket::incoming() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.incoming)
  return _internal_incoming();
}
inline void RtpPacket::set_incoming(bool value) {
  _internal_set_incoming(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.incoming)
}
inline bool RtpPacket::_internal_incoming() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.incoming_;
}
inline void RtpPacket::_internal_set_incoming(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incoming_ = value;
}

// optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
inline bool RtpPacket::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RtpPacket::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::webrtc::rtclog::MediaType RtpPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.type)
  return _internal_type();
}
inline void RtpPacket::set_type(::webrtc::rtclog::MediaType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.type)
}
inline ::webrtc::rtclog::MediaType RtpPacket::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::MediaType>(_impl_.type_);
}
inline void RtpPacket::_internal_set_type(::webrtc::rtclog::MediaType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::MediaType_internal_data_));
                                          _impl_.type_ = value;
}

// optional uint32 packet_length = 3;
inline bool RtpPacket::has_packet_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RtpPacket::clear_packet_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t RtpPacket::packet_length() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.packet_length)
  return _internal_packet_length();
}
inline void RtpPacket::set_packet_length(::uint32_t value) {
  _internal_set_packet_length(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.packet_length)
}
inline ::uint32_t RtpPacket::_internal_packet_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_length_;
}
inline void RtpPacket::_internal_set_packet_length(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_length_ = value;
}

// optional bytes header = 4;
inline bool RtpPacket::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RtpPacket::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtpPacket::header() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.header)
  return _internal_header();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RtpPacket::set_header(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.header)
}
inline std::string* PROTOBUF_NONNULL RtpPacket::mutable_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtpPacket.header)
  return _s;
}
inline const std::string& RtpPacket::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_.Get();
}
inline void RtpPacket::_internal_set_header(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RtpPacket::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.header_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RtpPacket::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtpPacket.header)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.header_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.header_.Set("", GetArena());
  }
  return released;
}
inline void RtpPacket::set_allocated_header(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.header_.IsDefault()) {
    _impl_.header_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtpPacket.header)
}

// optional int32 probe_cluster_id = 5;
inline bool RtpPacket::has_probe_cluster_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RtpPacket::clear_probe_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.probe_cluster_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RtpPacket::probe_cluster_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.probe_cluster_id)
  return _internal_probe_cluster_id();
}
inline void RtpPacket::set_probe_cluster_id(::int32_t value) {
  _internal_set_probe_cluster_id(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.probe_cluster_id)
}
inline ::int32_t RtpPacket::_internal_probe_cluster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.probe_cluster_id_;
}
inline void RtpPacket::_internal_set_probe_cluster_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.probe_cluster_id_ = value;
}

// -------------------------------------------------------------------

// RtcpPacket

// optional bool incoming = 1;
inline bool RtcpPacket::has_incoming() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtcpPacket::clear_incoming() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incoming_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RtcpPacket::incoming() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.incoming)
  return _internal_incoming();
}
inline void RtcpPacket::set_incoming(bool value) {
  _internal_set_incoming(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.incoming)
}
inline bool RtcpPacket::_internal_incoming() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.incoming_;
}
inline void RtcpPacket::_internal_set_incoming(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incoming_ = value;
}

// optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
inline bool RtcpPacket::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RtcpPacket::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::webrtc::rtclog::MediaType RtcpPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.type)
  return _internal_type();
}
inline void RtcpPacket::set_type(::webrtc::rtclog::MediaType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.type)
}
inline ::webrtc::rtclog::MediaType RtcpPacket::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::MediaType>(_impl_.type_);
}
inline void RtcpPacket::_internal_set_type(::webrtc::rtclog::MediaType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::MediaType_internal_data_));
                                          _impl_.type_ = value;
}

// optional bytes packet_data = 3;
inline bool RtcpPacket::has_packet_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RtcpPacket::clear_packet_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtcpPacket::packet_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.packet_data)
  return _internal_packet_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RtcpPacket::set_packet_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.packet_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.packet_data)
}
inline std::string* PROTOBUF_NONNULL RtcpPacket::mutable_packet_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_packet_data();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtcpPacket.packet_data)
  return _s;
}
inline const std::string& RtcpPacket::_internal_packet_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_data_.Get();
}
inline void RtcpPacket::_internal_set_packet_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.packet_data_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RtcpPacket::_internal_mutable_packet_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.packet_data_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RtcpPacket::release_packet_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtcpPacket.packet_data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.packet_data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.packet_data_.Set("", GetArena());
  }
  return released;
}
inline void RtcpPacket::set_allocated_packet_data(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.packet_data_.IsDefault()) {
    _impl_.packet_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtcpPacket.packet_data)
}

// -------------------------------------------------------------------

// AudioPlayoutEvent

// optional uint32 local_ssrc = 2;
inline bool AudioPlayoutEvent::has_local_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AudioPlayoutEvent::clear_local_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t AudioPlayoutEvent::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioPlayoutEvent.local_ssrc)
  return _internal_local_ssrc();
}
inline void AudioPlayoutEvent::set_local_ssrc(::uint32_t value) {
  _internal_set_local_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioPlayoutEvent.local_ssrc)
}
inline ::uint32_t AudioPlayoutEvent::_internal_local_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.local_ssrc_;
}
inline void AudioPlayoutEvent::_internal_set_local_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_ssrc_ = value;
}

// -------------------------------------------------------------------

// LossBasedBweUpdate

// optional int32 bitrate_bps = 1;
inline bool LossBasedBweUpdate::has_bitrate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LossBasedBweUpdate::clear_bitrate_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t LossBasedBweUpdate::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.bitrate_bps)
  return _internal_bitrate_bps();
}
inline void LossBasedBweUpdate::set_bitrate_bps(::int32_t value) {
  _internal_set_bitrate_bps(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.bitrate_bps)
}
inline ::int32_t LossBasedBweUpdate::_internal_bitrate_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_bps_;
}
inline void LossBasedBweUpdate::_internal_set_bitrate_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = value;
}

// optional uint32 fraction_loss = 2;
inline bool LossBasedBweUpdate::has_fraction_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LossBasedBweUpdate::clear_fraction_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_loss_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t LossBasedBweUpdate::fraction_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.fraction_loss)
  return _internal_fraction_loss();
}
inline void LossBasedBweUpdate::set_fraction_loss(::uint32_t value) {
  _internal_set_fraction_loss(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.fraction_loss)
}
inline ::uint32_t LossBasedBweUpdate::_internal_fraction_loss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fraction_loss_;
}
inline void LossBasedBweUpdate::_internal_set_fraction_loss(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_loss_ = value;
}

// optional int32 total_packets = 3;
inline bool LossBasedBweUpdate::has_total_packets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LossBasedBweUpdate::clear_total_packets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t LossBasedBweUpdate::total_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.total_packets)
  return _internal_total_packets();
}
inline void LossBasedBweUpdate::set_total_packets(::int32_t value) {
  _internal_set_total_packets(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.total_packets)
}
inline ::int32_t LossBasedBweUpdate::_internal_total_packets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_packets_;
}
inline void LossBasedBweUpdate::_internal_set_total_packets(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_ = value;
}

// -------------------------------------------------------------------

// DelayBasedBweUpdate

// optional int32 bitrate_bps = 1;
inline bool DelayBasedBweUpdate::has_bitrate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DelayBasedBweUpdate::clear_bitrate_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t DelayBasedBweUpdate::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DelayBasedBweUpdate.bitrate_bps)
  return _internal_bitrate_bps();
}
inline void DelayBasedBweUpdate::set_bitrate_bps(::int32_t value) {
  _internal_set_bitrate_bps(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DelayBasedBweUpdate.bitrate_bps)
}
inline ::int32_t DelayBasedBweUpdate::_internal_bitrate_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_bps_;
}
inline void DelayBasedBweUpdate::_internal_set_bitrate_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = value;
}

// optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
inline bool DelayBasedBweUpdate::has_detector_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DelayBasedBweUpdate::clear_detector_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.detector_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::detector_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DelayBasedBweUpdate.detector_state)
  return _internal_detector_state();
}
inline void DelayBasedBweUpdate::set_detector_state(::webrtc::rtclog::DelayBasedBweUpdate_DetectorState value) {
  _internal_set_detector_state(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DelayBasedBweUpdate.detector_state)
}
inline ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::_internal_detector_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::DelayBasedBweUpdate_DetectorState>(_impl_.detector_state_);
}
inline void DelayBasedBweUpdate::_internal_set_detector_state(::webrtc::rtclog::DelayBasedBweUpdate_DetectorState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState_internal_data_));
                                          _impl_.detector_state_ = value;
}

// -------------------------------------------------------------------

// VideoReceiveConfig

// optional uint32 remote_ssrc = 1;
inline bool VideoReceiveConfig::has_remote_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VideoReceiveConfig::clear_remote_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t VideoReceiveConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.remote_ssrc)
  return _internal_remote_ssrc();
}
inline void VideoReceiveConfig::set_remote_ssrc(::uint32_t value) {
  _internal_set_remote_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.remote_ssrc)
}
inline ::uint32_t VideoReceiveConfig::_internal_remote_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remote_ssrc_;
}
inline void VideoReceiveConfig::_internal_set_remote_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_ssrc_ = value;
}

// optional uint32 local_ssrc = 2;
inline bool VideoReceiveConfig::has_local_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VideoReceiveConfig::clear_local_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VideoReceiveConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.local_ssrc)
  return _internal_local_ssrc();
}
inline void VideoReceiveConfig::set_local_ssrc(::uint32_t value) {
  _internal_set_local_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.local_ssrc)
}
inline ::uint32_t VideoReceiveConfig::_internal_local_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.local_ssrc_;
}
inline void VideoReceiveConfig::_internal_set_local_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_ssrc_ = value;
}

// optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
inline bool VideoReceiveConfig::has_rtcp_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VideoReceiveConfig::clear_rtcp_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtcp_mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::webrtc::rtclog::VideoReceiveConfig_RtcpMode VideoReceiveConfig::rtcp_mode() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.rtcp_mode)
  return _internal_rtcp_mode();
}
inline void VideoReceiveConfig::set_rtcp_mode(::webrtc::rtclog::VideoReceiveConfig_RtcpMode value) {
  _internal_set_rtcp_mode(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.rtcp_mode)
}
inline ::webrtc::rtclog::VideoReceiveConfig_RtcpMode VideoReceiveConfig::_internal_rtcp_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::VideoReceiveConfig_RtcpMode>(_impl_.rtcp_mode_);
}
inline void VideoReceiveConfig::_internal_set_rtcp_mode(::webrtc::rtclog::VideoReceiveConfig_RtcpMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::VideoReceiveConfig_RtcpMode_internal_data_));
                                          _impl_.rtcp_mode_ = value;
}

// optional bool remb = 4;
inline bool VideoReceiveConfig::has_remb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VideoReceiveConfig::clear_remb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remb_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool VideoReceiveConfig::remb() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.remb)
  return _internal_remb();
}
inline void VideoReceiveConfig::set_remb(bool value) {
  _internal_set_remb(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.remb)
}
inline bool VideoReceiveConfig::_internal_remb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remb_;
}
inline void VideoReceiveConfig::_internal_set_remb(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remb_ = value;
}

// repeated .webrtc.rtclog.RtxMap rtx_map = 5;
inline int VideoReceiveConfig::_internal_rtx_map_size() const {
  return _internal_rtx_map().size();
}
inline int VideoReceiveConfig::rtx_map_size() const {
  return _internal_rtx_map_size();
}
inline void VideoReceiveConfig::clear_rtx_map() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_map_.Clear();
}
inline ::webrtc::rtclog::RtxMap* PROTOBUF_NONNULL VideoReceiveConfig::mutable_rtx_map(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return _internal_mutable_rtx_map()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>* PROTOBUF_NONNULL VideoReceiveConfig::mutable_rtx_map()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rtx_map();
}
inline const ::webrtc::rtclog::RtxMap& VideoReceiveConfig::rtx_map(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return _internal_rtx_map().Get(index);
}
inline ::webrtc::rtclog::RtxMap* PROTOBUF_NONNULL VideoReceiveConfig::add_rtx_map()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::rtclog::RtxMap* _add = _internal_mutable_rtx_map()->Add();
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>& VideoReceiveConfig::rtx_map() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return _internal_rtx_map();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>&
VideoReceiveConfig::_internal_rtx_map() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtx_map_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtxMap>* PROTOBUF_NONNULL
VideoReceiveConfig::_internal_mutable_rtx_map() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rtx_map_;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
inline int VideoReceiveConfig::_internal_header_extensions_size() const {
  return _internal_header_extensions().size();
}
inline int VideoReceiveConfig::header_extensions_size() const {
  return _internal_header_extensions_size();
}
inline void VideoReceiveConfig::clear_header_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL VideoReceiveConfig::mutable_header_extensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return _internal_mutable_header_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL VideoReceiveConfig::mutable_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_header_extensions();
}
inline const ::webrtc::rtclog::RtpHeaderExtension& VideoReceiveConfig::header_extensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return _internal_header_extensions().Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL VideoReceiveConfig::add_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::rtclog::RtpHeaderExtension* _add = _internal_mutable_header_extensions()->Add();
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& VideoReceiveConfig::header_extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return _internal_header_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>&
VideoReceiveConfig::_internal_header_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL
VideoReceiveConfig::_internal_mutable_header_extensions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.header_extensions_;
}

// repeated .webrtc.rtclog.DecoderConfig decoders = 7;
inline int VideoReceiveConfig::_internal_decoders_size() const {
  return _internal_decoders().size();
}
inline int VideoReceiveConfig::decoders_size() const {
  return _internal_decoders_size();
}
inline void VideoReceiveConfig::clear_decoders() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decoders_.Clear();
}
inline ::webrtc::rtclog::DecoderConfig* PROTOBUF_NONNULL VideoReceiveConfig::mutable_decoders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.decoders)
  return _internal_mutable_decoders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>* PROTOBUF_NONNULL VideoReceiveConfig::mutable_decoders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.decoders)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_decoders();
}
inline const ::webrtc::rtclog::DecoderConfig& VideoReceiveConfig::decoders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.decoders)
  return _internal_decoders().Get(index);
}
inline ::webrtc::rtclog::DecoderConfig* PROTOBUF_NONNULL VideoReceiveConfig::add_decoders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::rtclog::DecoderConfig* _add = _internal_mutable_decoders()->Add();
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.decoders)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>& VideoReceiveConfig::decoders() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.decoders)
  return _internal_decoders();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>&
VideoReceiveConfig::_internal_decoders() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.decoders_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::DecoderConfig>* PROTOBUF_NONNULL
VideoReceiveConfig::_internal_mutable_decoders() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.decoders_;
}

// -------------------------------------------------------------------

// DecoderConfig

// optional string name = 1;
inline bool DecoderConfig::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DecoderConfig::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DecoderConfig::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DecoderConfig.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DecoderConfig::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DecoderConfig.name)
}
inline std::string* PROTOBUF_NONNULL DecoderConfig::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.DecoderConfig.name)
  return _s;
}
inline const std::string& DecoderConfig::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void DecoderConfig::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DecoderConfig::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DecoderConfig::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.rtclog.DecoderConfig.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void DecoderConfig::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.DecoderConfig.name)
}

// optional int32 payload_type = 2;
inline bool DecoderConfig::has_payload_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DecoderConfig::clear_payload_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t DecoderConfig::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DecoderConfig.payload_type)
  return _internal_payload_type();
}
inline void DecoderConfig::set_payload_type(::int32_t value) {
  _internal_set_payload_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DecoderConfig.payload_type)
}
inline ::int32_t DecoderConfig::_internal_payload_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_type_;
}
inline void DecoderConfig::_internal_set_payload_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = value;
}

// -------------------------------------------------------------------

// RtpHeaderExtension

// optional string name = 1;
inline bool RtpHeaderExtension::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RtpHeaderExtension::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtpHeaderExtension::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpHeaderExtension.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RtpHeaderExtension::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpHeaderExtension.name)
}
inline std::string* PROTOBUF_NONNULL RtpHeaderExtension::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtpHeaderExtension.name)
  return _s;
}
inline const std::string& RtpHeaderExtension::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void RtpHeaderExtension::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RtpHeaderExtension::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RtpHeaderExtension::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtpHeaderExtension.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void RtpHeaderExtension::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtpHeaderExtension.name)
}

// optional int32 id = 2;
inline bool RtpHeaderExtension::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtpHeaderExtension::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t RtpHeaderExtension::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpHeaderExtension.id)
  return _internal_id();
}
inline void RtpHeaderExtension::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpHeaderExtension.id)
}
inline ::int32_t RtpHeaderExtension::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void RtpHeaderExtension::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// RtxConfig

// optional uint32 rtx_ssrc = 1;
inline bool RtxConfig::has_rtx_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RtxConfig::clear_rtx_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t RtxConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxConfig.rtx_ssrc)
  return _internal_rtx_ssrc();
}
inline void RtxConfig::set_rtx_ssrc(::uint32_t value) {
  _internal_set_rtx_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxConfig.rtx_ssrc)
}
inline ::uint32_t RtxConfig::_internal_rtx_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtx_ssrc_;
}
inline void RtxConfig::_internal_set_rtx_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_ssrc_ = value;
}

// optional int32 rtx_payload_type = 2;
inline bool RtxConfig::has_rtx_payload_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtxConfig::clear_rtx_payload_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_payload_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t RtxConfig::rtx_payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxConfig.rtx_payload_type)
  return _internal_rtx_payload_type();
}
inline void RtxConfig::set_rtx_payload_type(::int32_t value) {
  _internal_set_rtx_payload_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxConfig.rtx_payload_type)
}
inline ::int32_t RtxConfig::_internal_rtx_payload_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtx_payload_type_;
}
inline void RtxConfig::_internal_set_rtx_payload_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_payload_type_ = value;
}

// -------------------------------------------------------------------

// RtxMap

// optional int32 payload_type = 1;
inline bool RtxMap::has_payload_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtxMap::clear_payload_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t RtxMap::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxMap.payload_type)
  return _internal_payload_type();
}
inline void RtxMap::set_payload_type(::int32_t value) {
  _internal_set_payload_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxMap.payload_type)
}
inline ::int32_t RtxMap::_internal_payload_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_type_;
}
inline void RtxMap::_internal_set_payload_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = value;
}

// optional .webrtc.rtclog.RtxConfig config = 2;
inline bool RtxMap::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void RtxMap::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::rtclog::RtxConfig& RtxMap::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::webrtc::rtclog::RtxConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::rtclog::RtxConfig&>(::webrtc::rtclog::_RtxConfig_default_instance_);
}
inline const ::webrtc::rtclog::RtxConfig& RtxMap::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxMap.config)
  return _internal_config();
}
inline void RtxMap::unsafe_arena_set_allocated_config(
    ::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::webrtc::rtclog::RtxConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.RtxMap.config)
}
inline ::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE RtxMap::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog::RtxConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE RtxMap::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtxMap.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog::RtxConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::webrtc::rtclog::RtxConfig* PROTOBUF_NONNULL RtxMap::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::RtxConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::webrtc::rtclog::RtxConfig*>(p);
  }
  return _impl_.config_;
}
inline ::webrtc::rtclog::RtxConfig* PROTOBUF_NONNULL RtxMap::mutable_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::webrtc::rtclog::RtxConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtxMap.config)
  return _msg;
}
inline void RtxMap::set_allocated_config(::webrtc::rtclog::RtxConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::webrtc::rtclog::RtxConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtxMap.config)
}

// -------------------------------------------------------------------

// VideoSendConfig

// repeated uint32 ssrcs = 1;
inline int VideoSendConfig::_internal_ssrcs_size() const {
  return _internal_ssrcs().size();
}
inline int VideoSendConfig::ssrcs_size() const {
  return _internal_ssrcs_size();
}
inline void VideoSendConfig::clear_ssrcs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ssrcs_.Clear();
}
inline ::uint32_t VideoSendConfig::ssrcs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.ssrcs)
  return _internal_ssrcs().Get(index);
}
inline void VideoSendConfig::set_ssrcs(int index, ::uint32_t value) {
  _internal_mutable_ssrcs()->Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.ssrcs)
}
inline void VideoSendConfig::add_ssrcs(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ssrcs()->Add(value);
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.ssrcs)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& VideoSendConfig::ssrcs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.ssrcs)
  return _internal_ssrcs();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL VideoSendConfig::mutable_ssrcs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.ssrcs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ssrcs();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
VideoSendConfig::_internal_ssrcs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ssrcs_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL
VideoSendConfig::_internal_mutable_ssrcs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ssrcs_;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
inline int VideoSendConfig::_internal_header_extensions_size() const {
  return _internal_header_extensions().size();
}
inline int VideoSendConfig::header_extensions_size() const {
  return _internal_header_extensions_size();
}
inline void VideoSendConfig::clear_header_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL VideoSendConfig::mutable_header_extensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoSendConfig.header_extensions)
  return _internal_mutable_header_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL VideoSendConfig::mutable_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.header_extensions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_header_extensions();
}
inline const ::webrtc::rtclog::RtpHeaderExtension& VideoSendConfig::header_extensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.header_extensions)
  return _internal_header_extensions().Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL VideoSendConfig::add_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::rtclog::RtpHeaderExtension* _add = _internal_mutable_header_extensions()->Add();
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.header_extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& VideoSendConfig::header_extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.header_extensions)
  return _internal_header_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>&
VideoSendConfig::_internal_header_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL
VideoSendConfig::_internal_mutable_header_extensions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.header_extensions_;
}

// repeated uint32 rtx_ssrcs = 3;
inline int VideoSendConfig::_internal_rtx_ssrcs_size() const {
  return _internal_rtx_ssrcs().size();
}
inline int VideoSendConfig::rtx_ssrcs_size() const {
  return _internal_rtx_ssrcs_size();
}
inline void VideoSendConfig::clear_rtx_ssrcs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_ssrcs_.Clear();
}
inline ::uint32_t VideoSendConfig::rtx_ssrcs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return _internal_rtx_ssrcs().Get(index);
}
inline void VideoSendConfig::set_rtx_ssrcs(int index, ::uint32_t value) {
  _internal_mutable_rtx_ssrcs()->Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
}
inline void VideoSendConfig::add_rtx_ssrcs(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rtx_ssrcs()->Add(value);
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& VideoSendConfig::rtx_ssrcs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return _internal_rtx_ssrcs();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL VideoSendConfig::mutable_rtx_ssrcs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rtx_ssrcs();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
VideoSendConfig::_internal_rtx_ssrcs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtx_ssrcs_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL
VideoSendConfig::_internal_mutable_rtx_ssrcs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rtx_ssrcs_;
}

// optional int32 rtx_payload_type = 4;
inline bool VideoSendConfig::has_rtx_payload_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VideoSendConfig::clear_rtx_payload_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_payload_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t VideoSendConfig::rtx_payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.rtx_payload_type)
  return _internal_rtx_payload_type();
}
inline void VideoSendConfig::set_rtx_payload_type(::int32_t value) {
  _internal_set_rtx_payload_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.rtx_payload_type)
}
inline ::int32_t VideoSendConfig::_internal_rtx_payload_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtx_payload_type_;
}
inline void VideoSendConfig::_internal_set_rtx_payload_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtx_payload_type_ = value;
}

// optional .webrtc.rtclog.EncoderConfig encoder = 5;
inline bool VideoSendConfig::has_encoder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.encoder_ != nullptr);
  return value;
}
inline void VideoSendConfig::clear_encoder() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.encoder_ != nullptr) _impl_.encoder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::rtclog::EncoderConfig& VideoSendConfig::_internal_encoder() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::webrtc::rtclog::EncoderConfig* p = _impl_.encoder_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::rtclog::EncoderConfig&>(::webrtc::rtclog::_EncoderConfig_default_instance_);
}
inline const ::webrtc::rtclog::EncoderConfig& VideoSendConfig::encoder() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.encoder)
  return _internal_encoder();
}
inline void VideoSendConfig::unsafe_arena_set_allocated_encoder(
    ::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.encoder_);
  }
  _impl_.encoder_ = reinterpret_cast<::webrtc::rtclog::EncoderConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.rtclog.VideoSendConfig.encoder)
}
inline ::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE VideoSendConfig::release_encoder() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog::EncoderConfig* released = _impl_.encoder_;
  _impl_.encoder_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE VideoSendConfig::unsafe_arena_release_encoder() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.rtclog.VideoSendConfig.encoder)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::rtclog::EncoderConfig* temp = _impl_.encoder_;
  _impl_.encoder_ = nullptr;
  return temp;
}
inline ::webrtc::rtclog::EncoderConfig* PROTOBUF_NONNULL VideoSendConfig::_internal_mutable_encoder() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.encoder_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::rtclog::EncoderConfig>(GetArena());
    _impl_.encoder_ = reinterpret_cast<::webrtc::rtclog::EncoderConfig*>(p);
  }
  return _impl_.encoder_;
}
inline ::webrtc::rtclog::EncoderConfig* PROTOBUF_NONNULL VideoSendConfig::mutable_encoder()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::webrtc::rtclog::EncoderConfig* _msg = _internal_mutable_encoder();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoSendConfig.encoder)
  return _msg;
}
inline void VideoSendConfig::set_allocated_encoder(::webrtc::rtclog::EncoderConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.encoder_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.encoder_ = reinterpret_cast<::webrtc::rtclog::EncoderConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.VideoSendConfig.encoder)
}

// -------------------------------------------------------------------

// EncoderConfig

// optional string name = 1;
inline bool EncoderConfig::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EncoderConfig::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncoderConfig::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EncoderConfig.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void EncoderConfig::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.rtclog.EncoderConfig.name)
}
inline std::string* PROTOBUF_NONNULL EncoderConfig::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.EncoderConfig.name)
  return _s;
}
inline const std::string& EncoderConfig::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void EncoderConfig::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL EncoderConfig::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE EncoderConfig::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.rtclog.EncoderConfig.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void EncoderConfig::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.EncoderConfig.name)
}

// optional int32 payload_type = 2;
inline bool EncoderConfig::has_payload_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EncoderConfig::clear_payload_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t EncoderConfig::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EncoderConfig.payload_type)
  return _internal_payload_type();
}
inline void EncoderConfig::set_payload_type(::int32_t value) {
  _internal_set_payload_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.EncoderConfig.payload_type)
}
inline ::int32_t EncoderConfig::_internal_payload_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_type_;
}
inline void EncoderConfig::_internal_set_payload_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_type_ = value;
}

// -------------------------------------------------------------------

// AudioReceiveConfig

// optional uint32 remote_ssrc = 1;
inline bool AudioReceiveConfig::has_remote_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AudioReceiveConfig::clear_remote_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t AudioReceiveConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.remote_ssrc)
  return _internal_remote_ssrc();
}
inline void AudioReceiveConfig::set_remote_ssrc(::uint32_t value) {
  _internal_set_remote_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioReceiveConfig.remote_ssrc)
}
inline ::uint32_t AudioReceiveConfig::_internal_remote_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remote_ssrc_;
}
inline void AudioReceiveConfig::_internal_set_remote_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_ssrc_ = value;
}

// optional uint32 local_ssrc = 2;
inline bool AudioReceiveConfig::has_local_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AudioReceiveConfig::clear_local_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t AudioReceiveConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.local_ssrc)
  return _internal_local_ssrc();
}
inline void AudioReceiveConfig::set_local_ssrc(::uint32_t value) {
  _internal_set_local_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioReceiveConfig.local_ssrc)
}
inline ::uint32_t AudioReceiveConfig::_internal_local_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.local_ssrc_;
}
inline void AudioReceiveConfig::_internal_set_local_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_ssrc_ = value;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
inline int AudioReceiveConfig::_internal_header_extensions_size() const {
  return _internal_header_extensions().size();
}
inline int AudioReceiveConfig::header_extensions_size() const {
  return _internal_header_extensions_size();
}
inline void AudioReceiveConfig::clear_header_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL AudioReceiveConfig::mutable_header_extensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return _internal_mutable_header_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL AudioReceiveConfig::mutable_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_header_extensions();
}
inline const ::webrtc::rtclog::RtpHeaderExtension& AudioReceiveConfig::header_extensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return _internal_header_extensions().Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL AudioReceiveConfig::add_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::rtclog::RtpHeaderExtension* _add = _internal_mutable_header_extensions()->Add();
  // @@protoc_insertion_point(field_add:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& AudioReceiveConfig::header_extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return _internal_header_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>&
AudioReceiveConfig::_internal_header_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL
AudioReceiveConfig::_internal_mutable_header_extensions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.header_extensions_;
}

// -------------------------------------------------------------------

// AudioSendConfig

// optional uint32 ssrc = 1;
inline bool AudioSendConfig::has_ssrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AudioSendConfig::clear_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t AudioSendConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioSendConfig.ssrc)
  return _internal_ssrc();
}
inline void AudioSendConfig::set_ssrc(::uint32_t value) {
  _internal_set_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioSendConfig.ssrc)
}
inline ::uint32_t AudioSendConfig::_internal_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ssrc_;
}
inline void AudioSendConfig::_internal_set_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ssrc_ = value;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
inline int AudioSendConfig::_internal_header_extensions_size() const {
  return _internal_header_extensions().size();
}
inline int AudioSendConfig::header_extensions_size() const {
  return _internal_header_extensions_size();
}
inline void AudioSendConfig::clear_header_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL AudioSendConfig::mutable_header_extensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.AudioSendConfig.header_extensions)
  return _internal_mutable_header_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL AudioSendConfig::mutable_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.AudioSendConfig.header_extensions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_header_extensions();
}
inline const ::webrtc::rtclog::RtpHeaderExtension& AudioSendConfig::header_extensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioSendConfig.header_extensions)
  return _internal_header_extensions().Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* PROTOBUF_NONNULL AudioSendConfig::add_header_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::rtclog::RtpHeaderExtension* _add = _internal_mutable_header_extensions()->Add();
  // @@protoc_insertion_point(field_add:webrtc.rtclog.AudioSendConfig.header_extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>& AudioSendConfig::header_extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.AudioSendConfig.header_extensions)
  return _internal_header_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>&
AudioSendConfig::_internal_header_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::rtclog::RtpHeaderExtension>* PROTOBUF_NONNULL
AudioSendConfig::_internal_mutable_header_extensions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.header_extensions_;
}

// -------------------------------------------------------------------

// AudioNetworkAdaptation

// optional int32 bitrate_bps = 1;
inline bool AudioNetworkAdaptation::has_bitrate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AudioNetworkAdaptation::clear_bitrate_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t AudioNetworkAdaptation::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.bitrate_bps)
  return _internal_bitrate_bps();
}
inline void AudioNetworkAdaptation::set_bitrate_bps(::int32_t value) {
  _internal_set_bitrate_bps(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.bitrate_bps)
}
inline ::int32_t AudioNetworkAdaptation::_internal_bitrate_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_bps_;
}
inline void AudioNetworkAdaptation::_internal_set_bitrate_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = value;
}

// optional int32 frame_length_ms = 2;
inline bool AudioNetworkAdaptation::has_frame_length_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AudioNetworkAdaptation::clear_frame_length_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_length_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AudioNetworkAdaptation::frame_length_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.frame_length_ms)
  return _internal_frame_length_ms();
}
inline void AudioNetworkAdaptation::set_frame_length_ms(::int32_t value) {
  _internal_set_frame_length_ms(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.frame_length_ms)
}
inline ::int32_t AudioNetworkAdaptation::_internal_frame_length_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_length_ms_;
}
inline void AudioNetworkAdaptation::_internal_set_frame_length_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_length_ms_ = value;
}

// optional float uplink_packet_loss_fraction = 3;
inline bool AudioNetworkAdaptation::has_uplink_packet_loss_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AudioNetworkAdaptation::clear_uplink_packet_loss_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_packet_loss_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float AudioNetworkAdaptation::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.uplink_packet_loss_fraction)
  return _internal_uplink_packet_loss_fraction();
}
inline void AudioNetworkAdaptation::set_uplink_packet_loss_fraction(float value) {
  _internal_set_uplink_packet_loss_fraction(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.uplink_packet_loss_fraction)
}
inline float AudioNetworkAdaptation::_internal_uplink_packet_loss_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uplink_packet_loss_fraction_;
}
inline void AudioNetworkAdaptation::_internal_set_uplink_packet_loss_fraction(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_packet_loss_fraction_ = value;
}

// optional bool enable_fec = 4;
inline bool AudioNetworkAdaptation::has_enable_fec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AudioNetworkAdaptation::clear_enable_fec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_fec_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool AudioNetworkAdaptation::enable_fec() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.enable_fec)
  return _internal_enable_fec();
}
inline void AudioNetworkAdaptation::set_enable_fec(bool value) {
  _internal_set_enable_fec(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.enable_fec)
}
inline bool AudioNetworkAdaptation::_internal_enable_fec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_fec_;
}
inline void AudioNetworkAdaptation::_internal_set_enable_fec(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_fec_ = value;
}

// optional bool enable_dtx = 5;
inline bool AudioNetworkAdaptation::has_enable_dtx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AudioNetworkAdaptation::clear_enable_dtx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dtx_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool AudioNetworkAdaptation::enable_dtx() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.enable_dtx)
  return _internal_enable_dtx();
}
inline void AudioNetworkAdaptation::set_enable_dtx(bool value) {
  _internal_set_enable_dtx(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.enable_dtx)
}
inline bool AudioNetworkAdaptation::_internal_enable_dtx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_dtx_;
}
inline void AudioNetworkAdaptation::_internal_set_enable_dtx(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dtx_ = value;
}

// optional uint32 num_channels = 6;
inline bool AudioNetworkAdaptation::has_num_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void AudioNetworkAdaptation::clear_num_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_channels_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t AudioNetworkAdaptation::num_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.num_channels)
  return _internal_num_channels();
}
inline void AudioNetworkAdaptation::set_num_channels(::uint32_t value) {
  _internal_set_num_channels(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.num_channels)
}
inline ::uint32_t AudioNetworkAdaptation::_internal_num_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_channels_;
}
inline void AudioNetworkAdaptation::_internal_set_num_channels(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_channels_ = value;
}

// -------------------------------------------------------------------

// BweProbeCluster

// optional int32 id = 1;
inline bool BweProbeCluster::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BweProbeCluster::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t BweProbeCluster::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.id)
  return _internal_id();
}
inline void BweProbeCluster::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.id)
}
inline ::int32_t BweProbeCluster::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void BweProbeCluster::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional int32 bitrate_bps = 2;
inline bool BweProbeCluster::has_bitrate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BweProbeCluster::clear_bitrate_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t BweProbeCluster::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.bitrate_bps)
  return _internal_bitrate_bps();
}
inline void BweProbeCluster::set_bitrate_bps(::int32_t value) {
  _internal_set_bitrate_bps(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.bitrate_bps)
}
inline ::int32_t BweProbeCluster::_internal_bitrate_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_bps_;
}
inline void BweProbeCluster::_internal_set_bitrate_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = value;
}

// optional uint32 min_packets = 3;
inline bool BweProbeCluster::has_min_packets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BweProbeCluster::clear_min_packets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_packets_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t BweProbeCluster::min_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.min_packets)
  return _internal_min_packets();
}
inline void BweProbeCluster::set_min_packets(::uint32_t value) {
  _internal_set_min_packets(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.min_packets)
}
inline ::uint32_t BweProbeCluster::_internal_min_packets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_packets_;
}
inline void BweProbeCluster::_internal_set_min_packets(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_packets_ = value;
}

// optional uint32 min_bytes = 4;
inline bool BweProbeCluster::has_min_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BweProbeCluster::clear_min_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_bytes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t BweProbeCluster::min_bytes() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.min_bytes)
  return _internal_min_bytes();
}
inline void BweProbeCluster::set_min_bytes(::uint32_t value) {
  _internal_set_min_bytes(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.min_bytes)
}
inline ::uint32_t BweProbeCluster::_internal_min_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_bytes_;
}
inline void BweProbeCluster::_internal_set_min_bytes(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_bytes_ = value;
}

// -------------------------------------------------------------------

// BweProbeResult

// optional int32 id = 1;
inline bool BweProbeResult::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BweProbeResult::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t BweProbeResult::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.id)
  return _internal_id();
}
inline void BweProbeResult::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.id)
}
inline ::int32_t BweProbeResult::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void BweProbeResult::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
inline bool BweProbeResult::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BweProbeResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::rtclog::BweProbeResult_ResultType BweProbeResult::result() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.result)
  return _internal_result();
}
inline void BweProbeResult::set_result(::webrtc::rtclog::BweProbeResult_ResultType value) {
  _internal_set_result(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.result)
}
inline ::webrtc::rtclog::BweProbeResult_ResultType BweProbeResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::BweProbeResult_ResultType>(_impl_.result_);
}
inline void BweProbeResult::_internal_set_result(::webrtc::rtclog::BweProbeResult_ResultType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::BweProbeResult_ResultType_internal_data_));
                                          _impl_.result_ = value;
}

// optional int32 bitrate_bps = 3;
inline bool BweProbeResult::has_bitrate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BweProbeResult::clear_bitrate_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t BweProbeResult::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.bitrate_bps)
  return _internal_bitrate_bps();
}
inline void BweProbeResult::set_bitrate_bps(::int32_t value) {
  _internal_set_bitrate_bps(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.bitrate_bps)
}
inline ::int32_t BweProbeResult::_internal_bitrate_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_bps_;
}
inline void BweProbeResult::_internal_set_bitrate_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = value;
}

// -------------------------------------------------------------------

// RemoteEstimate

// optional uint32 link_capacity_lower_kbps = 1;
inline bool RemoteEstimate::has_link_capacity_lower_kbps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RemoteEstimate::clear_link_capacity_lower_kbps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link_capacity_lower_kbps_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t RemoteEstimate::link_capacity_lower_kbps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RemoteEstimate.link_capacity_lower_kbps)
  return _internal_link_capacity_lower_kbps();
}
inline void RemoteEstimate::set_link_capacity_lower_kbps(::uint32_t value) {
  _internal_set_link_capacity_lower_kbps(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RemoteEstimate.link_capacity_lower_kbps)
}
inline ::uint32_t RemoteEstimate::_internal_link_capacity_lower_kbps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.link_capacity_lower_kbps_;
}
inline void RemoteEstimate::_internal_set_link_capacity_lower_kbps(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link_capacity_lower_kbps_ = value;
}

// optional uint32 link_capacity_upper_kbps = 2;
inline bool RemoteEstimate::has_link_capacity_upper_kbps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RemoteEstimate::clear_link_capacity_upper_kbps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link_capacity_upper_kbps_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RemoteEstimate::link_capacity_upper_kbps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RemoteEstimate.link_capacity_upper_kbps)
  return _internal_link_capacity_upper_kbps();
}
inline void RemoteEstimate::set_link_capacity_upper_kbps(::uint32_t value) {
  _internal_set_link_capacity_upper_kbps(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RemoteEstimate.link_capacity_upper_kbps)
}
inline ::uint32_t RemoteEstimate::_internal_link_capacity_upper_kbps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.link_capacity_upper_kbps_;
}
inline void RemoteEstimate::_internal_set_link_capacity_upper_kbps(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link_capacity_upper_kbps_ = value;
}

// -------------------------------------------------------------------

// AlrState

// optional bool in_alr = 1;
inline bool AlrState::has_in_alr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AlrState::clear_in_alr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_alr_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AlrState::in_alr() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AlrState.in_alr)
  return _internal_in_alr();
}
inline void AlrState::set_in_alr(bool value) {
  _internal_set_in_alr(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AlrState.in_alr)
}
inline bool AlrState::_internal_in_alr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.in_alr_;
}
inline void AlrState::_internal_set_in_alr(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_alr_ = value;
}

// -------------------------------------------------------------------

// IceCandidatePairConfig

// optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
inline bool IceCandidatePairConfig::has_config_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_config_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::config_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.config_type)
  return _internal_config_type();
}
inline void IceCandidatePairConfig::set_config_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType value) {
  _internal_set_config_type(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.config_type)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::_internal_config_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType>(_impl_.config_type_);
}
inline void IceCandidatePairConfig::_internal_set_config_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType_internal_data_));
                                          _impl_.config_type_ = value;
}

// optional uint32 candidate_pair_id = 2;
inline bool IceCandidatePairConfig::has_candidate_pair_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_candidate_pair_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_pair_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t IceCandidatePairConfig::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_id)
  return _internal_candidate_pair_id();
}
inline void IceCandidatePairConfig::set_candidate_pair_id(::uint32_t value) {
  _internal_set_candidate_pair_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_id)
}
inline ::uint32_t IceCandidatePairConfig::_internal_candidate_pair_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.candidate_pair_id_;
}
inline void IceCandidatePairConfig::_internal_set_candidate_pair_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_pair_id_ = value;
}

// optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
inline bool IceCandidatePairConfig::has_local_candidate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_local_candidate_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_candidate_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::local_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_candidate_type)
  return _internal_local_candidate_type();
}
inline void IceCandidatePairConfig::set_local_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value) {
  _internal_set_local_candidate_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_candidate_type)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::_internal_local_candidate_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType>(_impl_.local_candidate_type_);
}
inline void IceCandidatePairConfig::_internal_set_local_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType_internal_data_));
                                          _impl_.local_candidate_type_ = value;
}

// optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
inline bool IceCandidatePairConfig::has_local_relay_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_local_relay_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_relay_protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_Protocol IceCandidatePairConfig::local_relay_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_relay_protocol)
  return _internal_local_relay_protocol();
}
inline void IceCandidatePairConfig::set_local_relay_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value) {
  _internal_set_local_relay_protocol(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_relay_protocol)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_Protocol IceCandidatePairConfig::_internal_local_relay_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_Protocol>(_impl_.local_relay_protocol_);
}
inline void IceCandidatePairConfig::_internal_set_local_relay_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_Protocol_internal_data_));
                                          _impl_.local_relay_protocol_ = value;
}

// optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
inline bool IceCandidatePairConfig::has_local_network_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_local_network_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_network_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_NetworkType IceCandidatePairConfig::local_network_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_network_type)
  return _internal_local_network_type();
}
inline void IceCandidatePairConfig::set_local_network_type(::webrtc::rtclog::IceCandidatePairConfig_NetworkType value) {
  _internal_set_local_network_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_network_type)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_NetworkType IceCandidatePairConfig::_internal_local_network_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_NetworkType>(_impl_.local_network_type_);
}
inline void IceCandidatePairConfig::_internal_set_local_network_type(::webrtc::rtclog::IceCandidatePairConfig_NetworkType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_NetworkType_internal_data_));
                                          _impl_.local_network_type_ = value;
}

// optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
inline bool IceCandidatePairConfig::has_local_address_family() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_local_address_family() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.local_address_family_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::local_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_address_family)
  return _internal_local_address_family();
}
inline void IceCandidatePairConfig::set_local_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value) {
  _internal_set_local_address_family(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_address_family)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::_internal_local_address_family() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_AddressFamily>(_impl_.local_address_family_);
}
inline void IceCandidatePairConfig::_internal_set_local_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily_internal_data_));
                                          _impl_.local_address_family_ = value;
}

// optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
inline bool IceCandidatePairConfig::has_remote_candidate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_remote_candidate_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_candidate_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::remote_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.remote_candidate_type)
  return _internal_remote_candidate_type();
}
inline void IceCandidatePairConfig::set_remote_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value) {
  _internal_set_remote_candidate_type(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.remote_candidate_type)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::_internal_remote_candidate_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType>(_impl_.remote_candidate_type_);
}
inline void IceCandidatePairConfig::_internal_set_remote_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType_internal_data_));
                                          _impl_.remote_candidate_type_ = value;
}

// optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
inline bool IceCandidatePairConfig::has_remote_address_family() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_remote_address_family() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remote_address_family_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::remote_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.remote_address_family)
  return _internal_remote_address_family();
}
inline void IceCandidatePairConfig::set_remote_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value) {
  _internal_set_remote_address_family(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.remote_address_family)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::_internal_remote_address_family() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_AddressFamily>(_impl_.remote_address_family_);
}
inline void IceCandidatePairConfig::_internal_set_remote_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily_internal_data_));
                                          _impl_.remote_address_family_ = value;
}

// optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
inline bool IceCandidatePairConfig::has_candidate_pair_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void IceCandidatePairConfig::clear_candidate_pair_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_pair_protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::webrtc::rtclog::IceCandidatePairConfig_Protocol IceCandidatePairConfig::candidate_pair_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_protocol)
  return _internal_candidate_pair_protocol();
}
inline void IceCandidatePairConfig::set_candidate_pair_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value) {
  _internal_set_candidate_pair_protocol(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_protocol)
}
inline ::webrtc::rtclog::IceCandidatePairConfig_Protocol IceCandidatePairConfig::_internal_candidate_pair_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairConfig_Protocol>(_impl_.candidate_pair_protocol_);
}
inline void IceCandidatePairConfig::_internal_set_candidate_pair_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairConfig_Protocol_internal_data_));
                                          _impl_.candidate_pair_protocol_ = value;
}

// -------------------------------------------------------------------

// IceCandidatePairEvent

// optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
inline bool IceCandidatePairEvent::has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IceCandidatePairEvent::clear_event_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::event_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairEvent.event_type)
  return _internal_event_type();
}
inline void IceCandidatePairEvent::set_event_type(::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType value) {
  _internal_set_event_type(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairEvent.event_type)
}
inline ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::_internal_event_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType>(_impl_.event_type_);
}
inline void IceCandidatePairEvent::_internal_set_event_type(::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType_internal_data_));
                                          _impl_.event_type_ = value;
}

// optional uint32 candidate_pair_id = 2;
inline bool IceCandidatePairEvent::has_candidate_pair_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IceCandidatePairEvent::clear_candidate_pair_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_pair_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t IceCandidatePairEvent::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairEvent.candidate_pair_id)
  return _internal_candidate_pair_id();
}
inline void IceCandidatePairEvent::set_candidate_pair_id(::uint32_t value) {
  _internal_set_candidate_pair_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairEvent.candidate_pair_id)
}
inline ::uint32_t IceCandidatePairEvent::_internal_candidate_pair_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.candidate_pair_id_;
}
inline void IceCandidatePairEvent::_internal_set_candidate_pair_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_pair_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rtclog
}  // namespace webrtc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::webrtc::rtclog::Event_EventType> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::DelayBasedBweUpdate_DetectorState> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::VideoReceiveConfig_RtcpMode> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::BweProbeResult_ResultType> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::IceCandidatePairConfig_Protocol> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::IceCandidatePairConfig_AddressFamily> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::IceCandidatePairConfig_NetworkType> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::rtclog::MediaType> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // rtc_5fevent_5flog_2eproto_2epb_2eh
