// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: debug_dump.proto
// Protobuf C++ Version: 6.30.1

#ifndef debug_5fdump_2eproto_2epb_2eh
#define debug_5fdump_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
#include "config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_debug_5fdump_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_debug_5fdump_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {
enum Event_Type : int;
extern const uint32_t Event_Type_internal_data_[];
class EncoderRuntimeConfig;
struct EncoderRuntimeConfigDefaultTypeInternal;
extern EncoderRuntimeConfigDefaultTypeInternal _EncoderRuntimeConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<61> EncoderRuntimeConfig_class_data_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<46> Event_class_data_;
class NetworkMetrics;
struct NetworkMetricsDefaultTypeInternal;
extern NetworkMetricsDefaultTypeInternal _NetworkMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<55> NetworkMetrics_class_data_;
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::webrtc::audio_network_adaptor::debug_dump::Event_Type_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::audio_network_adaptor::debug_dump::Event_Type>;
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {
enum Event_Type : int {
  Event_Type_NETWORK_METRICS = 0,
  Event_Type_ENCODER_RUNTIME_CONFIG = 1,
  Event_Type_CONTROLLER_MANAGER_CONFIG = 2,
};

extern const uint32_t Event_Type_internal_data_[];
inline constexpr Event_Type Event_Type_Type_MIN =
    static_cast<Event_Type>(0);
inline constexpr Event_Type Event_Type_Type_MAX =
    static_cast<Event_Type>(2);
inline bool Event_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Event_Type_Type_ARRAYSIZE = 2 + 1;
const std::string& Event_Type_Name(Event_Type value);
template <typename T>
const std::string& Event_Type_Name(T value) {
  static_assert(std::is_same<T, Event_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Event_Type_Name(static_cast<Event_Type>(value));
}
bool Event_Type_Parse(
    absl::string_view name, Event_Type* PROTOBUF_NONNULL value);

// ===================================================================


// -------------------------------------------------------------------

class NetworkMetrics final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics) */ {
 public:
  inline NetworkMetrics() : NetworkMetrics(nullptr) {}
  ~NetworkMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkMetrics(::google::protobuf::internal::ConstantInitialized);

  inline NetworkMetrics(const NetworkMetrics& from) : NetworkMetrics(nullptr, from) {}
  inline NetworkMetrics(NetworkMetrics&& from) noexcept
      : NetworkMetrics(nullptr, std::move(from)) {}
  inline NetworkMetrics& operator=(const NetworkMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkMetrics& operator=(NetworkMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkMetrics& default_instance() {
    return *reinterpret_cast<const NetworkMetrics*>(
        &_NetworkMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NetworkMetrics& a, NetworkMetrics& b) { a.Swap(&b); }
  inline void Swap(NetworkMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<NetworkMetrics>(arena);
  }
  void CopyFrom(const NetworkMetrics& from);
  void MergeFrom(const NetworkMetrics& from) { NetworkMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audio_network_adaptor.debug_dump.NetworkMetrics"; }

 protected:
  explicit NetworkMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NetworkMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NetworkMetrics& from);
  NetworkMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NetworkMetrics&& from) noexcept
      : NetworkMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUplinkBandwidthBpsFieldNumber = 1,
    kUplinkPacketLossFractionFieldNumber = 2,
    kTargetAudioBitrateBpsFieldNumber = 3,
    kRttMsFieldNumber = 4,
    kUplinkRecoverablePacketLossFractionFieldNumber = 5,
  };
  // optional int32 uplink_bandwidth_bps = 1;
  bool has_uplink_bandwidth_bps() const;
  void clear_uplink_bandwidth_bps() ;
  ::int32_t uplink_bandwidth_bps() const;
  void set_uplink_bandwidth_bps(::int32_t value);

  private:
  ::int32_t _internal_uplink_bandwidth_bps() const;
  void _internal_set_uplink_bandwidth_bps(::int32_t value);

  public:
  // optional float uplink_packet_loss_fraction = 2;
  bool has_uplink_packet_loss_fraction() const;
  void clear_uplink_packet_loss_fraction() ;
  float uplink_packet_loss_fraction() const;
  void set_uplink_packet_loss_fraction(float value);

  private:
  float _internal_uplink_packet_loss_fraction() const;
  void _internal_set_uplink_packet_loss_fraction(float value);

  public:
  // optional int32 target_audio_bitrate_bps = 3;
  bool has_target_audio_bitrate_bps() const;
  void clear_target_audio_bitrate_bps() ;
  ::int32_t target_audio_bitrate_bps() const;
  void set_target_audio_bitrate_bps(::int32_t value);

  private:
  ::int32_t _internal_target_audio_bitrate_bps() const;
  void _internal_set_target_audio_bitrate_bps(::int32_t value);

  public:
  // optional int32 rtt_ms = 4;
  bool has_rtt_ms() const;
  void clear_rtt_ms() ;
  ::int32_t rtt_ms() const;
  void set_rtt_ms(::int32_t value);

  private:
  ::int32_t _internal_rtt_ms() const;
  void _internal_set_rtt_ms(::int32_t value);

  public:
  // optional int32 uplink_recoverable_packet_loss_fraction = 5;
  bool has_uplink_recoverable_packet_loss_fraction() const;
  void clear_uplink_recoverable_packet_loss_fraction() ;
  ::int32_t uplink_recoverable_packet_loss_fraction() const;
  void set_uplink_recoverable_packet_loss_fraction(::int32_t value);

  private:
  ::int32_t _internal_uplink_recoverable_packet_loss_fraction() const;
  void _internal_set_uplink_recoverable_packet_loss_fraction(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NetworkMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t uplink_bandwidth_bps_;
    float uplink_packet_loss_fraction_;
    ::int32_t target_audio_bitrate_bps_;
    ::int32_t rtt_ms_;
    ::int32_t uplink_recoverable_packet_loss_fraction_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fdump_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<55> NetworkMetrics_class_data_;
// -------------------------------------------------------------------

class EncoderRuntimeConfig final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig) */ {
 public:
  inline EncoderRuntimeConfig() : EncoderRuntimeConfig(nullptr) {}
  ~EncoderRuntimeConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EncoderRuntimeConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EncoderRuntimeConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EncoderRuntimeConfig(::google::protobuf::internal::ConstantInitialized);

  inline EncoderRuntimeConfig(const EncoderRuntimeConfig& from) : EncoderRuntimeConfig(nullptr, from) {}
  inline EncoderRuntimeConfig(EncoderRuntimeConfig&& from) noexcept
      : EncoderRuntimeConfig(nullptr, std::move(from)) {}
  inline EncoderRuntimeConfig& operator=(const EncoderRuntimeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncoderRuntimeConfig& operator=(EncoderRuntimeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EncoderRuntimeConfig& default_instance() {
    return *reinterpret_cast<const EncoderRuntimeConfig*>(
        &_EncoderRuntimeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EncoderRuntimeConfig& a, EncoderRuntimeConfig& b) { a.Swap(&b); }
  inline void Swap(EncoderRuntimeConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncoderRuntimeConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncoderRuntimeConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<EncoderRuntimeConfig>(arena);
  }
  void CopyFrom(const EncoderRuntimeConfig& from);
  void MergeFrom(const EncoderRuntimeConfig& from) { EncoderRuntimeConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EncoderRuntimeConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig"; }

 protected:
  explicit EncoderRuntimeConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EncoderRuntimeConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EncoderRuntimeConfig& from);
  EncoderRuntimeConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EncoderRuntimeConfig&& from) noexcept
      : EncoderRuntimeConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBitrateBpsFieldNumber = 1,
    kFrameLengthMsFieldNumber = 2,
    kUplinkPacketLossFractionFieldNumber = 3,
    kEnableFecFieldNumber = 4,
    kEnableDtxFieldNumber = 5,
    kNumChannelsFieldNumber = 6,
  };
  // optional int32 bitrate_bps = 1;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps() ;
  ::int32_t bitrate_bps() const;
  void set_bitrate_bps(::int32_t value);

  private:
  ::int32_t _internal_bitrate_bps() const;
  void _internal_set_bitrate_bps(::int32_t value);

  public:
  // optional int32 frame_length_ms = 2;
  bool has_frame_length_ms() const;
  void clear_frame_length_ms() ;
  ::int32_t frame_length_ms() const;
  void set_frame_length_ms(::int32_t value);

  private:
  ::int32_t _internal_frame_length_ms() const;
  void _internal_set_frame_length_ms(::int32_t value);

  public:
  // optional float uplink_packet_loss_fraction = 3;
  bool has_uplink_packet_loss_fraction() const;
  void clear_uplink_packet_loss_fraction() ;
  float uplink_packet_loss_fraction() const;
  void set_uplink_packet_loss_fraction(float value);

  private:
  float _internal_uplink_packet_loss_fraction() const;
  void _internal_set_uplink_packet_loss_fraction(float value);

  public:
  // optional bool enable_fec = 4;
  bool has_enable_fec() const;
  void clear_enable_fec() ;
  bool enable_fec() const;
  void set_enable_fec(bool value);

  private:
  bool _internal_enable_fec() const;
  void _internal_set_enable_fec(bool value);

  public:
  // optional bool enable_dtx = 5;
  bool has_enable_dtx() const;
  void clear_enable_dtx() ;
  bool enable_dtx() const;
  void set_enable_dtx(bool value);

  private:
  bool _internal_enable_dtx() const;
  void _internal_set_enable_dtx(bool value);

  public:
  // optional uint32 num_channels = 6;
  bool has_num_channels() const;
  void clear_num_channels() ;
  ::uint32_t num_channels() const;
  void set_num_channels(::uint32_t value);

  private:
  ::uint32_t _internal_num_channels() const;
  void _internal_set_num_channels(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EncoderRuntimeConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t bitrate_bps_;
    ::int32_t frame_length_ms_;
    float uplink_packet_loss_fraction_;
    bool enable_fec_;
    bool enable_dtx_;
    ::uint32_t num_channels_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fdump_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<61> EncoderRuntimeConfig_class_data_;
// -------------------------------------------------------------------

class Event final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.debug_dump.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Event* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Event));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Event& default_instance() {
    return *reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Event>(arena);
  }
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Event* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audio_network_adaptor.debug_dump.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Event(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Event& from);
  Event(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using Type = Event_Type;
  static constexpr Type NETWORK_METRICS = Event_Type_NETWORK_METRICS;
  static constexpr Type ENCODER_RUNTIME_CONFIG = Event_Type_ENCODER_RUNTIME_CONFIG;
  static constexpr Type CONTROLLER_MANAGER_CONFIG = Event_Type_CONTROLLER_MANAGER_CONFIG;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Event_Type_Type_MIN;
  static constexpr Type Type_MAX = Event_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Event_Type_Type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(
      absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNetworkMetricsFieldNumber = 3,
    kEncoderRuntimeConfigFieldNumber = 4,
    kControllerManagerConfigFieldNumber = 5,
    kTypeFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
  bool has_network_metrics() const;
  void clear_network_metrics() ;
  const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& network_metrics() const;
  [[nodiscard]] ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE release_network_metrics();
  ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NONNULL mutable_network_metrics();
  void set_allocated_network_metrics(::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_network_metrics(::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE value);
  ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE unsafe_arena_release_network_metrics();

  private:
  const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& _internal_network_metrics() const;
  ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NONNULL _internal_mutable_network_metrics();

  public:
  // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
  bool has_encoder_runtime_config() const;
  void clear_encoder_runtime_config() ;
  const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& encoder_runtime_config() const;
  [[nodiscard]] ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE release_encoder_runtime_config();
  ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NONNULL mutable_encoder_runtime_config();
  void set_allocated_encoder_runtime_config(::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_encoder_runtime_config(::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE value);
  ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE unsafe_arena_release_encoder_runtime_config();

  private:
  const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& _internal_encoder_runtime_config() const;
  ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NONNULL _internal_mutable_encoder_runtime_config();

  public:
  // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
  bool has_controller_manager_config() const;
  void clear_controller_manager_config() ;
  const ::webrtc::audio_network_adaptor::config::ControllerManager& controller_manager_config() const;
  [[nodiscard]] ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE release_controller_manager_config();
  ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NONNULL mutable_controller_manager_config();
  void set_allocated_controller_manager_config(::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_controller_manager_config(::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE value);
  ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE unsafe_arena_release_controller_manager_config();

  private:
  const ::webrtc::audio_network_adaptor::config::ControllerManager& _internal_controller_manager_config() const;
  ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NONNULL _internal_mutable_controller_manager_config();

  public:
  // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
  bool has_type() const;
  void clear_type() ;
  ::webrtc::audio_network_adaptor::debug_dump::Event_Type type() const;
  void set_type(::webrtc::audio_network_adaptor::debug_dump::Event_Type value);

  private:
  ::webrtc::audio_network_adaptor::debug_dump::Event_Type _internal_type() const;
  void _internal_set_type(::webrtc::audio_network_adaptor::debug_dump::Event_Type value);

  public:
  // required uint32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint32_t timestamp() const;
  void set_timestamp(::uint32_t value);

  private:
  ::uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.debug_dump.Event)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   4, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Event& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE network_metrics_;
    ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE encoder_runtime_config_;
    ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE controller_manager_config_;
    int type_;
    ::uint32_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fdump_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<46> Event_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NetworkMetrics

// optional int32 uplink_bandwidth_bps = 1;
inline bool NetworkMetrics::has_uplink_bandwidth_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetworkMetrics::clear_uplink_bandwidth_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_bandwidth_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t NetworkMetrics::uplink_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_bandwidth_bps)
  return _internal_uplink_bandwidth_bps();
}
inline void NetworkMetrics::set_uplink_bandwidth_bps(::int32_t value) {
  _internal_set_uplink_bandwidth_bps(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_bandwidth_bps)
}
inline ::int32_t NetworkMetrics::_internal_uplink_bandwidth_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uplink_bandwidth_bps_;
}
inline void NetworkMetrics::_internal_set_uplink_bandwidth_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_bandwidth_bps_ = value;
}

// optional float uplink_packet_loss_fraction = 2;
inline bool NetworkMetrics::has_uplink_packet_loss_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetworkMetrics::clear_uplink_packet_loss_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_packet_loss_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float NetworkMetrics::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_packet_loss_fraction)
  return _internal_uplink_packet_loss_fraction();
}
inline void NetworkMetrics::set_uplink_packet_loss_fraction(float value) {
  _internal_set_uplink_packet_loss_fraction(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_packet_loss_fraction)
}
inline float NetworkMetrics::_internal_uplink_packet_loss_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uplink_packet_loss_fraction_;
}
inline void NetworkMetrics::_internal_set_uplink_packet_loss_fraction(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_packet_loss_fraction_ = value;
}

// optional int32 target_audio_bitrate_bps = 3;
inline bool NetworkMetrics::has_target_audio_bitrate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetworkMetrics::clear_target_audio_bitrate_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_audio_bitrate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t NetworkMetrics::target_audio_bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.target_audio_bitrate_bps)
  return _internal_target_audio_bitrate_bps();
}
inline void NetworkMetrics::set_target_audio_bitrate_bps(::int32_t value) {
  _internal_set_target_audio_bitrate_bps(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.target_audio_bitrate_bps)
}
inline ::int32_t NetworkMetrics::_internal_target_audio_bitrate_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_audio_bitrate_bps_;
}
inline void NetworkMetrics::_internal_set_target_audio_bitrate_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_audio_bitrate_bps_ = value;
}

// optional int32 rtt_ms = 4;
inline bool NetworkMetrics::has_rtt_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NetworkMetrics::clear_rtt_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t NetworkMetrics::rtt_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.rtt_ms)
  return _internal_rtt_ms();
}
inline void NetworkMetrics::set_rtt_ms(::int32_t value) {
  _internal_set_rtt_ms(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.rtt_ms)
}
inline ::int32_t NetworkMetrics::_internal_rtt_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtt_ms_;
}
inline void NetworkMetrics::_internal_set_rtt_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_ms_ = value;
}

// optional int32 uplink_recoverable_packet_loss_fraction = 5;
inline bool NetworkMetrics::has_uplink_recoverable_packet_loss_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NetworkMetrics::clear_uplink_recoverable_packet_loss_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_recoverable_packet_loss_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t NetworkMetrics::uplink_recoverable_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_recoverable_packet_loss_fraction)
  return _internal_uplink_recoverable_packet_loss_fraction();
}
inline void NetworkMetrics::set_uplink_recoverable_packet_loss_fraction(::int32_t value) {
  _internal_set_uplink_recoverable_packet_loss_fraction(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_recoverable_packet_loss_fraction)
}
inline ::int32_t NetworkMetrics::_internal_uplink_recoverable_packet_loss_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uplink_recoverable_packet_loss_fraction_;
}
inline void NetworkMetrics::_internal_set_uplink_recoverable_packet_loss_fraction(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_recoverable_packet_loss_fraction_ = value;
}

// -------------------------------------------------------------------

// EncoderRuntimeConfig

// optional int32 bitrate_bps = 1;
inline bool EncoderRuntimeConfig::has_bitrate_bps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EncoderRuntimeConfig::clear_bitrate_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t EncoderRuntimeConfig::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.bitrate_bps)
  return _internal_bitrate_bps();
}
inline void EncoderRuntimeConfig::set_bitrate_bps(::int32_t value) {
  _internal_set_bitrate_bps(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.bitrate_bps)
}
inline ::int32_t EncoderRuntimeConfig::_internal_bitrate_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_bps_;
}
inline void EncoderRuntimeConfig::_internal_set_bitrate_bps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_bps_ = value;
}

// optional int32 frame_length_ms = 2;
inline bool EncoderRuntimeConfig::has_frame_length_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EncoderRuntimeConfig::clear_frame_length_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_length_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t EncoderRuntimeConfig::frame_length_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.frame_length_ms)
  return _internal_frame_length_ms();
}
inline void EncoderRuntimeConfig::set_frame_length_ms(::int32_t value) {
  _internal_set_frame_length_ms(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.frame_length_ms)
}
inline ::int32_t EncoderRuntimeConfig::_internal_frame_length_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_length_ms_;
}
inline void EncoderRuntimeConfig::_internal_set_frame_length_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_length_ms_ = value;
}

// optional float uplink_packet_loss_fraction = 3;
inline bool EncoderRuntimeConfig::has_uplink_packet_loss_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EncoderRuntimeConfig::clear_uplink_packet_loss_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_packet_loss_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float EncoderRuntimeConfig::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.uplink_packet_loss_fraction)
  return _internal_uplink_packet_loss_fraction();
}
inline void EncoderRuntimeConfig::set_uplink_packet_loss_fraction(float value) {
  _internal_set_uplink_packet_loss_fraction(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.uplink_packet_loss_fraction)
}
inline float EncoderRuntimeConfig::_internal_uplink_packet_loss_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uplink_packet_loss_fraction_;
}
inline void EncoderRuntimeConfig::_internal_set_uplink_packet_loss_fraction(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uplink_packet_loss_fraction_ = value;
}

// optional bool enable_fec = 4;
inline bool EncoderRuntimeConfig::has_enable_fec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void EncoderRuntimeConfig::clear_enable_fec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_fec_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool EncoderRuntimeConfig::enable_fec() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_fec)
  return _internal_enable_fec();
}
inline void EncoderRuntimeConfig::set_enable_fec(bool value) {
  _internal_set_enable_fec(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_fec)
}
inline bool EncoderRuntimeConfig::_internal_enable_fec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_fec_;
}
inline void EncoderRuntimeConfig::_internal_set_enable_fec(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_fec_ = value;
}

// optional bool enable_dtx = 5;
inline bool EncoderRuntimeConfig::has_enable_dtx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void EncoderRuntimeConfig::clear_enable_dtx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dtx_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool EncoderRuntimeConfig::enable_dtx() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_dtx)
  return _internal_enable_dtx();
}
inline void EncoderRuntimeConfig::set_enable_dtx(bool value) {
  _internal_set_enable_dtx(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_dtx)
}
inline bool EncoderRuntimeConfig::_internal_enable_dtx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_dtx_;
}
inline void EncoderRuntimeConfig::_internal_set_enable_dtx(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dtx_ = value;
}

// optional uint32 num_channels = 6;
inline bool EncoderRuntimeConfig::has_num_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void EncoderRuntimeConfig::clear_num_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_channels_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t EncoderRuntimeConfig::num_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.num_channels)
  return _internal_num_channels();
}
inline void EncoderRuntimeConfig::set_num_channels(::uint32_t value) {
  _internal_set_num_channels(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.num_channels)
}
inline ::uint32_t EncoderRuntimeConfig::_internal_num_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_channels_;
}
inline void EncoderRuntimeConfig::_internal_set_num_channels(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_channels_ = value;
}

// -------------------------------------------------------------------

// Event

// required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
inline bool Event::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Event::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::webrtc::audio_network_adaptor::debug_dump::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.type)
  return _internal_type();
}
inline void Event::set_type(::webrtc::audio_network_adaptor::debug_dump::Event_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.Event.type)
}
inline ::webrtc::audio_network_adaptor::debug_dump::Event_Type Event::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::audio_network_adaptor::debug_dump::Event_Type>(_impl_.type_);
}
inline void Event::_internal_set_type(::webrtc::audio_network_adaptor::debug_dump::Event_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::audio_network_adaptor::debug_dump::Event_Type_internal_data_));
                                          _impl_.type_ = value;
}

// required uint32 timestamp = 2;
inline bool Event::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Event::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Event::timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.timestamp)
  return _internal_timestamp();
}
inline void Event::set_timestamp(::uint32_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.Event.timestamp)
}
inline ::uint32_t Event::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Event::_internal_set_timestamp(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
inline bool Event::has_network_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.network_metrics_ != nullptr);
  return value;
}
inline void Event::clear_network_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.network_metrics_ != nullptr) _impl_.network_metrics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& Event::_internal_network_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* p = _impl_.network_metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics&>(::webrtc::audio_network_adaptor::debug_dump::_NetworkMetrics_default_instance_);
}
inline const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& Event::network_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
  return _internal_network_metrics();
}
inline void Event::unsafe_arena_set_allocated_network_metrics(
    ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.network_metrics_);
  }
  _impl_.network_metrics_ = reinterpret_cast<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
}
inline ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE Event::release_network_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* released = _impl_.network_metrics_;
  _impl_.network_metrics_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE Event::unsafe_arena_release_network_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* temp = _impl_.network_metrics_;
  _impl_.network_metrics_ = nullptr;
  return temp;
}
inline ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NONNULL Event::_internal_mutable_network_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.network_metrics_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics>(GetArena());
    _impl_.network_metrics_ = reinterpret_cast<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics*>(p);
  }
  return _impl_.network_metrics_;
}
inline ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NONNULL Event::mutable_network_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* _msg = _internal_mutable_network_metrics();
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
  return _msg;
}
inline void Event::set_allocated_network_metrics(::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.network_metrics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.network_metrics_ = reinterpret_cast<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
}

// optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
inline bool Event::has_encoder_runtime_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.encoder_runtime_config_ != nullptr);
  return value;
}
inline void Event::clear_encoder_runtime_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.encoder_runtime_config_ != nullptr) _impl_.encoder_runtime_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& Event::_internal_encoder_runtime_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* p = _impl_.encoder_runtime_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig&>(::webrtc::audio_network_adaptor::debug_dump::_EncoderRuntimeConfig_default_instance_);
}
inline const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& Event::encoder_runtime_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
  return _internal_encoder_runtime_config();
}
inline void Event::unsafe_arena_set_allocated_encoder_runtime_config(
    ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.encoder_runtime_config_);
  }
  _impl_.encoder_runtime_config_ = reinterpret_cast<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
}
inline ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE Event::release_encoder_runtime_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* released = _impl_.encoder_runtime_config_;
  _impl_.encoder_runtime_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE Event::unsafe_arena_release_encoder_runtime_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* temp = _impl_.encoder_runtime_config_;
  _impl_.encoder_runtime_config_ = nullptr;
  return temp;
}
inline ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NONNULL Event::_internal_mutable_encoder_runtime_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.encoder_runtime_config_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig>(GetArena());
    _impl_.encoder_runtime_config_ = reinterpret_cast<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig*>(p);
  }
  return _impl_.encoder_runtime_config_;
}
inline ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NONNULL Event::mutable_encoder_runtime_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* _msg = _internal_mutable_encoder_runtime_config();
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
  return _msg;
}
inline void Event::set_allocated_encoder_runtime_config(::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.encoder_runtime_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.encoder_runtime_config_ = reinterpret_cast<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
}

// optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
inline bool Event::has_controller_manager_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controller_manager_config_ != nullptr);
  return value;
}
inline const ::webrtc::audio_network_adaptor::config::ControllerManager& Event::_internal_controller_manager_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::webrtc::audio_network_adaptor::config::ControllerManager* p = _impl_.controller_manager_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::audio_network_adaptor::config::ControllerManager&>(::webrtc::audio_network_adaptor::config::_ControllerManager_default_instance_);
}
inline const ::webrtc::audio_network_adaptor::config::ControllerManager& Event::controller_manager_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.controller_manager_config)
  return _internal_controller_manager_config();
}
inline void Event::unsafe_arena_set_allocated_controller_manager_config(
    ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controller_manager_config_);
  }
  _impl_.controller_manager_config_ = reinterpret_cast<::webrtc::audio_network_adaptor::config::ControllerManager*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.controller_manager_config)
}
inline ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE Event::release_controller_manager_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::webrtc::audio_network_adaptor::config::ControllerManager* released = _impl_.controller_manager_config_;
  _impl_.controller_manager_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE Event::unsafe_arena_release_controller_manager_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.debug_dump.Event.controller_manager_config)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::webrtc::audio_network_adaptor::config::ControllerManager* temp = _impl_.controller_manager_config_;
  _impl_.controller_manager_config_ = nullptr;
  return temp;
}
inline ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NONNULL Event::_internal_mutable_controller_manager_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.controller_manager_config_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::audio_network_adaptor::config::ControllerManager>(GetArena());
    _impl_.controller_manager_config_ = reinterpret_cast<::webrtc::audio_network_adaptor::config::ControllerManager*>(p);
  }
  return _impl_.controller_manager_config_;
}
inline ::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NONNULL Event::mutable_controller_manager_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::webrtc::audio_network_adaptor::config::ControllerManager* _msg = _internal_mutable_controller_manager_config();
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.debug_dump.Event.controller_manager_config)
  return _msg;
}
inline void Event::set_allocated_controller_manager_config(::webrtc::audio_network_adaptor::config::ControllerManager* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.controller_manager_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.controller_manager_config_ = reinterpret_cast<::webrtc::audio_network_adaptor::config::ControllerManager*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.controller_manager_config)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::webrtc::audio_network_adaptor::debug_dump::Event_Type> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // debug_5fdump_2eproto_2epb_2eh
