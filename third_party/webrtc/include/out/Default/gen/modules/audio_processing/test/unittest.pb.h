// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: unittest.proto
// Protobuf C++ Version: 6.30.1

#ifndef unittest_2eproto_2epb_2eh
#define unittest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_unittest_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_unittest_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace audioproc {
class OutputData;
struct OutputDataDefaultTypeInternal;
extern OutputDataDefaultTypeInternal _OutputData_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<28> OutputData_class_data_;
class Test;
struct TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<22> Test_class_data_;
class Test_DelayMetrics;
struct Test_DelayMetricsDefaultTypeInternal;
extern Test_DelayMetricsDefaultTypeInternal _Test_DelayMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<35> Test_DelayMetrics_class_data_;
class Test_EchoMetrics;
struct Test_EchoMetricsDefaultTypeInternal;
extern Test_EchoMetricsDefaultTypeInternal _Test_EchoMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<34> Test_EchoMetrics_class_data_;
class Test_Frame;
struct Test_FrameDefaultTypeInternal;
extern Test_FrameDefaultTypeInternal _Test_Frame_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<28> Test_Frame_class_data_;
}  // namespace audioproc
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace audioproc {

// ===================================================================


// -------------------------------------------------------------------

class Test_Frame final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audioproc.Test.Frame) */ {
 public:
  inline Test_Frame() : Test_Frame(nullptr) {}
  ~Test_Frame() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Test_Frame* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Test_Frame));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Test_Frame(::google::protobuf::internal::ConstantInitialized);

  inline Test_Frame(const Test_Frame& from) : Test_Frame(nullptr, from) {}
  inline Test_Frame(Test_Frame&& from) noexcept
      : Test_Frame(nullptr, std::move(from)) {}
  inline Test_Frame& operator=(const Test_Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test_Frame& operator=(Test_Frame&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Test_Frame& default_instance() {
    return *reinterpret_cast<const Test_Frame*>(
        &_Test_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Test_Frame& a, Test_Frame& b) { a.Swap(&b); }
  inline void Swap(Test_Frame* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test_Frame* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test_Frame* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Test_Frame>(arena);
  }
  void CopyFrom(const Test_Frame& from);
  void MergeFrom(const Test_Frame& from) { Test_Frame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Test_Frame* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audioproc.Test.Frame"; }

 protected:
  explicit Test_Frame(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Test_Frame(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Test_Frame& from);
  Test_Frame(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Test_Frame&& from) noexcept
      : Test_Frame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Test.Frame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Test_Frame& from_msg);
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unittest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<28> Test_Frame_class_data_;
// -------------------------------------------------------------------

class Test_EchoMetrics final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audioproc.Test.EchoMetrics) */ {
 public:
  inline Test_EchoMetrics() : Test_EchoMetrics(nullptr) {}
  ~Test_EchoMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Test_EchoMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Test_EchoMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Test_EchoMetrics(::google::protobuf::internal::ConstantInitialized);

  inline Test_EchoMetrics(const Test_EchoMetrics& from) : Test_EchoMetrics(nullptr, from) {}
  inline Test_EchoMetrics(Test_EchoMetrics&& from) noexcept
      : Test_EchoMetrics(nullptr, std::move(from)) {}
  inline Test_EchoMetrics& operator=(const Test_EchoMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test_EchoMetrics& operator=(Test_EchoMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Test_EchoMetrics& default_instance() {
    return *reinterpret_cast<const Test_EchoMetrics*>(
        &_Test_EchoMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Test_EchoMetrics& a, Test_EchoMetrics& b) { a.Swap(&b); }
  inline void Swap(Test_EchoMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test_EchoMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test_EchoMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Test_EchoMetrics>(arena);
  }
  void CopyFrom(const Test_EchoMetrics& from);
  void MergeFrom(const Test_EchoMetrics& from) { Test_EchoMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Test_EchoMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audioproc.Test.EchoMetrics"; }

 protected:
  explicit Test_EchoMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Test_EchoMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Test_EchoMetrics& from);
  Test_EchoMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Test_EchoMetrics&& from) noexcept
      : Test_EchoMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEchoReturnLossFieldNumber = 1,
    kEchoReturnLossEnhancementFieldNumber = 2,
    kDivergentFilterFractionFieldNumber = 3,
    kResidualEchoLikelihoodFieldNumber = 4,
    kResidualEchoLikelihoodRecentMaxFieldNumber = 5,
  };
  // optional float echo_return_loss = 1;
  bool has_echo_return_loss() const;
  void clear_echo_return_loss() ;
  float echo_return_loss() const;
  void set_echo_return_loss(float value);

  private:
  float _internal_echo_return_loss() const;
  void _internal_set_echo_return_loss(float value);

  public:
  // optional float echo_return_loss_enhancement = 2;
  bool has_echo_return_loss_enhancement() const;
  void clear_echo_return_loss_enhancement() ;
  float echo_return_loss_enhancement() const;
  void set_echo_return_loss_enhancement(float value);

  private:
  float _internal_echo_return_loss_enhancement() const;
  void _internal_set_echo_return_loss_enhancement(float value);

  public:
  // optional float divergent_filter_fraction = 3;
  bool has_divergent_filter_fraction() const;
  void clear_divergent_filter_fraction() ;
  float divergent_filter_fraction() const;
  void set_divergent_filter_fraction(float value);

  private:
  float _internal_divergent_filter_fraction() const;
  void _internal_set_divergent_filter_fraction(float value);

  public:
  // optional float residual_echo_likelihood = 4;
  bool has_residual_echo_likelihood() const;
  void clear_residual_echo_likelihood() ;
  float residual_echo_likelihood() const;
  void set_residual_echo_likelihood(float value);

  private:
  float _internal_residual_echo_likelihood() const;
  void _internal_set_residual_echo_likelihood(float value);

  public:
  // optional float residual_echo_likelihood_recent_max = 5;
  bool has_residual_echo_likelihood_recent_max() const;
  void clear_residual_echo_likelihood_recent_max() ;
  float residual_echo_likelihood_recent_max() const;
  void set_residual_echo_likelihood_recent_max(float value);

  private:
  float _internal_residual_echo_likelihood_recent_max() const;
  void _internal_set_residual_echo_likelihood_recent_max(float value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Test.EchoMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Test_EchoMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float echo_return_loss_;
    float echo_return_loss_enhancement_;
    float divergent_filter_fraction_;
    float residual_echo_likelihood_;
    float residual_echo_likelihood_recent_max_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unittest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<34> Test_EchoMetrics_class_data_;
// -------------------------------------------------------------------

class Test_DelayMetrics final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audioproc.Test.DelayMetrics) */ {
 public:
  inline Test_DelayMetrics() : Test_DelayMetrics(nullptr) {}
  ~Test_DelayMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Test_DelayMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Test_DelayMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Test_DelayMetrics(::google::protobuf::internal::ConstantInitialized);

  inline Test_DelayMetrics(const Test_DelayMetrics& from) : Test_DelayMetrics(nullptr, from) {}
  inline Test_DelayMetrics(Test_DelayMetrics&& from) noexcept
      : Test_DelayMetrics(nullptr, std::move(from)) {}
  inline Test_DelayMetrics& operator=(const Test_DelayMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test_DelayMetrics& operator=(Test_DelayMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Test_DelayMetrics& default_instance() {
    return *reinterpret_cast<const Test_DelayMetrics*>(
        &_Test_DelayMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Test_DelayMetrics& a, Test_DelayMetrics& b) { a.Swap(&b); }
  inline void Swap(Test_DelayMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test_DelayMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test_DelayMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Test_DelayMetrics>(arena);
  }
  void CopyFrom(const Test_DelayMetrics& from);
  void MergeFrom(const Test_DelayMetrics& from) { Test_DelayMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Test_DelayMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audioproc.Test.DelayMetrics"; }

 protected:
  explicit Test_DelayMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Test_DelayMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Test_DelayMetrics& from);
  Test_DelayMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Test_DelayMetrics&& from) noexcept
      : Test_DelayMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMedianFieldNumber = 1,
    kStdFieldNumber = 2,
  };
  // optional int32 median = 1;
  bool has_median() const;
  void clear_median() ;
  ::int32_t median() const;
  void set_median(::int32_t value);

  private:
  ::int32_t _internal_median() const;
  void _internal_set_median(::int32_t value);

  public:
  // optional int32 std = 2;
  bool has_std() const;
  void clear_std() ;
  ::int32_t std() const;
  void set_std(::int32_t value);

  private:
  ::int32_t _internal_std() const;
  void _internal_set_std(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Test.DelayMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Test_DelayMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t median_;
    ::int32_t std_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unittest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<35> Test_DelayMetrics_class_data_;
// -------------------------------------------------------------------

class Test final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audioproc.Test) */ {
 public:
  inline Test() : Test(nullptr) {}
  ~Test() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Test* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Test));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Test(::google::protobuf::internal::ConstantInitialized);

  inline Test(const Test& from) : Test(nullptr, from) {}
  inline Test(Test&& from) noexcept
      : Test(nullptr, std::move(from)) {}
  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Test& default_instance() {
    return *reinterpret_cast<const Test*>(
        &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Test& a, Test& b) { a.Swap(&b); }
  inline void Swap(Test* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Test>(arena);
  }
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from) { Test::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Test* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audioproc.Test"; }

 protected:
  explicit Test(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Test(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Test& from);
  Test(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Test&& from) noexcept
      : Test(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using Frame = Test_Frame;
  using EchoMetrics = Test_EchoMetrics;
  using DelayMetrics = Test_DelayMetrics;

  // accessors -------------------------------------------------------
  enum : int {
    kFrameFieldNumber = 5,
    kEchoMetricsFieldNumber = 11,
    kDelayMetricsFieldNumber = 12,
    kNumReverseChannelsFieldNumber = 1,
    kNumInputChannelsFieldNumber = 2,
    kNumOutputChannelsFieldNumber = 3,
    kSampleRateFieldNumber = 4,
    kAnalogLevelAverageFieldNumber = 6,
    kMaxOutputAverageFieldNumber = 7,
    kHasVoiceCountFieldNumber = 9,
    kIsSaturatedCountFieldNumber = 10,
    kRmsDbfsAverageFieldNumber = 13,
    kNsSpeechProbabilityAverageFieldNumber = 14,
    kUseAecExtendedFilterFieldNumber = 15,
  };
  // repeated .webrtc.audioproc.Test.Frame frame = 5;
  int frame_size() const;
  private:
  int _internal_frame_size() const;

  public:
  void clear_frame() ;
  ::webrtc::audioproc::Test_Frame* PROTOBUF_NONNULL mutable_frame(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>* PROTOBUF_NONNULL mutable_frame();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>& _internal_frame() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>* PROTOBUF_NONNULL _internal_mutable_frame();
  public:
  const ::webrtc::audioproc::Test_Frame& frame(int index) const;
  ::webrtc::audioproc::Test_Frame* PROTOBUF_NONNULL add_frame();
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>& frame() const;
  // repeated .webrtc.audioproc.Test.EchoMetrics echo_metrics = 11;
  int echo_metrics_size() const;
  private:
  int _internal_echo_metrics_size() const;

  public:
  void clear_echo_metrics() ;
  ::webrtc::audioproc::Test_EchoMetrics* PROTOBUF_NONNULL mutable_echo_metrics(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>* PROTOBUF_NONNULL mutable_echo_metrics();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>& _internal_echo_metrics() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>* PROTOBUF_NONNULL _internal_mutable_echo_metrics();
  public:
  const ::webrtc::audioproc::Test_EchoMetrics& echo_metrics(int index) const;
  ::webrtc::audioproc::Test_EchoMetrics* PROTOBUF_NONNULL add_echo_metrics();
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>& echo_metrics() const;
  // repeated .webrtc.audioproc.Test.DelayMetrics delay_metrics = 12;
  int delay_metrics_size() const;
  private:
  int _internal_delay_metrics_size() const;

  public:
  void clear_delay_metrics() ;
  ::webrtc::audioproc::Test_DelayMetrics* PROTOBUF_NONNULL mutable_delay_metrics(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>* PROTOBUF_NONNULL mutable_delay_metrics();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>& _internal_delay_metrics() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>* PROTOBUF_NONNULL _internal_mutable_delay_metrics();
  public:
  const ::webrtc::audioproc::Test_DelayMetrics& delay_metrics(int index) const;
  ::webrtc::audioproc::Test_DelayMetrics* PROTOBUF_NONNULL add_delay_metrics();
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>& delay_metrics() const;
  // optional int32 num_reverse_channels = 1;
  bool has_num_reverse_channels() const;
  void clear_num_reverse_channels() ;
  ::int32_t num_reverse_channels() const;
  void set_num_reverse_channels(::int32_t value);

  private:
  ::int32_t _internal_num_reverse_channels() const;
  void _internal_set_num_reverse_channels(::int32_t value);

  public:
  // optional int32 num_input_channels = 2;
  bool has_num_input_channels() const;
  void clear_num_input_channels() ;
  ::int32_t num_input_channels() const;
  void set_num_input_channels(::int32_t value);

  private:
  ::int32_t _internal_num_input_channels() const;
  void _internal_set_num_input_channels(::int32_t value);

  public:
  // optional int32 num_output_channels = 3;
  bool has_num_output_channels() const;
  void clear_num_output_channels() ;
  ::int32_t num_output_channels() const;
  void set_num_output_channels(::int32_t value);

  private:
  ::int32_t _internal_num_output_channels() const;
  void _internal_set_num_output_channels(::int32_t value);

  public:
  // optional int32 sample_rate = 4;
  bool has_sample_rate() const;
  void clear_sample_rate() ;
  ::int32_t sample_rate() const;
  void set_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(::int32_t value);

  public:
  // optional int32 analog_level_average = 6;
  bool has_analog_level_average() const;
  void clear_analog_level_average() ;
  ::int32_t analog_level_average() const;
  void set_analog_level_average(::int32_t value);

  private:
  ::int32_t _internal_analog_level_average() const;
  void _internal_set_analog_level_average(::int32_t value);

  public:
  // optional int32 max_output_average = 7;
  bool has_max_output_average() const;
  void clear_max_output_average() ;
  ::int32_t max_output_average() const;
  void set_max_output_average(::int32_t value);

  private:
  ::int32_t _internal_max_output_average() const;
  void _internal_set_max_output_average(::int32_t value);

  public:
  // optional int32 has_voice_count = 9;
  bool has_has_voice_count() const;
  void clear_has_voice_count() ;
  ::int32_t has_voice_count() const;
  void set_has_voice_count(::int32_t value);

  private:
  ::int32_t _internal_has_voice_count() const;
  void _internal_set_has_voice_count(::int32_t value);

  public:
  // optional int32 is_saturated_count = 10;
  bool has_is_saturated_count() const;
  void clear_is_saturated_count() ;
  ::int32_t is_saturated_count() const;
  void set_is_saturated_count(::int32_t value);

  private:
  ::int32_t _internal_is_saturated_count() const;
  void _internal_set_is_saturated_count(::int32_t value);

  public:
  // optional float rms_dbfs_average = 13;
  bool has_rms_dbfs_average() const;
  void clear_rms_dbfs_average() ;
  float rms_dbfs_average() const;
  void set_rms_dbfs_average(float value);

  private:
  float _internal_rms_dbfs_average() const;
  void _internal_set_rms_dbfs_average(float value);

  public:
  // optional float ns_speech_probability_average = 14;
  bool has_ns_speech_probability_average() const;
  void clear_ns_speech_probability_average() ;
  float ns_speech_probability_average() const;
  void set_ns_speech_probability_average(float value);

  private:
  float _internal_ns_speech_probability_average() const;
  void _internal_set_ns_speech_probability_average(float value);

  public:
  // optional bool use_aec_extended_filter = 15;
  bool has_use_aec_extended_filter() const;
  void clear_use_aec_extended_filter() ;
  bool use_aec_extended_filter() const;
  void set_use_aec_extended_filter(bool value);

  private:
  bool _internal_use_aec_extended_filter() const;
  void _internal_set_use_aec_extended_filter(bool value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Test)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 14,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Test& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::audioproc::Test_Frame > frame_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::audioproc::Test_EchoMetrics > echo_metrics_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::audioproc::Test_DelayMetrics > delay_metrics_;
    ::int32_t num_reverse_channels_;
    ::int32_t num_input_channels_;
    ::int32_t num_output_channels_;
    ::int32_t sample_rate_;
    ::int32_t analog_level_average_;
    ::int32_t max_output_average_;
    ::int32_t has_voice_count_;
    ::int32_t is_saturated_count_;
    float rms_dbfs_average_;
    float ns_speech_probability_average_;
    bool use_aec_extended_filter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unittest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<22> Test_class_data_;
// -------------------------------------------------------------------

class OutputData final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.audioproc.OutputData) */ {
 public:
  inline OutputData() : OutputData(nullptr) {}
  ~OutputData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OutputData* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OutputData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OutputData(::google::protobuf::internal::ConstantInitialized);

  inline OutputData(const OutputData& from) : OutputData(nullptr, from) {}
  inline OutputData(OutputData&& from) noexcept
      : OutputData(nullptr, std::move(from)) {}
  inline OutputData& operator=(const OutputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputData& operator=(OutputData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OutputData& default_instance() {
    return *reinterpret_cast<const OutputData*>(
        &_OutputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(OutputData& a, OutputData& b) { a.Swap(&b); }
  inline void Swap(OutputData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputData* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<OutputData>(arena);
  }
  void CopyFrom(const OutputData& from);
  void MergeFrom(const OutputData& from) { OutputData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OutputData* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.audioproc.OutputData"; }

 protected:
  explicit OutputData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  OutputData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const OutputData& from);
  OutputData(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, OutputData&& from) noexcept
      : OutputData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestFieldNumber = 1,
  };
  // repeated .webrtc.audioproc.Test test = 1;
  int test_size() const;
  private:
  int _internal_test_size() const;

  public:
  void clear_test() ;
  ::webrtc::audioproc::Test* PROTOBUF_NONNULL mutable_test(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>* PROTOBUF_NONNULL mutable_test();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>& _internal_test() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>* PROTOBUF_NONNULL _internal_mutable_test();
  public:
  const ::webrtc::audioproc::Test& test(int index) const;
  ::webrtc::audioproc::Test* PROTOBUF_NONNULL add_test();
  const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>& test() const;
  // @@protoc_insertion_point(class_scope:webrtc.audioproc.OutputData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const OutputData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::webrtc::audioproc::Test > test_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unittest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<28> OutputData_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Test_Frame

// -------------------------------------------------------------------

// Test_EchoMetrics

// optional float echo_return_loss = 1;
inline bool Test_EchoMetrics::has_echo_return_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Test_EchoMetrics::clear_echo_return_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.echo_return_loss_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Test_EchoMetrics::echo_return_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.EchoMetrics.echo_return_loss)
  return _internal_echo_return_loss();
}
inline void Test_EchoMetrics::set_echo_return_loss(float value) {
  _internal_set_echo_return_loss(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.EchoMetrics.echo_return_loss)
}
inline float Test_EchoMetrics::_internal_echo_return_loss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.echo_return_loss_;
}
inline void Test_EchoMetrics::_internal_set_echo_return_loss(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.echo_return_loss_ = value;
}

// optional float echo_return_loss_enhancement = 2;
inline bool Test_EchoMetrics::has_echo_return_loss_enhancement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Test_EchoMetrics::clear_echo_return_loss_enhancement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.echo_return_loss_enhancement_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Test_EchoMetrics::echo_return_loss_enhancement() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.EchoMetrics.echo_return_loss_enhancement)
  return _internal_echo_return_loss_enhancement();
}
inline void Test_EchoMetrics::set_echo_return_loss_enhancement(float value) {
  _internal_set_echo_return_loss_enhancement(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.EchoMetrics.echo_return_loss_enhancement)
}
inline float Test_EchoMetrics::_internal_echo_return_loss_enhancement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.echo_return_loss_enhancement_;
}
inline void Test_EchoMetrics::_internal_set_echo_return_loss_enhancement(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.echo_return_loss_enhancement_ = value;
}

// optional float divergent_filter_fraction = 3;
inline bool Test_EchoMetrics::has_divergent_filter_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Test_EchoMetrics::clear_divergent_filter_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.divergent_filter_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Test_EchoMetrics::divergent_filter_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.EchoMetrics.divergent_filter_fraction)
  return _internal_divergent_filter_fraction();
}
inline void Test_EchoMetrics::set_divergent_filter_fraction(float value) {
  _internal_set_divergent_filter_fraction(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.EchoMetrics.divergent_filter_fraction)
}
inline float Test_EchoMetrics::_internal_divergent_filter_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.divergent_filter_fraction_;
}
inline void Test_EchoMetrics::_internal_set_divergent_filter_fraction(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.divergent_filter_fraction_ = value;
}

// optional float residual_echo_likelihood = 4;
inline bool Test_EchoMetrics::has_residual_echo_likelihood() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Test_EchoMetrics::clear_residual_echo_likelihood() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residual_echo_likelihood_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Test_EchoMetrics::residual_echo_likelihood() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.EchoMetrics.residual_echo_likelihood)
  return _internal_residual_echo_likelihood();
}
inline void Test_EchoMetrics::set_residual_echo_likelihood(float value) {
  _internal_set_residual_echo_likelihood(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.EchoMetrics.residual_echo_likelihood)
}
inline float Test_EchoMetrics::_internal_residual_echo_likelihood() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residual_echo_likelihood_;
}
inline void Test_EchoMetrics::_internal_set_residual_echo_likelihood(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residual_echo_likelihood_ = value;
}

// optional float residual_echo_likelihood_recent_max = 5;
inline bool Test_EchoMetrics::has_residual_echo_likelihood_recent_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Test_EchoMetrics::clear_residual_echo_likelihood_recent_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residual_echo_likelihood_recent_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Test_EchoMetrics::residual_echo_likelihood_recent_max() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.EchoMetrics.residual_echo_likelihood_recent_max)
  return _internal_residual_echo_likelihood_recent_max();
}
inline void Test_EchoMetrics::set_residual_echo_likelihood_recent_max(float value) {
  _internal_set_residual_echo_likelihood_recent_max(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.EchoMetrics.residual_echo_likelihood_recent_max)
}
inline float Test_EchoMetrics::_internal_residual_echo_likelihood_recent_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.residual_echo_likelihood_recent_max_;
}
inline void Test_EchoMetrics::_internal_set_residual_echo_likelihood_recent_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.residual_echo_likelihood_recent_max_ = value;
}

// -------------------------------------------------------------------

// Test_DelayMetrics

// optional int32 median = 1;
inline bool Test_DelayMetrics::has_median() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Test_DelayMetrics::clear_median() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.median_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Test_DelayMetrics::median() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.DelayMetrics.median)
  return _internal_median();
}
inline void Test_DelayMetrics::set_median(::int32_t value) {
  _internal_set_median(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.DelayMetrics.median)
}
inline ::int32_t Test_DelayMetrics::_internal_median() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.median_;
}
inline void Test_DelayMetrics::_internal_set_median(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.median_ = value;
}

// optional int32 std = 2;
inline bool Test_DelayMetrics::has_std() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Test_DelayMetrics::clear_std() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.std_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Test_DelayMetrics::std() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.DelayMetrics.std)
  return _internal_std();
}
inline void Test_DelayMetrics::set_std(::int32_t value) {
  _internal_set_std(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.DelayMetrics.std)
}
inline ::int32_t Test_DelayMetrics::_internal_std() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.std_;
}
inline void Test_DelayMetrics::_internal_set_std(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.std_ = value;
}

// -------------------------------------------------------------------

// Test

// optional int32 num_reverse_channels = 1;
inline bool Test::has_num_reverse_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Test::clear_num_reverse_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_reverse_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Test::num_reverse_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.num_reverse_channels)
  return _internal_num_reverse_channels();
}
inline void Test::set_num_reverse_channels(::int32_t value) {
  _internal_set_num_reverse_channels(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.num_reverse_channels)
}
inline ::int32_t Test::_internal_num_reverse_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_reverse_channels_;
}
inline void Test::_internal_set_num_reverse_channels(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_reverse_channels_ = value;
}

// optional int32 num_input_channels = 2;
inline bool Test::has_num_input_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Test::clear_num_input_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_input_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Test::num_input_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.num_input_channels)
  return _internal_num_input_channels();
}
inline void Test::set_num_input_channels(::int32_t value) {
  _internal_set_num_input_channels(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.num_input_channels)
}
inline ::int32_t Test::_internal_num_input_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_input_channels_;
}
inline void Test::_internal_set_num_input_channels(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_input_channels_ = value;
}

// optional int32 num_output_channels = 3;
inline bool Test::has_num_output_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Test::clear_num_output_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_output_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Test::num_output_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.num_output_channels)
  return _internal_num_output_channels();
}
inline void Test::set_num_output_channels(::int32_t value) {
  _internal_set_num_output_channels(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.num_output_channels)
}
inline ::int32_t Test::_internal_num_output_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_output_channels_;
}
inline void Test::_internal_set_num_output_channels(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_output_channels_ = value;
}

// optional int32 sample_rate = 4;
inline bool Test::has_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Test::clear_sample_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Test::sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.sample_rate)
  return _internal_sample_rate();
}
inline void Test::set_sample_rate(::int32_t value) {
  _internal_set_sample_rate(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.sample_rate)
}
inline ::int32_t Test::_internal_sample_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_rate_;
}
inline void Test::_internal_set_sample_rate(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_ = value;
}

// repeated .webrtc.audioproc.Test.Frame frame = 5;
inline int Test::_internal_frame_size() const {
  return _internal_frame().size();
}
inline int Test::frame_size() const {
  return _internal_frame_size();
}
inline void Test::clear_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_.Clear();
}
inline ::webrtc::audioproc::Test_Frame* PROTOBUF_NONNULL Test::mutable_frame(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Test.frame)
  return _internal_mutable_frame()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>* PROTOBUF_NONNULL Test::mutable_frame()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Test.frame)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_frame();
}
inline const ::webrtc::audioproc::Test_Frame& Test::frame(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.frame)
  return _internal_frame().Get(index);
}
inline ::webrtc::audioproc::Test_Frame* PROTOBUF_NONNULL Test::add_frame()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::audioproc::Test_Frame* _add = _internal_mutable_frame()->Add();
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Test.frame)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>& Test::frame() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.Test.frame)
  return _internal_frame();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>&
Test::_internal_frame() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_Frame>* PROTOBUF_NONNULL
Test::_internal_mutable_frame() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.frame_;
}

// optional int32 analog_level_average = 6;
inline bool Test::has_analog_level_average() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Test::clear_analog_level_average() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analog_level_average_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Test::analog_level_average() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.analog_level_average)
  return _internal_analog_level_average();
}
inline void Test::set_analog_level_average(::int32_t value) {
  _internal_set_analog_level_average(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.analog_level_average)
}
inline ::int32_t Test::_internal_analog_level_average() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.analog_level_average_;
}
inline void Test::_internal_set_analog_level_average(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analog_level_average_ = value;
}

// optional int32 max_output_average = 7;
inline bool Test::has_max_output_average() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Test::clear_max_output_average() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_output_average_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Test::max_output_average() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.max_output_average)
  return _internal_max_output_average();
}
inline void Test::set_max_output_average(::int32_t value) {
  _internal_set_max_output_average(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.max_output_average)
}
inline ::int32_t Test::_internal_max_output_average() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_output_average_;
}
inline void Test::_internal_set_max_output_average(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_output_average_ = value;
}

// optional int32 has_voice_count = 9;
inline bool Test::has_has_voice_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Test::clear_has_voice_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_voice_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Test::has_voice_count() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.has_voice_count)
  return _internal_has_voice_count();
}
inline void Test::set_has_voice_count(::int32_t value) {
  _internal_set_has_voice_count(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.has_voice_count)
}
inline ::int32_t Test::_internal_has_voice_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_voice_count_;
}
inline void Test::_internal_set_has_voice_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_voice_count_ = value;
}

// optional int32 is_saturated_count = 10;
inline bool Test::has_is_saturated_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Test::clear_is_saturated_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_saturated_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Test::is_saturated_count() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.is_saturated_count)
  return _internal_is_saturated_count();
}
inline void Test::set_is_saturated_count(::int32_t value) {
  _internal_set_is_saturated_count(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.is_saturated_count)
}
inline ::int32_t Test::_internal_is_saturated_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_saturated_count_;
}
inline void Test::_internal_set_is_saturated_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_saturated_count_ = value;
}

// repeated .webrtc.audioproc.Test.EchoMetrics echo_metrics = 11;
inline int Test::_internal_echo_metrics_size() const {
  return _internal_echo_metrics().size();
}
inline int Test::echo_metrics_size() const {
  return _internal_echo_metrics_size();
}
inline void Test::clear_echo_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.echo_metrics_.Clear();
}
inline ::webrtc::audioproc::Test_EchoMetrics* PROTOBUF_NONNULL Test::mutable_echo_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Test.echo_metrics)
  return _internal_mutable_echo_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>* PROTOBUF_NONNULL Test::mutable_echo_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Test.echo_metrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_echo_metrics();
}
inline const ::webrtc::audioproc::Test_EchoMetrics& Test::echo_metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.echo_metrics)
  return _internal_echo_metrics().Get(index);
}
inline ::webrtc::audioproc::Test_EchoMetrics* PROTOBUF_NONNULL Test::add_echo_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::audioproc::Test_EchoMetrics* _add = _internal_mutable_echo_metrics()->Add();
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Test.echo_metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>& Test::echo_metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.Test.echo_metrics)
  return _internal_echo_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>&
Test::_internal_echo_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.echo_metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_EchoMetrics>* PROTOBUF_NONNULL
Test::_internal_mutable_echo_metrics() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.echo_metrics_;
}

// repeated .webrtc.audioproc.Test.DelayMetrics delay_metrics = 12;
inline int Test::_internal_delay_metrics_size() const {
  return _internal_delay_metrics().size();
}
inline int Test::delay_metrics_size() const {
  return _internal_delay_metrics_size();
}
inline void Test::clear_delay_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delay_metrics_.Clear();
}
inline ::webrtc::audioproc::Test_DelayMetrics* PROTOBUF_NONNULL Test::mutable_delay_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Test.delay_metrics)
  return _internal_mutable_delay_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>* PROTOBUF_NONNULL Test::mutable_delay_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Test.delay_metrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_delay_metrics();
}
inline const ::webrtc::audioproc::Test_DelayMetrics& Test::delay_metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.delay_metrics)
  return _internal_delay_metrics().Get(index);
}
inline ::webrtc::audioproc::Test_DelayMetrics* PROTOBUF_NONNULL Test::add_delay_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::audioproc::Test_DelayMetrics* _add = _internal_mutable_delay_metrics()->Add();
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Test.delay_metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>& Test::delay_metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.Test.delay_metrics)
  return _internal_delay_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>&
Test::_internal_delay_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delay_metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test_DelayMetrics>* PROTOBUF_NONNULL
Test::_internal_mutable_delay_metrics() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.delay_metrics_;
}

// optional float rms_dbfs_average = 13;
inline bool Test::has_rms_dbfs_average() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Test::clear_rms_dbfs_average() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rms_dbfs_average_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Test::rms_dbfs_average() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.rms_dbfs_average)
  return _internal_rms_dbfs_average();
}
inline void Test::set_rms_dbfs_average(float value) {
  _internal_set_rms_dbfs_average(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.rms_dbfs_average)
}
inline float Test::_internal_rms_dbfs_average() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rms_dbfs_average_;
}
inline void Test::_internal_set_rms_dbfs_average(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rms_dbfs_average_ = value;
}

// optional float ns_speech_probability_average = 14;
inline bool Test::has_ns_speech_probability_average() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Test::clear_ns_speech_probability_average() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ns_speech_probability_average_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Test::ns_speech_probability_average() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.ns_speech_probability_average)
  return _internal_ns_speech_probability_average();
}
inline void Test::set_ns_speech_probability_average(float value) {
  _internal_set_ns_speech_probability_average(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.ns_speech_probability_average)
}
inline float Test::_internal_ns_speech_probability_average() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ns_speech_probability_average_;
}
inline void Test::_internal_set_ns_speech_probability_average(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ns_speech_probability_average_ = value;
}

// optional bool use_aec_extended_filter = 15;
inline bool Test::has_use_aec_extended_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Test::clear_use_aec_extended_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_aec_extended_filter_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Test::use_aec_extended_filter() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Test.use_aec_extended_filter)
  return _internal_use_aec_extended_filter();
}
inline void Test::set_use_aec_extended_filter(bool value) {
  _internal_set_use_aec_extended_filter(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Test.use_aec_extended_filter)
}
inline bool Test::_internal_use_aec_extended_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_aec_extended_filter_;
}
inline void Test::_internal_set_use_aec_extended_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_aec_extended_filter_ = value;
}

// -------------------------------------------------------------------

// OutputData

// repeated .webrtc.audioproc.Test test = 1;
inline int OutputData::_internal_test_size() const {
  return _internal_test().size();
}
inline int OutputData::test_size() const {
  return _internal_test_size();
}
inline void OutputData::clear_test() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_.Clear();
}
inline ::webrtc::audioproc::Test* PROTOBUF_NONNULL OutputData::mutable_test(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.OutputData.test)
  return _internal_mutable_test()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>* PROTOBUF_NONNULL OutputData::mutable_test()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.OutputData.test)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test();
}
inline const ::webrtc::audioproc::Test& OutputData::test(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.OutputData.test)
  return _internal_test().Get(index);
}
inline ::webrtc::audioproc::Test* PROTOBUF_NONNULL OutputData::add_test()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::audioproc::Test* _add = _internal_mutable_test()->Add();
  // @@protoc_insertion_point(field_add:webrtc.audioproc.OutputData.test)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>& OutputData::test() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.OutputData.test)
  return _internal_test();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>&
OutputData::_internal_test() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::audioproc::Test>* PROTOBUF_NONNULL
OutputData::_internal_mutable_test() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace audioproc
}  // namespace webrtc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // unittest_2eproto_2epb_2eh
