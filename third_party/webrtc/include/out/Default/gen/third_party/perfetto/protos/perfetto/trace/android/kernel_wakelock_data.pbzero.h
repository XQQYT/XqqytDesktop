// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_KERNEL_WAKELOCK_DATA_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_KERNEL_WAKELOCK_DATA_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class KernelWakelockData_Wakelock;
namespace perfetto_pbzero_enum_KernelWakelockData_Wakelock {
enum Type : int32_t;
}  // namespace perfetto_pbzero_enum_KernelWakelockData_Wakelock
using KernelWakelockData_Wakelock_Type = perfetto_pbzero_enum_KernelWakelockData_Wakelock::Type;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

namespace perfetto_pbzero_enum_KernelWakelockData_Wakelock {
enum Type : int32_t {
  WAKELOCK_TYPE_UNKNOWN = 0,
  WAKELOCK_TYPE_KERNEL = 1,
  WAKELOCK_TYPE_NATIVE = 2,
};
} // namespace perfetto_pbzero_enum_KernelWakelockData_Wakelock
using KernelWakelockData_Wakelock_Type = perfetto_pbzero_enum_KernelWakelockData_Wakelock::Type;


constexpr KernelWakelockData_Wakelock_Type KernelWakelockData_Wakelock_Type_MIN = KernelWakelockData_Wakelock_Type::WAKELOCK_TYPE_UNKNOWN;
constexpr KernelWakelockData_Wakelock_Type KernelWakelockData_Wakelock_Type_MAX = KernelWakelockData_Wakelock_Type::WAKELOCK_TYPE_NATIVE;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* KernelWakelockData_Wakelock_Type_Name(::perfetto::protos::pbzero::KernelWakelockData_Wakelock_Type value) {
  switch (value) {
  case ::perfetto::protos::pbzero::KernelWakelockData_Wakelock_Type::WAKELOCK_TYPE_UNKNOWN:
    return "WAKELOCK_TYPE_UNKNOWN";

  case ::perfetto::protos::pbzero::KernelWakelockData_Wakelock_Type::WAKELOCK_TYPE_KERNEL:
    return "WAKELOCK_TYPE_KERNEL";

  case ::perfetto::protos::pbzero::KernelWakelockData_Wakelock_Type::WAKELOCK_TYPE_NATIVE:
    return "WAKELOCK_TYPE_NATIVE";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

class KernelWakelockData_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  KernelWakelockData_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit KernelWakelockData_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit KernelWakelockData_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_wakelock() const { return at<1>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> wakelock() const { return GetRepeated<::protozero::ConstBytes>(1); }
  bool has_wakelock_id() const { return at<2>().valid(); }
  ::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, uint32_t> wakelock_id(bool* parse_error_ptr) const { return GetPackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, uint32_t>(2, parse_error_ptr); }
  bool has_time_held_millis() const { return at<3>().valid(); }
  ::protozero::PackedRepeatedFieldIterator<::protozero::proto_utils::ProtoWireType::kVarInt, uint64_t> time_held_millis(bool* parse_error_ptr) const { return GetPackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, uint64_t>(3, parse_error_ptr); }
};

class KernelWakelockData : public ::protozero::Message {
 public:
  using Decoder = KernelWakelockData_Decoder;
  enum : int32_t {
    kWakelockFieldNumber = 1,
    kWakelockIdFieldNumber = 2,
    kTimeHeldMillisFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.KernelWakelockData"; }

  using Wakelock = ::perfetto::protos::pbzero::KernelWakelockData_Wakelock;

  using FieldMetadata_Wakelock =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      KernelWakelockData_Wakelock,
      KernelWakelockData>;

  static constexpr FieldMetadata_Wakelock kWakelock{};
  template <typename T = KernelWakelockData_Wakelock> T* add_wakelock() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_WakelockId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kRepeatedPacked,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      KernelWakelockData>;

  static constexpr FieldMetadata_WakelockId kWakelockId{};
  void set_wakelock_id(const ::protozero::PackedVarInt& packed_buffer) {
    AppendBytes(FieldMetadata_WakelockId::kFieldId, packed_buffer.data(),
                packed_buffer.size());
  }

  using FieldMetadata_TimeHeldMillis =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kRepeatedPacked,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      KernelWakelockData>;

  static constexpr FieldMetadata_TimeHeldMillis kTimeHeldMillis{};
  void set_time_held_millis(const ::protozero::PackedVarInt& packed_buffer) {
    AppendBytes(FieldMetadata_TimeHeldMillis::kFieldId, packed_buffer.data(),
                packed_buffer.size());
  }
};

class KernelWakelockData_Wakelock_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  KernelWakelockData_Wakelock_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit KernelWakelockData_Wakelock_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit KernelWakelockData_Wakelock_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_wakelock_id() const { return at<1>().valid(); }
  uint32_t wakelock_id() const { return at<1>().as_uint32(); }
  bool has_wakelock_name() const { return at<2>().valid(); }
  ::protozero::ConstChars wakelock_name() const { return at<2>().as_string(); }
  bool has_wakelock_type() const { return at<3>().valid(); }
  int32_t wakelock_type() const { return at<3>().as_int32(); }
};

class KernelWakelockData_Wakelock : public ::protozero::Message {
 public:
  using Decoder = KernelWakelockData_Wakelock_Decoder;
  enum : int32_t {
    kWakelockIdFieldNumber = 1,
    kWakelockNameFieldNumber = 2,
    kWakelockTypeFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.KernelWakelockData.Wakelock"; }


  using Type = ::perfetto::protos::pbzero::KernelWakelockData_Wakelock_Type;
  static inline const char* Type_Name(Type value) {
    return ::perfetto::protos::pbzero::KernelWakelockData_Wakelock_Type_Name(value);
  }
  static inline const Type WAKELOCK_TYPE_UNKNOWN = Type::WAKELOCK_TYPE_UNKNOWN;
  static inline const Type WAKELOCK_TYPE_KERNEL = Type::WAKELOCK_TYPE_KERNEL;
  static inline const Type WAKELOCK_TYPE_NATIVE = Type::WAKELOCK_TYPE_NATIVE;

  using FieldMetadata_WakelockId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      KernelWakelockData_Wakelock>;

  static constexpr FieldMetadata_WakelockId kWakelockId{};
  void set_wakelock_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_WakelockId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WakelockName =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      KernelWakelockData_Wakelock>;

  static constexpr FieldMetadata_WakelockName kWakelockName{};
  void set_wakelock_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_WakelockName::kFieldId, data, size);
  }
  void set_wakelock_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_WakelockName::kFieldId, chars.data, chars.size);
  }
  void set_wakelock_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_WakelockName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WakelockType =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      KernelWakelockData_Wakelock_Type,
      KernelWakelockData_Wakelock>;

  static constexpr FieldMetadata_WakelockType kWakelockType{};
  void set_wakelock_type(KernelWakelockData_Wakelock_Type value) {
    static constexpr uint32_t field_id = FieldMetadata_WakelockType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
