// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: neteq_unittest.proto
// Protobuf C++ Version: 6.30.1

#ifndef neteq_5funittest_2eproto_2epb_2eh
#define neteq_5funittest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_neteq_5funittest_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_neteq_5funittest_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace neteq_unittest {
class NetEqNetworkStatistics;
struct NetEqNetworkStatisticsDefaultTypeInternal;
extern NetEqNetworkStatisticsDefaultTypeInternal _NetEqNetworkStatistics_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<45> NetEqNetworkStatistics_class_data_;
class RtcpStatistics;
struct RtcpStatisticsDefaultTypeInternal;
extern RtcpStatisticsDefaultTypeInternal _RtcpStatistics_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<37> RtcpStatistics_class_data_;
}  // namespace neteq_unittest
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace neteq_unittest {

// ===================================================================


// -------------------------------------------------------------------

class RtcpStatistics final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.neteq_unittest.RtcpStatistics) */ {
 public:
  inline RtcpStatistics() : RtcpStatistics(nullptr) {}
  ~RtcpStatistics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RtcpStatistics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RtcpStatistics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RtcpStatistics(::google::protobuf::internal::ConstantInitialized);

  inline RtcpStatistics(const RtcpStatistics& from) : RtcpStatistics(nullptr, from) {}
  inline RtcpStatistics(RtcpStatistics&& from) noexcept
      : RtcpStatistics(nullptr, std::move(from)) {}
  inline RtcpStatistics& operator=(const RtcpStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcpStatistics& operator=(RtcpStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RtcpStatistics& default_instance() {
    return *reinterpret_cast<const RtcpStatistics*>(
        &_RtcpStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RtcpStatistics& a, RtcpStatistics& b) { a.Swap(&b); }
  inline void Swap(RtcpStatistics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcpStatistics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcpStatistics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<RtcpStatistics>(arena);
  }
  void CopyFrom(const RtcpStatistics& from);
  void MergeFrom(const RtcpStatistics& from) { RtcpStatistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RtcpStatistics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.neteq_unittest.RtcpStatistics"; }

 protected:
  explicit RtcpStatistics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RtcpStatistics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RtcpStatistics& from);
  RtcpStatistics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RtcpStatistics&& from) noexcept
      : RtcpStatistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFractionLostFieldNumber = 1,
    kCumulativeLostFieldNumber = 2,
    kExtendedMaxSequenceNumberFieldNumber = 3,
    kJitterFieldNumber = 4,
  };
  // optional uint32 fraction_lost = 1;
  bool has_fraction_lost() const;
  void clear_fraction_lost() ;
  ::uint32_t fraction_lost() const;
  void set_fraction_lost(::uint32_t value);

  private:
  ::uint32_t _internal_fraction_lost() const;
  void _internal_set_fraction_lost(::uint32_t value);

  public:
  // optional uint32 cumulative_lost = 2;
  bool has_cumulative_lost() const;
  void clear_cumulative_lost() ;
  ::uint32_t cumulative_lost() const;
  void set_cumulative_lost(::uint32_t value);

  private:
  ::uint32_t _internal_cumulative_lost() const;
  void _internal_set_cumulative_lost(::uint32_t value);

  public:
  // optional uint32 extended_max_sequence_number = 3;
  bool has_extended_max_sequence_number() const;
  void clear_extended_max_sequence_number() ;
  ::uint32_t extended_max_sequence_number() const;
  void set_extended_max_sequence_number(::uint32_t value);

  private:
  ::uint32_t _internal_extended_max_sequence_number() const;
  void _internal_set_extended_max_sequence_number(::uint32_t value);

  public:
  // optional uint32 jitter = 4;
  bool has_jitter() const;
  void clear_jitter() ;
  ::uint32_t jitter() const;
  void set_jitter(::uint32_t value);

  private:
  ::uint32_t _internal_jitter() const;
  void _internal_set_jitter(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.neteq_unittest.RtcpStatistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RtcpStatistics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t fraction_lost_;
    ::uint32_t cumulative_lost_;
    ::uint32_t extended_max_sequence_number_;
    ::uint32_t jitter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_neteq_5funittest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<37> RtcpStatistics_class_data_;
// -------------------------------------------------------------------

class NetEqNetworkStatistics final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.neteq_unittest.NetEqNetworkStatistics) */ {
 public:
  inline NetEqNetworkStatistics() : NetEqNetworkStatistics(nullptr) {}
  ~NetEqNetworkStatistics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetEqNetworkStatistics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetEqNetworkStatistics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetEqNetworkStatistics(::google::protobuf::internal::ConstantInitialized);

  inline NetEqNetworkStatistics(const NetEqNetworkStatistics& from) : NetEqNetworkStatistics(nullptr, from) {}
  inline NetEqNetworkStatistics(NetEqNetworkStatistics&& from) noexcept
      : NetEqNetworkStatistics(nullptr, std::move(from)) {}
  inline NetEqNetworkStatistics& operator=(const NetEqNetworkStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetEqNetworkStatistics& operator=(NetEqNetworkStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetEqNetworkStatistics& default_instance() {
    return *reinterpret_cast<const NetEqNetworkStatistics*>(
        &_NetEqNetworkStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NetEqNetworkStatistics& a, NetEqNetworkStatistics& b) { a.Swap(&b); }
  inline void Swap(NetEqNetworkStatistics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetEqNetworkStatistics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetEqNetworkStatistics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<NetEqNetworkStatistics>(arena);
  }
  void CopyFrom(const NetEqNetworkStatistics& from);
  void MergeFrom(const NetEqNetworkStatistics& from) { NetEqNetworkStatistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetEqNetworkStatistics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.neteq_unittest.NetEqNetworkStatistics"; }

 protected:
  explicit NetEqNetworkStatistics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NetEqNetworkStatistics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NetEqNetworkStatistics& from);
  NetEqNetworkStatistics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NetEqNetworkStatistics&& from) noexcept
      : NetEqNetworkStatistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCurrentBufferSizeMsFieldNumber = 1,
    kPreferredBufferSizeMsFieldNumber = 2,
    kJitterPeaksFoundFieldNumber = 3,
    kExpandRateFieldNumber = 6,
    kSpeechExpandRateFieldNumber = 7,
    kPreemptiveRateFieldNumber = 8,
    kAccelerateRateFieldNumber = 9,
    kSecondaryDecodedRateFieldNumber = 10,
    kClockdriftPpmFieldNumber = 11,
    kMeanWaitingTimeMsFieldNumber = 13,
    kMedianWaitingTimeMsFieldNumber = 14,
    kMinWaitingTimeMsFieldNumber = 15,
    kMaxWaitingTimeMsFieldNumber = 16,
    kSecondaryDiscardedRateFieldNumber = 17,
  };
  // optional uint32 current_buffer_size_ms = 1;
  bool has_current_buffer_size_ms() const;
  void clear_current_buffer_size_ms() ;
  ::uint32_t current_buffer_size_ms() const;
  void set_current_buffer_size_ms(::uint32_t value);

  private:
  ::uint32_t _internal_current_buffer_size_ms() const;
  void _internal_set_current_buffer_size_ms(::uint32_t value);

  public:
  // optional uint32 preferred_buffer_size_ms = 2;
  bool has_preferred_buffer_size_ms() const;
  void clear_preferred_buffer_size_ms() ;
  ::uint32_t preferred_buffer_size_ms() const;
  void set_preferred_buffer_size_ms(::uint32_t value);

  private:
  ::uint32_t _internal_preferred_buffer_size_ms() const;
  void _internal_set_preferred_buffer_size_ms(::uint32_t value);

  public:
  // optional uint32 jitter_peaks_found = 3;
  bool has_jitter_peaks_found() const;
  void clear_jitter_peaks_found() ;
  ::uint32_t jitter_peaks_found() const;
  void set_jitter_peaks_found(::uint32_t value);

  private:
  ::uint32_t _internal_jitter_peaks_found() const;
  void _internal_set_jitter_peaks_found(::uint32_t value);

  public:
  // optional uint32 expand_rate = 6;
  bool has_expand_rate() const;
  void clear_expand_rate() ;
  ::uint32_t expand_rate() const;
  void set_expand_rate(::uint32_t value);

  private:
  ::uint32_t _internal_expand_rate() const;
  void _internal_set_expand_rate(::uint32_t value);

  public:
  // optional uint32 speech_expand_rate = 7;
  bool has_speech_expand_rate() const;
  void clear_speech_expand_rate() ;
  ::uint32_t speech_expand_rate() const;
  void set_speech_expand_rate(::uint32_t value);

  private:
  ::uint32_t _internal_speech_expand_rate() const;
  void _internal_set_speech_expand_rate(::uint32_t value);

  public:
  // optional uint32 preemptive_rate = 8;
  bool has_preemptive_rate() const;
  void clear_preemptive_rate() ;
  ::uint32_t preemptive_rate() const;
  void set_preemptive_rate(::uint32_t value);

  private:
  ::uint32_t _internal_preemptive_rate() const;
  void _internal_set_preemptive_rate(::uint32_t value);

  public:
  // optional uint32 accelerate_rate = 9;
  bool has_accelerate_rate() const;
  void clear_accelerate_rate() ;
  ::uint32_t accelerate_rate() const;
  void set_accelerate_rate(::uint32_t value);

  private:
  ::uint32_t _internal_accelerate_rate() const;
  void _internal_set_accelerate_rate(::uint32_t value);

  public:
  // optional uint32 secondary_decoded_rate = 10;
  bool has_secondary_decoded_rate() const;
  void clear_secondary_decoded_rate() ;
  ::uint32_t secondary_decoded_rate() const;
  void set_secondary_decoded_rate(::uint32_t value);

  private:
  ::uint32_t _internal_secondary_decoded_rate() const;
  void _internal_set_secondary_decoded_rate(::uint32_t value);

  public:
  // optional int32 clockdrift_ppm = 11;
  bool has_clockdrift_ppm() const;
  void clear_clockdrift_ppm() ;
  ::int32_t clockdrift_ppm() const;
  void set_clockdrift_ppm(::int32_t value);

  private:
  ::int32_t _internal_clockdrift_ppm() const;
  void _internal_set_clockdrift_ppm(::int32_t value);

  public:
  // optional int32 mean_waiting_time_ms = 13;
  bool has_mean_waiting_time_ms() const;
  void clear_mean_waiting_time_ms() ;
  ::int32_t mean_waiting_time_ms() const;
  void set_mean_waiting_time_ms(::int32_t value);

  private:
  ::int32_t _internal_mean_waiting_time_ms() const;
  void _internal_set_mean_waiting_time_ms(::int32_t value);

  public:
  // optional int32 median_waiting_time_ms = 14;
  bool has_median_waiting_time_ms() const;
  void clear_median_waiting_time_ms() ;
  ::int32_t median_waiting_time_ms() const;
  void set_median_waiting_time_ms(::int32_t value);

  private:
  ::int32_t _internal_median_waiting_time_ms() const;
  void _internal_set_median_waiting_time_ms(::int32_t value);

  public:
  // optional int32 min_waiting_time_ms = 15;
  bool has_min_waiting_time_ms() const;
  void clear_min_waiting_time_ms() ;
  ::int32_t min_waiting_time_ms() const;
  void set_min_waiting_time_ms(::int32_t value);

  private:
  ::int32_t _internal_min_waiting_time_ms() const;
  void _internal_set_min_waiting_time_ms(::int32_t value);

  public:
  // optional int32 max_waiting_time_ms = 16;
  bool has_max_waiting_time_ms() const;
  void clear_max_waiting_time_ms() ;
  ::int32_t max_waiting_time_ms() const;
  void set_max_waiting_time_ms(::int32_t value);

  private:
  ::int32_t _internal_max_waiting_time_ms() const;
  void _internal_set_max_waiting_time_ms(::int32_t value);

  public:
  // optional uint32 secondary_discarded_rate = 17;
  bool has_secondary_discarded_rate() const;
  void clear_secondary_discarded_rate() ;
  ::uint32_t secondary_discarded_rate() const;
  void set_secondary_discarded_rate(::uint32_t value);

  private:
  ::uint32_t _internal_secondary_discarded_rate() const;
  void _internal_set_secondary_discarded_rate(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.neteq_unittest.NetEqNetworkStatistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 14,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NetEqNetworkStatistics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t current_buffer_size_ms_;
    ::uint32_t preferred_buffer_size_ms_;
    ::uint32_t jitter_peaks_found_;
    ::uint32_t expand_rate_;
    ::uint32_t speech_expand_rate_;
    ::uint32_t preemptive_rate_;
    ::uint32_t accelerate_rate_;
    ::uint32_t secondary_decoded_rate_;
    ::int32_t clockdrift_ppm_;
    ::int32_t mean_waiting_time_ms_;
    ::int32_t median_waiting_time_ms_;
    ::int32_t min_waiting_time_ms_;
    ::int32_t max_waiting_time_ms_;
    ::uint32_t secondary_discarded_rate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_neteq_5funittest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<45> NetEqNetworkStatistics_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NetEqNetworkStatistics

// optional uint32 current_buffer_size_ms = 1;
inline bool NetEqNetworkStatistics::has_current_buffer_size_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_current_buffer_size_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_buffer_size_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t NetEqNetworkStatistics::current_buffer_size_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.current_buffer_size_ms)
  return _internal_current_buffer_size_ms();
}
inline void NetEqNetworkStatistics::set_current_buffer_size_ms(::uint32_t value) {
  _internal_set_current_buffer_size_ms(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.current_buffer_size_ms)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_current_buffer_size_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_buffer_size_ms_;
}
inline void NetEqNetworkStatistics::_internal_set_current_buffer_size_ms(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_buffer_size_ms_ = value;
}

// optional uint32 preferred_buffer_size_ms = 2;
inline bool NetEqNetworkStatistics::has_preferred_buffer_size_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_preferred_buffer_size_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_buffer_size_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t NetEqNetworkStatistics::preferred_buffer_size_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.preferred_buffer_size_ms)
  return _internal_preferred_buffer_size_ms();
}
inline void NetEqNetworkStatistics::set_preferred_buffer_size_ms(::uint32_t value) {
  _internal_set_preferred_buffer_size_ms(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.preferred_buffer_size_ms)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_preferred_buffer_size_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preferred_buffer_size_ms_;
}
inline void NetEqNetworkStatistics::_internal_set_preferred_buffer_size_ms(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_buffer_size_ms_ = value;
}

// optional uint32 jitter_peaks_found = 3;
inline bool NetEqNetworkStatistics::has_jitter_peaks_found() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_jitter_peaks_found() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_peaks_found_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t NetEqNetworkStatistics::jitter_peaks_found() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.jitter_peaks_found)
  return _internal_jitter_peaks_found();
}
inline void NetEqNetworkStatistics::set_jitter_peaks_found(::uint32_t value) {
  _internal_set_jitter_peaks_found(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.jitter_peaks_found)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_jitter_peaks_found() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jitter_peaks_found_;
}
inline void NetEqNetworkStatistics::_internal_set_jitter_peaks_found(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_peaks_found_ = value;
}

// optional uint32 expand_rate = 6;
inline bool NetEqNetworkStatistics::has_expand_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_expand_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expand_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t NetEqNetworkStatistics::expand_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.expand_rate)
  return _internal_expand_rate();
}
inline void NetEqNetworkStatistics::set_expand_rate(::uint32_t value) {
  _internal_set_expand_rate(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.expand_rate)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_expand_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expand_rate_;
}
inline void NetEqNetworkStatistics::_internal_set_expand_rate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expand_rate_ = value;
}

// optional uint32 speech_expand_rate = 7;
inline bool NetEqNetworkStatistics::has_speech_expand_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_speech_expand_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speech_expand_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t NetEqNetworkStatistics::speech_expand_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.speech_expand_rate)
  return _internal_speech_expand_rate();
}
inline void NetEqNetworkStatistics::set_speech_expand_rate(::uint32_t value) {
  _internal_set_speech_expand_rate(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.speech_expand_rate)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_speech_expand_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speech_expand_rate_;
}
inline void NetEqNetworkStatistics::_internal_set_speech_expand_rate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speech_expand_rate_ = value;
}

// optional uint32 preemptive_rate = 8;
inline bool NetEqNetworkStatistics::has_preemptive_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_preemptive_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preemptive_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t NetEqNetworkStatistics::preemptive_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.preemptive_rate)
  return _internal_preemptive_rate();
}
inline void NetEqNetworkStatistics::set_preemptive_rate(::uint32_t value) {
  _internal_set_preemptive_rate(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.preemptive_rate)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_preemptive_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preemptive_rate_;
}
inline void NetEqNetworkStatistics::_internal_set_preemptive_rate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preemptive_rate_ = value;
}

// optional uint32 accelerate_rate = 9;
inline bool NetEqNetworkStatistics::has_accelerate_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_accelerate_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accelerate_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t NetEqNetworkStatistics::accelerate_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.accelerate_rate)
  return _internal_accelerate_rate();
}
inline void NetEqNetworkStatistics::set_accelerate_rate(::uint32_t value) {
  _internal_set_accelerate_rate(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.accelerate_rate)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_accelerate_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accelerate_rate_;
}
inline void NetEqNetworkStatistics::_internal_set_accelerate_rate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accelerate_rate_ = value;
}

// optional uint32 secondary_decoded_rate = 10;
inline bool NetEqNetworkStatistics::has_secondary_decoded_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_secondary_decoded_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_decoded_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t NetEqNetworkStatistics::secondary_decoded_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_decoded_rate)
  return _internal_secondary_decoded_rate();
}
inline void NetEqNetworkStatistics::set_secondary_decoded_rate(::uint32_t value) {
  _internal_set_secondary_decoded_rate(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_decoded_rate)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_secondary_decoded_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secondary_decoded_rate_;
}
inline void NetEqNetworkStatistics::_internal_set_secondary_decoded_rate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_decoded_rate_ = value;
}

// optional uint32 secondary_discarded_rate = 17;
inline bool NetEqNetworkStatistics::has_secondary_discarded_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_secondary_discarded_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_discarded_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t NetEqNetworkStatistics::secondary_discarded_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_discarded_rate)
  return _internal_secondary_discarded_rate();
}
inline void NetEqNetworkStatistics::set_secondary_discarded_rate(::uint32_t value) {
  _internal_set_secondary_discarded_rate(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.secondary_discarded_rate)
}
inline ::uint32_t NetEqNetworkStatistics::_internal_secondary_discarded_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secondary_discarded_rate_;
}
inline void NetEqNetworkStatistics::_internal_set_secondary_discarded_rate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_discarded_rate_ = value;
}

// optional int32 clockdrift_ppm = 11;
inline bool NetEqNetworkStatistics::has_clockdrift_ppm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_clockdrift_ppm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clockdrift_ppm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t NetEqNetworkStatistics::clockdrift_ppm() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.clockdrift_ppm)
  return _internal_clockdrift_ppm();
}
inline void NetEqNetworkStatistics::set_clockdrift_ppm(::int32_t value) {
  _internal_set_clockdrift_ppm(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.clockdrift_ppm)
}
inline ::int32_t NetEqNetworkStatistics::_internal_clockdrift_ppm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clockdrift_ppm_;
}
inline void NetEqNetworkStatistics::_internal_set_clockdrift_ppm(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clockdrift_ppm_ = value;
}

// optional int32 mean_waiting_time_ms = 13;
inline bool NetEqNetworkStatistics::has_mean_waiting_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_mean_waiting_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_waiting_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t NetEqNetworkStatistics::mean_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.mean_waiting_time_ms)
  return _internal_mean_waiting_time_ms();
}
inline void NetEqNetworkStatistics::set_mean_waiting_time_ms(::int32_t value) {
  _internal_set_mean_waiting_time_ms(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.mean_waiting_time_ms)
}
inline ::int32_t NetEqNetworkStatistics::_internal_mean_waiting_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mean_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::_internal_set_mean_waiting_time_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_waiting_time_ms_ = value;
}

// optional int32 median_waiting_time_ms = 14;
inline bool NetEqNetworkStatistics::has_median_waiting_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_median_waiting_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.median_waiting_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t NetEqNetworkStatistics::median_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.median_waiting_time_ms)
  return _internal_median_waiting_time_ms();
}
inline void NetEqNetworkStatistics::set_median_waiting_time_ms(::int32_t value) {
  _internal_set_median_waiting_time_ms(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.median_waiting_time_ms)
}
inline ::int32_t NetEqNetworkStatistics::_internal_median_waiting_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.median_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::_internal_set_median_waiting_time_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.median_waiting_time_ms_ = value;
}

// optional int32 min_waiting_time_ms = 15;
inline bool NetEqNetworkStatistics::has_min_waiting_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_min_waiting_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_waiting_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t NetEqNetworkStatistics::min_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.min_waiting_time_ms)
  return _internal_min_waiting_time_ms();
}
inline void NetEqNetworkStatistics::set_min_waiting_time_ms(::int32_t value) {
  _internal_set_min_waiting_time_ms(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.min_waiting_time_ms)
}
inline ::int32_t NetEqNetworkStatistics::_internal_min_waiting_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::_internal_set_min_waiting_time_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_waiting_time_ms_ = value;
}

// optional int32 max_waiting_time_ms = 16;
inline bool NetEqNetworkStatistics::has_max_waiting_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void NetEqNetworkStatistics::clear_max_waiting_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_waiting_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t NetEqNetworkStatistics::max_waiting_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.NetEqNetworkStatistics.max_waiting_time_ms)
  return _internal_max_waiting_time_ms();
}
inline void NetEqNetworkStatistics::set_max_waiting_time_ms(::int32_t value) {
  _internal_set_max_waiting_time_ms(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.NetEqNetworkStatistics.max_waiting_time_ms)
}
inline ::int32_t NetEqNetworkStatistics::_internal_max_waiting_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_waiting_time_ms_;
}
inline void NetEqNetworkStatistics::_internal_set_max_waiting_time_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_waiting_time_ms_ = value;
}

// -------------------------------------------------------------------

// RtcpStatistics

// optional uint32 fraction_lost = 1;
inline bool RtcpStatistics::has_fraction_lost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RtcpStatistics::clear_fraction_lost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_lost_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t RtcpStatistics::fraction_lost() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.fraction_lost)
  return _internal_fraction_lost();
}
inline void RtcpStatistics::set_fraction_lost(::uint32_t value) {
  _internal_set_fraction_lost(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.fraction_lost)
}
inline ::uint32_t RtcpStatistics::_internal_fraction_lost() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fraction_lost_;
}
inline void RtcpStatistics::_internal_set_fraction_lost(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_lost_ = value;
}

// optional uint32 cumulative_lost = 2;
inline bool RtcpStatistics::has_cumulative_lost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtcpStatistics::clear_cumulative_lost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cumulative_lost_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RtcpStatistics::cumulative_lost() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.cumulative_lost)
  return _internal_cumulative_lost();
}
inline void RtcpStatistics::set_cumulative_lost(::uint32_t value) {
  _internal_set_cumulative_lost(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.cumulative_lost)
}
inline ::uint32_t RtcpStatistics::_internal_cumulative_lost() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cumulative_lost_;
}
inline void RtcpStatistics::_internal_set_cumulative_lost(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cumulative_lost_ = value;
}

// optional uint32 extended_max_sequence_number = 3;
inline bool RtcpStatistics::has_extended_max_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RtcpStatistics::clear_extended_max_sequence_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extended_max_sequence_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t RtcpStatistics::extended_max_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.extended_max_sequence_number)
  return _internal_extended_max_sequence_number();
}
inline void RtcpStatistics::set_extended_max_sequence_number(::uint32_t value) {
  _internal_set_extended_max_sequence_number(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.extended_max_sequence_number)
}
inline ::uint32_t RtcpStatistics::_internal_extended_max_sequence_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extended_max_sequence_number_;
}
inline void RtcpStatistics::_internal_set_extended_max_sequence_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extended_max_sequence_number_ = value;
}

// optional uint32 jitter = 4;
inline bool RtcpStatistics::has_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RtcpStatistics::clear_jitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t RtcpStatistics::jitter() const {
  // @@protoc_insertion_point(field_get:webrtc.neteq_unittest.RtcpStatistics.jitter)
  return _internal_jitter();
}
inline void RtcpStatistics::set_jitter(::uint32_t value) {
  _internal_set_jitter(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.neteq_unittest.RtcpStatistics.jitter)
}
inline ::uint32_t RtcpStatistics::_internal_jitter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jitter_;
}
inline void RtcpStatistics::_internal_set_jitter(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace neteq_unittest
}  // namespace webrtc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // neteq_5funittest_2eproto_2epb_2eh
