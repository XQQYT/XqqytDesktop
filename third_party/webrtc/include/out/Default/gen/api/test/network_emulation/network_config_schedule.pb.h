// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: network_config_schedule.proto
// Protobuf C++ Version: 6.30.1

#ifndef network_5fconfig_5fschedule_2eproto_2epb_2eh
#define network_5fconfig_5fschedule_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_network_5fconfig_5fschedule_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5fconfig_5fschedule_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace network_behaviour {
class NetworkConfigSchedule;
struct NetworkConfigScheduleDefaultTypeInternal;
extern NetworkConfigScheduleDefaultTypeInternal _NetworkConfigSchedule_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<47> NetworkConfigSchedule_class_data_;
class NetworkConfigScheduleItem;
struct NetworkConfigScheduleItemDefaultTypeInternal;
extern NetworkConfigScheduleItemDefaultTypeInternal _NetworkConfigScheduleItem_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<51> NetworkConfigScheduleItem_class_data_;
}  // namespace network_behaviour
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace network_behaviour {

// ===================================================================


// -------------------------------------------------------------------

class NetworkConfigScheduleItem final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.network_behaviour.NetworkConfigScheduleItem) */ {
 public:
  inline NetworkConfigScheduleItem() : NetworkConfigScheduleItem(nullptr) {}
  ~NetworkConfigScheduleItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkConfigScheduleItem* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkConfigScheduleItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkConfigScheduleItem(::google::protobuf::internal::ConstantInitialized);

  inline NetworkConfigScheduleItem(const NetworkConfigScheduleItem& from) : NetworkConfigScheduleItem(nullptr, from) {}
  inline NetworkConfigScheduleItem(NetworkConfigScheduleItem&& from) noexcept
      : NetworkConfigScheduleItem(nullptr, std::move(from)) {}
  inline NetworkConfigScheduleItem& operator=(const NetworkConfigScheduleItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConfigScheduleItem& operator=(NetworkConfigScheduleItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkConfigScheduleItem& default_instance() {
    return *reinterpret_cast<const NetworkConfigScheduleItem*>(
        &_NetworkConfigScheduleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NetworkConfigScheduleItem& a, NetworkConfigScheduleItem& b) { a.Swap(&b); }
  inline void Swap(NetworkConfigScheduleItem* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkConfigScheduleItem* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkConfigScheduleItem* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<NetworkConfigScheduleItem>(arena);
  }
  void CopyFrom(const NetworkConfigScheduleItem& from);
  void MergeFrom(const NetworkConfigScheduleItem& from) { NetworkConfigScheduleItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkConfigScheduleItem* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.network_behaviour.NetworkConfigScheduleItem"; }

 protected:
  explicit NetworkConfigScheduleItem(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NetworkConfigScheduleItem(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NetworkConfigScheduleItem& from);
  NetworkConfigScheduleItem(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NetworkConfigScheduleItem&& from) noexcept
      : NetworkConfigScheduleItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeSinceFirstSentPacketMsFieldNumber = 1,
    kQueueLengthPacketsFieldNumber = 2,
    kQueueDelayMsFieldNumber = 3,
    kLinkCapacityKbpsFieldNumber = 4,
    kLossPercentFieldNumber = 5,
    kDelayStandardDeviationMsFieldNumber = 6,
    kAvgBurstLossLengthFieldNumber = 8,
    kPacketOverheadFieldNumber = 9,
    kAllowReorderingFieldNumber = 7,
  };
  // optional int64 time_since_first_sent_packet_ms = 1;
  bool has_time_since_first_sent_packet_ms() const;
  void clear_time_since_first_sent_packet_ms() ;
  ::int64_t time_since_first_sent_packet_ms() const;
  void set_time_since_first_sent_packet_ms(::int64_t value);

  private:
  ::int64_t _internal_time_since_first_sent_packet_ms() const;
  void _internal_set_time_since_first_sent_packet_ms(::int64_t value);

  public:
  // optional int64 queue_length_packets = 2;
  bool has_queue_length_packets() const;
  void clear_queue_length_packets() ;
  ::int64_t queue_length_packets() const;
  void set_queue_length_packets(::int64_t value);

  private:
  ::int64_t _internal_queue_length_packets() const;
  void _internal_set_queue_length_packets(::int64_t value);

  public:
  // optional int64 queue_delay_ms = 3;
  bool has_queue_delay_ms() const;
  void clear_queue_delay_ms() ;
  ::int64_t queue_delay_ms() const;
  void set_queue_delay_ms(::int64_t value);

  private:
  ::int64_t _internal_queue_delay_ms() const;
  void _internal_set_queue_delay_ms(::int64_t value);

  public:
  // optional int64 link_capacity_kbps = 4;
  bool has_link_capacity_kbps() const;
  void clear_link_capacity_kbps() ;
  ::int64_t link_capacity_kbps() const;
  void set_link_capacity_kbps(::int64_t value);

  private:
  ::int64_t _internal_link_capacity_kbps() const;
  void _internal_set_link_capacity_kbps(::int64_t value);

  public:
  // optional int64 loss_percent = 5;
  bool has_loss_percent() const;
  void clear_loss_percent() ;
  ::int64_t loss_percent() const;
  void set_loss_percent(::int64_t value);

  private:
  ::int64_t _internal_loss_percent() const;
  void _internal_set_loss_percent(::int64_t value);

  public:
  // optional int64 delay_standard_deviation_ms = 6;
  bool has_delay_standard_deviation_ms() const;
  void clear_delay_standard_deviation_ms() ;
  ::int64_t delay_standard_deviation_ms() const;
  void set_delay_standard_deviation_ms(::int64_t value);

  private:
  ::int64_t _internal_delay_standard_deviation_ms() const;
  void _internal_set_delay_standard_deviation_ms(::int64_t value);

  public:
  // optional int64 avg_burst_loss_length = 8;
  bool has_avg_burst_loss_length() const;
  void clear_avg_burst_loss_length() ;
  ::int64_t avg_burst_loss_length() const;
  void set_avg_burst_loss_length(::int64_t value);

  private:
  ::int64_t _internal_avg_burst_loss_length() const;
  void _internal_set_avg_burst_loss_length(::int64_t value);

  public:
  // optional int64 packet_overhead = 9;
  bool has_packet_overhead() const;
  void clear_packet_overhead() ;
  ::int64_t packet_overhead() const;
  void set_packet_overhead(::int64_t value);

  private:
  ::int64_t _internal_packet_overhead() const;
  void _internal_set_packet_overhead(::int64_t value);

  public:
  // optional bool allow_reordering = 7;
  bool has_allow_reordering() const;
  void clear_allow_reordering() ;
  bool allow_reordering() const;
  void set_allow_reordering(bool value);

  private:
  bool _internal_allow_reordering() const;
  void _internal_set_allow_reordering(bool value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.network_behaviour.NetworkConfigScheduleItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NetworkConfigScheduleItem& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t time_since_first_sent_packet_ms_;
    ::int64_t queue_length_packets_;
    ::int64_t queue_delay_ms_;
    ::int64_t link_capacity_kbps_;
    ::int64_t loss_percent_;
    ::int64_t delay_standard_deviation_ms_;
    ::int64_t avg_burst_loss_length_;
    ::int64_t packet_overhead_;
    bool allow_reordering_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fconfig_5fschedule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<51> NetworkConfigScheduleItem_class_data_;
// -------------------------------------------------------------------

class NetworkConfigSchedule final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.network_behaviour.NetworkConfigSchedule) */ {
 public:
  inline NetworkConfigSchedule() : NetworkConfigSchedule(nullptr) {}
  ~NetworkConfigSchedule() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkConfigSchedule* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkConfigSchedule));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkConfigSchedule(::google::protobuf::internal::ConstantInitialized);

  inline NetworkConfigSchedule(const NetworkConfigSchedule& from) : NetworkConfigSchedule(nullptr, from) {}
  inline NetworkConfigSchedule(NetworkConfigSchedule&& from) noexcept
      : NetworkConfigSchedule(nullptr, std::move(from)) {}
  inline NetworkConfigSchedule& operator=(const NetworkConfigSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConfigSchedule& operator=(NetworkConfigSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkConfigSchedule& default_instance() {
    return *reinterpret_cast<const NetworkConfigSchedule*>(
        &_NetworkConfigSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NetworkConfigSchedule& a, NetworkConfigSchedule& b) { a.Swap(&b); }
  inline void Swap(NetworkConfigSchedule* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkConfigSchedule* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkConfigSchedule* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<NetworkConfigSchedule>(arena);
  }
  void CopyFrom(const NetworkConfigSchedule& from);
  void MergeFrom(const NetworkConfigSchedule& from) { NetworkConfigSchedule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkConfigSchedule* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.network_behaviour.NetworkConfigSchedule"; }

 protected:
  explicit NetworkConfigSchedule(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NetworkConfigSchedule(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NetworkConfigSchedule& from);
  NetworkConfigSchedule(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NetworkConfigSchedule&& from) noexcept
      : NetworkConfigSchedule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemFieldNumber = 2,
    kRepeatScheduleAfterLastMsFieldNumber = 1,
  };
  // repeated .webrtc.network_behaviour.NetworkConfigScheduleItem item = 2;
  int item_size() const;
  private:
  int _internal_item_size() const;

  public:
  void clear_item() ;
  ::webrtc::network_behaviour::NetworkConfigScheduleItem* PROTOBUF_NONNULL mutable_item(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>* PROTOBUF_NONNULL mutable_item();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>& _internal_item() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>* PROTOBUF_NONNULL _internal_mutable_item();
  public:
  const ::webrtc::network_behaviour::NetworkConfigScheduleItem& item(int index) const;
  ::webrtc::network_behaviour::NetworkConfigScheduleItem* PROTOBUF_NONNULL add_item();
  const ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>& item() const;
  // optional int64 repeat_schedule_after_last_ms = 1;
  bool has_repeat_schedule_after_last_ms() const;
  void clear_repeat_schedule_after_last_ms() ;
  ::int64_t repeat_schedule_after_last_ms() const;
  void set_repeat_schedule_after_last_ms(::int64_t value);

  private:
  ::int64_t _internal_repeat_schedule_after_last_ms() const;
  void _internal_set_repeat_schedule_after_last_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.network_behaviour.NetworkConfigSchedule)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NetworkConfigSchedule& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::network_behaviour::NetworkConfigScheduleItem > item_;
    ::int64_t repeat_schedule_after_last_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fconfig_5fschedule_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<47> NetworkConfigSchedule_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NetworkConfigScheduleItem

// optional int64 time_since_first_sent_packet_ms = 1;
inline bool NetworkConfigScheduleItem::has_time_since_first_sent_packet_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_time_since_first_sent_packet_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_since_first_sent_packet_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t NetworkConfigScheduleItem::time_since_first_sent_packet_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.time_since_first_sent_packet_ms)
  return _internal_time_since_first_sent_packet_ms();
}
inline void NetworkConfigScheduleItem::set_time_since_first_sent_packet_ms(::int64_t value) {
  _internal_set_time_since_first_sent_packet_ms(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.time_since_first_sent_packet_ms)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_time_since_first_sent_packet_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_since_first_sent_packet_ms_;
}
inline void NetworkConfigScheduleItem::_internal_set_time_since_first_sent_packet_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_since_first_sent_packet_ms_ = value;
}

// optional int64 queue_length_packets = 2;
inline bool NetworkConfigScheduleItem::has_queue_length_packets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_queue_length_packets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_length_packets_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t NetworkConfigScheduleItem::queue_length_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.queue_length_packets)
  return _internal_queue_length_packets();
}
inline void NetworkConfigScheduleItem::set_queue_length_packets(::int64_t value) {
  _internal_set_queue_length_packets(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.queue_length_packets)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_queue_length_packets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_length_packets_;
}
inline void NetworkConfigScheduleItem::_internal_set_queue_length_packets(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_length_packets_ = value;
}

// optional int64 queue_delay_ms = 3;
inline bool NetworkConfigScheduleItem::has_queue_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_queue_delay_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_delay_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t NetworkConfigScheduleItem::queue_delay_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.queue_delay_ms)
  return _internal_queue_delay_ms();
}
inline void NetworkConfigScheduleItem::set_queue_delay_ms(::int64_t value) {
  _internal_set_queue_delay_ms(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.queue_delay_ms)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_queue_delay_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_delay_ms_;
}
inline void NetworkConfigScheduleItem::_internal_set_queue_delay_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_delay_ms_ = value;
}

// optional int64 link_capacity_kbps = 4;
inline bool NetworkConfigScheduleItem::has_link_capacity_kbps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_link_capacity_kbps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link_capacity_kbps_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t NetworkConfigScheduleItem::link_capacity_kbps() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.link_capacity_kbps)
  return _internal_link_capacity_kbps();
}
inline void NetworkConfigScheduleItem::set_link_capacity_kbps(::int64_t value) {
  _internal_set_link_capacity_kbps(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.link_capacity_kbps)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_link_capacity_kbps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.link_capacity_kbps_;
}
inline void NetworkConfigScheduleItem::_internal_set_link_capacity_kbps(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link_capacity_kbps_ = value;
}

// optional int64 loss_percent = 5;
inline bool NetworkConfigScheduleItem::has_loss_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_loss_percent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loss_percent_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t NetworkConfigScheduleItem::loss_percent() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.loss_percent)
  return _internal_loss_percent();
}
inline void NetworkConfigScheduleItem::set_loss_percent(::int64_t value) {
  _internal_set_loss_percent(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.loss_percent)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_loss_percent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.loss_percent_;
}
inline void NetworkConfigScheduleItem::_internal_set_loss_percent(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loss_percent_ = value;
}

// optional int64 delay_standard_deviation_ms = 6;
inline bool NetworkConfigScheduleItem::has_delay_standard_deviation_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_delay_standard_deviation_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delay_standard_deviation_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t NetworkConfigScheduleItem::delay_standard_deviation_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.delay_standard_deviation_ms)
  return _internal_delay_standard_deviation_ms();
}
inline void NetworkConfigScheduleItem::set_delay_standard_deviation_ms(::int64_t value) {
  _internal_set_delay_standard_deviation_ms(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.delay_standard_deviation_ms)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_delay_standard_deviation_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delay_standard_deviation_ms_;
}
inline void NetworkConfigScheduleItem::_internal_set_delay_standard_deviation_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delay_standard_deviation_ms_ = value;
}

// optional bool allow_reordering = 7;
inline bool NetworkConfigScheduleItem::has_allow_reordering() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_allow_reordering() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_reordering_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool NetworkConfigScheduleItem::allow_reordering() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.allow_reordering)
  return _internal_allow_reordering();
}
inline void NetworkConfigScheduleItem::set_allow_reordering(bool value) {
  _internal_set_allow_reordering(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.allow_reordering)
}
inline bool NetworkConfigScheduleItem::_internal_allow_reordering() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_reordering_;
}
inline void NetworkConfigScheduleItem::_internal_set_allow_reordering(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_reordering_ = value;
}

// optional int64 avg_burst_loss_length = 8;
inline bool NetworkConfigScheduleItem::has_avg_burst_loss_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_avg_burst_loss_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_burst_loss_length_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t NetworkConfigScheduleItem::avg_burst_loss_length() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.avg_burst_loss_length)
  return _internal_avg_burst_loss_length();
}
inline void NetworkConfigScheduleItem::set_avg_burst_loss_length(::int64_t value) {
  _internal_set_avg_burst_loss_length(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.avg_burst_loss_length)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_avg_burst_loss_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avg_burst_loss_length_;
}
inline void NetworkConfigScheduleItem::_internal_set_avg_burst_loss_length(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_burst_loss_length_ = value;
}

// optional int64 packet_overhead = 9;
inline bool NetworkConfigScheduleItem::has_packet_overhead() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void NetworkConfigScheduleItem::clear_packet_overhead() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_overhead_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t NetworkConfigScheduleItem::packet_overhead() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigScheduleItem.packet_overhead)
  return _internal_packet_overhead();
}
inline void NetworkConfigScheduleItem::set_packet_overhead(::int64_t value) {
  _internal_set_packet_overhead(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigScheduleItem.packet_overhead)
}
inline ::int64_t NetworkConfigScheduleItem::_internal_packet_overhead() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_overhead_;
}
inline void NetworkConfigScheduleItem::_internal_set_packet_overhead(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_overhead_ = value;
}

// -------------------------------------------------------------------

// NetworkConfigSchedule

// optional int64 repeat_schedule_after_last_ms = 1;
inline bool NetworkConfigSchedule::has_repeat_schedule_after_last_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetworkConfigSchedule::clear_repeat_schedule_after_last_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.repeat_schedule_after_last_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t NetworkConfigSchedule::repeat_schedule_after_last_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigSchedule.repeat_schedule_after_last_ms)
  return _internal_repeat_schedule_after_last_ms();
}
inline void NetworkConfigSchedule::set_repeat_schedule_after_last_ms(::int64_t value) {
  _internal_set_repeat_schedule_after_last_ms(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.network_behaviour.NetworkConfigSchedule.repeat_schedule_after_last_ms)
}
inline ::int64_t NetworkConfigSchedule::_internal_repeat_schedule_after_last_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.repeat_schedule_after_last_ms_;
}
inline void NetworkConfigSchedule::_internal_set_repeat_schedule_after_last_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.repeat_schedule_after_last_ms_ = value;
}

// repeated .webrtc.network_behaviour.NetworkConfigScheduleItem item = 2;
inline int NetworkConfigSchedule::_internal_item_size() const {
  return _internal_item().size();
}
inline int NetworkConfigSchedule::item_size() const {
  return _internal_item_size();
}
inline void NetworkConfigSchedule::clear_item() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.item_.Clear();
}
inline ::webrtc::network_behaviour::NetworkConfigScheduleItem* PROTOBUF_NONNULL NetworkConfigSchedule::mutable_item(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.network_behaviour.NetworkConfigSchedule.item)
  return _internal_mutable_item()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>* PROTOBUF_NONNULL NetworkConfigSchedule::mutable_item()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.network_behaviour.NetworkConfigSchedule.item)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_item();
}
inline const ::webrtc::network_behaviour::NetworkConfigScheduleItem& NetworkConfigSchedule::item(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.network_behaviour.NetworkConfigSchedule.item)
  return _internal_item().Get(index);
}
inline ::webrtc::network_behaviour::NetworkConfigScheduleItem* PROTOBUF_NONNULL NetworkConfigSchedule::add_item()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::network_behaviour::NetworkConfigScheduleItem* _add = _internal_mutable_item()->Add();
  // @@protoc_insertion_point(field_add:webrtc.network_behaviour.NetworkConfigSchedule.item)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>& NetworkConfigSchedule::item() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.network_behaviour.NetworkConfigSchedule.item)
  return _internal_item();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>&
NetworkConfigSchedule::_internal_item() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.item_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::network_behaviour::NetworkConfigScheduleItem>* PROTOBUF_NONNULL
NetworkConfigSchedule::_internal_mutable_item() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.item_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace network_behaviour
}  // namespace webrtc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // network_5fconfig_5fschedule_2eproto_2epb_2eh
