// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: metric.proto
// Protobuf C++ Version: 6.30.1

#ifndef metric_2eproto_2epb_2eh
#define metric_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_type_handler.h"  // IWYU pragma: export
#include "google/protobuf/map_field_lite.h"
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_metric_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_metric_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace test_metrics {
enum ImprovementDirection : int;
extern const uint32_t ImprovementDirection_internal_data_[];
enum Unit : int;
extern const uint32_t Unit_internal_data_[];
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<27> Metric_class_data_;
class Metric_Stats;
struct Metric_StatsDefaultTypeInternal;
extern Metric_StatsDefaultTypeInternal _Metric_Stats_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<33> Metric_Stats_class_data_;
class Metric_TimeSeries;
struct Metric_TimeSeriesDefaultTypeInternal;
extern Metric_TimeSeriesDefaultTypeInternal _Metric_TimeSeries_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<38> Metric_TimeSeries_class_data_;
class Metric_TimeSeries_Sample;
struct Metric_TimeSeries_SampleDefaultTypeInternal;
extern Metric_TimeSeries_SampleDefaultTypeInternal _Metric_TimeSeries_Sample_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<45> Metric_TimeSeries_Sample_class_data_;
class MetricsSet;
struct MetricsSetDefaultTypeInternal;
extern MetricsSetDefaultTypeInternal _MetricsSet_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<31> MetricsSet_class_data_;
}  // namespace test_metrics
}  // namespace webrtc
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::webrtc::test_metrics::ImprovementDirection_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::test_metrics::ImprovementDirection>;
template <>
internal::EnumTraitsT<::webrtc::test_metrics::Unit_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::test_metrics::Unit>;
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace test_metrics {
enum Unit : int {
  UNDEFINED_UNIT = 0,
  UNITLESS = 1,
  MILLISECONDS = 2,
  PERCENT = 3,
  BYTES = 4,
  KILOBITS_PER_SECOND = 5,
  HERTZ = 6,
  COUNT = 7,
  Unit_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Unit_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Unit_internal_data_[];
inline constexpr Unit Unit_MIN =
    static_cast<Unit>(0);
inline constexpr Unit Unit_MAX =
    static_cast<Unit>(7);
inline bool Unit_IsValid(int value) {
  return 0 <= value && value <= 7;
}
inline constexpr int Unit_ARRAYSIZE = 7 + 1;
const std::string& Unit_Name(Unit value);
template <typename T>
const std::string& Unit_Name(T value) {
  static_assert(std::is_same<T, Unit>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Unit_Name().");
  return Unit_Name(static_cast<Unit>(value));
}
bool Unit_Parse(
    absl::string_view name, Unit* PROTOBUF_NONNULL value);
enum ImprovementDirection : int {
  UNDEFINED_IMPROVEMENT_DIRECTION = 0,
  BIGGER_IS_BETTER = 1,
  NEITHER_IS_BETTER = 2,
  SMALLER_IS_BETTER = 3,
  ImprovementDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ImprovementDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ImprovementDirection_internal_data_[];
inline constexpr ImprovementDirection ImprovementDirection_MIN =
    static_cast<ImprovementDirection>(0);
inline constexpr ImprovementDirection ImprovementDirection_MAX =
    static_cast<ImprovementDirection>(3);
inline bool ImprovementDirection_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int ImprovementDirection_ARRAYSIZE = 3 + 1;
const std::string& ImprovementDirection_Name(ImprovementDirection value);
template <typename T>
const std::string& ImprovementDirection_Name(T value) {
  static_assert(std::is_same<T, ImprovementDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImprovementDirection_Name().");
  return ImprovementDirection_Name(static_cast<ImprovementDirection>(value));
}
bool ImprovementDirection_Parse(
    absl::string_view name, ImprovementDirection* PROTOBUF_NONNULL value);

// ===================================================================


// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

class Metric_Stats final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.test_metrics.Metric.Stats) */ {
 public:
  inline Metric_Stats() : Metric_Stats(nullptr) {}
  ~Metric_Stats() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metric_Stats* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metric_Stats));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metric_Stats(::google::protobuf::internal::ConstantInitialized);

  inline Metric_Stats(const Metric_Stats& from) : Metric_Stats(nullptr, from) {}
  inline Metric_Stats(Metric_Stats&& from) noexcept
      : Metric_Stats(nullptr, std::move(from)) {}
  inline Metric_Stats& operator=(const Metric_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric_Stats& operator=(Metric_Stats&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Metric_Stats& default_instance() {
    return *reinterpret_cast<const Metric_Stats*>(
        &_Metric_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Metric_Stats& a, Metric_Stats& b) { a.Swap(&b); }
  inline void Swap(Metric_Stats* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric_Stats* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric_Stats* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Metric_Stats>(arena);
  }
  void CopyFrom(const Metric_Stats& from);
  void MergeFrom(const Metric_Stats& from) { Metric_Stats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metric_Stats* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.test_metrics.Metric.Stats"; }

 protected:
  explicit Metric_Stats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Metric_Stats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Metric_Stats& from);
  Metric_Stats(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Metric_Stats&& from) noexcept
      : Metric_Stats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMeanFieldNumber = 1,
    kStddevFieldNumber = 2,
    kMinFieldNumber = 3,
    kMaxFieldNumber = 4,
  };
  // optional double mean = 1;
  bool has_mean() const;
  void clear_mean() ;
  double mean() const;
  void set_mean(double value);

  private:
  double _internal_mean() const;
  void _internal_set_mean(double value);

  public:
  // optional double stddev = 2;
  bool has_stddev() const;
  void clear_stddev() ;
  double stddev() const;
  void set_stddev(double value);

  private:
  double _internal_stddev() const;
  void _internal_set_stddev(double value);

  public:
  // optional double min = 3;
  bool has_min() const;
  void clear_min() ;
  double min() const;
  void set_min(double value);

  private:
  double _internal_min() const;
  void _internal_set_min(double value);

  public:
  // optional double max = 4;
  bool has_max() const;
  void clear_max() ;
  double max() const;
  void set_max(double value);

  private:
  double _internal_max() const;
  void _internal_set_max(double value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.test_metrics.Metric.Stats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Metric_Stats& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    double mean_;
    double stddev_;
    double min_;
    double max_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metric_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<33> Metric_Stats_class_data_;
// -------------------------------------------------------------------

// -------------------------------------------------------------------

class Metric_TimeSeries_Sample final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.test_metrics.Metric.TimeSeries.Sample) */ {
 public:
  inline Metric_TimeSeries_Sample() : Metric_TimeSeries_Sample(nullptr) {}
  ~Metric_TimeSeries_Sample() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metric_TimeSeries_Sample* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metric_TimeSeries_Sample));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metric_TimeSeries_Sample(::google::protobuf::internal::ConstantInitialized);

  inline Metric_TimeSeries_Sample(const Metric_TimeSeries_Sample& from) : Metric_TimeSeries_Sample(nullptr, from) {}
  inline Metric_TimeSeries_Sample(Metric_TimeSeries_Sample&& from) noexcept
      : Metric_TimeSeries_Sample(nullptr, std::move(from)) {}
  inline Metric_TimeSeries_Sample& operator=(const Metric_TimeSeries_Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric_TimeSeries_Sample& operator=(Metric_TimeSeries_Sample&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Metric_TimeSeries_Sample& default_instance() {
    return *reinterpret_cast<const Metric_TimeSeries_Sample*>(
        &_Metric_TimeSeries_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Metric_TimeSeries_Sample& a, Metric_TimeSeries_Sample& b) { a.Swap(&b); }
  inline void Swap(Metric_TimeSeries_Sample* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric_TimeSeries_Sample* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric_TimeSeries_Sample* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Metric_TimeSeries_Sample>(arena);
  }
  void CopyFrom(const Metric_TimeSeries_Sample& from);
  void MergeFrom(const Metric_TimeSeries_Sample& from) { Metric_TimeSeries_Sample::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metric_TimeSeries_Sample* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.test_metrics.Metric.TimeSeries.Sample"; }

 protected:
  explicit Metric_TimeSeries_Sample(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Metric_TimeSeries_Sample(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Metric_TimeSeries_Sample& from);
  Metric_TimeSeries_Sample(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Metric_TimeSeries_Sample&& from) noexcept
      : Metric_TimeSeries_Sample(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSampleMetadataFieldNumber = 3,
    kTimestampUsFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // map<string, string> sample_metadata = 3;
  int sample_metadata_size() const;
  private:
  int _internal_sample_metadata_size() const;

  public:
  void clear_sample_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& sample_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_sample_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_sample_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_sample_metadata();

  public:
  // int64 timestamp_us = 1;
  void clear_timestamp_us() ;
  ::int64_t timestamp_us() const;
  void set_timestamp_us(::int64_t value);

  private:
  ::int64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::int64_t value);

  public:
  // double value = 2;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.test_metrics.Metric.TimeSeries.Sample)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 3,
                                   1, 68,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Metric_TimeSeries_Sample& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapFieldLite<std::string, std::string> sample_metadata_;
    ::int64_t timestamp_us_;
    double value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metric_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<45> Metric_TimeSeries_Sample_class_data_;
// -------------------------------------------------------------------

class Metric_TimeSeries final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.test_metrics.Metric.TimeSeries) */ {
 public:
  inline Metric_TimeSeries() : Metric_TimeSeries(nullptr) {}
  ~Metric_TimeSeries() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metric_TimeSeries* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metric_TimeSeries));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metric_TimeSeries(::google::protobuf::internal::ConstantInitialized);

  inline Metric_TimeSeries(const Metric_TimeSeries& from) : Metric_TimeSeries(nullptr, from) {}
  inline Metric_TimeSeries(Metric_TimeSeries&& from) noexcept
      : Metric_TimeSeries(nullptr, std::move(from)) {}
  inline Metric_TimeSeries& operator=(const Metric_TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric_TimeSeries& operator=(Metric_TimeSeries&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Metric_TimeSeries& default_instance() {
    return *reinterpret_cast<const Metric_TimeSeries*>(
        &_Metric_TimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Metric_TimeSeries& a, Metric_TimeSeries& b) { a.Swap(&b); }
  inline void Swap(Metric_TimeSeries* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric_TimeSeries* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric_TimeSeries* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Metric_TimeSeries>(arena);
  }
  void CopyFrom(const Metric_TimeSeries& from);
  void MergeFrom(const Metric_TimeSeries& from) { Metric_TimeSeries::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metric_TimeSeries* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.test_metrics.Metric.TimeSeries"; }

 protected:
  explicit Metric_TimeSeries(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Metric_TimeSeries(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Metric_TimeSeries& from);
  Metric_TimeSeries(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Metric_TimeSeries&& from) noexcept
      : Metric_TimeSeries(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using Sample = Metric_TimeSeries_Sample;

  // accessors -------------------------------------------------------
  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated .webrtc.test_metrics.Metric.TimeSeries.Sample samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  ::webrtc::test_metrics::Metric_TimeSeries_Sample* PROTOBUF_NONNULL mutable_samples(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>* PROTOBUF_NONNULL mutable_samples();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>& _internal_samples() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>* PROTOBUF_NONNULL _internal_mutable_samples();
  public:
  const ::webrtc::test_metrics::Metric_TimeSeries_Sample& samples(int index) const;
  ::webrtc::test_metrics::Metric_TimeSeries_Sample* PROTOBUF_NONNULL add_samples();
  const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>& samples() const;
  // @@protoc_insertion_point(class_scope:webrtc.test_metrics.Metric.TimeSeries)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Metric_TimeSeries& from_msg);
    ::google::protobuf::RepeatedPtrField< ::webrtc::test_metrics::Metric_TimeSeries_Sample > samples_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metric_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<38> Metric_TimeSeries_class_data_;
// -------------------------------------------------------------------

class Metric final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.test_metrics.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metric* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metric));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metric(::google::protobuf::internal::ConstantInitialized);

  inline Metric(const Metric& from) : Metric(nullptr, from) {}
  inline Metric(Metric&& from) noexcept
      : Metric(nullptr, std::move(from)) {}
  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Metric& default_instance() {
    return *reinterpret_cast<const Metric*>(
        &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Metric& a, Metric& b) { a.Swap(&b); }
  inline void Swap(Metric* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Metric>(arena);
  }
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from) { Metric::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metric* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.test_metrics.Metric"; }

 protected:
  explicit Metric(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Metric(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Metric& from);
  Metric(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Metric&& from) noexcept
      : Metric(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using TimeSeries = Metric_TimeSeries;
  using Stats = Metric_Stats;

  // accessors -------------------------------------------------------
  enum : int {
    kMetricMetadataFieldNumber = 5,
    kNameFieldNumber = 1,
    kTestCaseFieldNumber = 4,
    kTimeSeriesFieldNumber = 6,
    kStatsFieldNumber = 7,
    kUnitFieldNumber = 2,
    kImprovementDirectionFieldNumber = 3,
  };
  // map<string, string> metric_metadata = 5;
  int metric_metadata_size() const;
  private:
  int _internal_metric_metadata_size() const;

  public:
  void clear_metric_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metric_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_metric_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metric_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_metric_metadata();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // string test_case = 4;
  void clear_test_case() ;
  const std::string& test_case() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_test_case(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_test_case();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_test_case();
  void set_allocated_test_case(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_test_case() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_test_case(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_test_case();

  public:
  // .webrtc.test_metrics.Metric.TimeSeries time_series = 6;
  bool has_time_series() const;
  void clear_time_series() ;
  const ::webrtc::test_metrics::Metric_TimeSeries& time_series() const;
  [[nodiscard]] ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE release_time_series();
  ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NONNULL mutable_time_series();
  void set_allocated_time_series(::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_time_series(::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE value);
  ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE unsafe_arena_release_time_series();

  private:
  const ::webrtc::test_metrics::Metric_TimeSeries& _internal_time_series() const;
  ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NONNULL _internal_mutable_time_series();

  public:
  // .webrtc.test_metrics.Metric.Stats stats = 7;
  bool has_stats() const;
  void clear_stats() ;
  const ::webrtc::test_metrics::Metric_Stats& stats() const;
  [[nodiscard]] ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE release_stats();
  ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NONNULL mutable_stats();
  void set_allocated_stats(::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_stats(::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE value);
  ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE unsafe_arena_release_stats();

  private:
  const ::webrtc::test_metrics::Metric_Stats& _internal_stats() const;
  ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NONNULL _internal_mutable_stats();

  public:
  // .webrtc.test_metrics.Unit unit = 2;
  void clear_unit() ;
  ::webrtc::test_metrics::Unit unit() const;
  void set_unit(::webrtc::test_metrics::Unit value);

  private:
  ::webrtc::test_metrics::Unit _internal_unit() const;
  void _internal_set_unit(::webrtc::test_metrics::Unit value);

  public:
  // .webrtc.test_metrics.ImprovementDirection improvement_direction = 3;
  void clear_improvement_direction() ;
  ::webrtc::test_metrics::ImprovementDirection improvement_direction() const;
  void set_improvement_direction(::webrtc::test_metrics::ImprovementDirection value);

  private:
  ::webrtc::test_metrics::ImprovementDirection _internal_improvement_direction() const;
  void _internal_set_improvement_direction(::webrtc::test_metrics::ImprovementDirection value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.test_metrics.Metric)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   3, 63,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Metric& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapFieldLite<std::string, std::string> metric_metadata_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr test_case_;
    ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE time_series_;
    ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE stats_;
    int unit_;
    int improvement_direction_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metric_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<27> Metric_class_data_;
// -------------------------------------------------------------------

class MetricsSet final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.test_metrics.MetricsSet) */ {
 public:
  inline MetricsSet() : MetricsSet(nullptr) {}
  ~MetricsSet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MetricsSet* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MetricsSet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsSet(::google::protobuf::internal::ConstantInitialized);

  inline MetricsSet(const MetricsSet& from) : MetricsSet(nullptr, from) {}
  inline MetricsSet(MetricsSet&& from) noexcept
      : MetricsSet(nullptr, std::move(from)) {}
  inline MetricsSet& operator=(const MetricsSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsSet& operator=(MetricsSet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MetricsSet& default_instance() {
    return *reinterpret_cast<const MetricsSet*>(
        &_MetricsSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MetricsSet& a, MetricsSet& b) { a.Swap(&b); }
  inline void Swap(MetricsSet* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsSet* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsSet* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<MetricsSet>(arena);
  }
  void CopyFrom(const MetricsSet& from);
  void MergeFrom(const MetricsSet& from) { MetricsSet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MetricsSet* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.test_metrics.MetricsSet"; }

 protected:
  explicit MetricsSet(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MetricsSet(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MetricsSet& from);
  MetricsSet(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MetricsSet&& from) noexcept
      : MetricsSet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricsFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // repeated .webrtc.test_metrics.Metric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;

  public:
  void clear_metrics() ;
  ::webrtc::test_metrics::Metric* PROTOBUF_NONNULL mutable_metrics(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>* PROTOBUF_NONNULL mutable_metrics();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>& _internal_metrics() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>* PROTOBUF_NONNULL _internal_mutable_metrics();
  public:
  const ::webrtc::test_metrics::Metric& metrics(int index) const;
  ::webrtc::test_metrics::Metric* PROTOBUF_NONNULL add_metrics();
  const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>& metrics() const;
  // map<string, string> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:webrtc.test_metrics.MetricsSet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 47,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MetricsSet& from_msg);
    ::google::protobuf::RepeatedPtrField< ::webrtc::test_metrics::Metric > metrics_;
    ::google::protobuf::internal::MapFieldLite<std::string, std::string> metadata_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metric_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<31> MetricsSet_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetricsSet

// repeated .webrtc.test_metrics.Metric metrics = 1;
inline int MetricsSet::_internal_metrics_size() const {
  return _internal_metrics().size();
}
inline int MetricsSet::metrics_size() const {
  return _internal_metrics_size();
}
inline void MetricsSet::clear_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metrics_.Clear();
}
inline ::webrtc::test_metrics::Metric* PROTOBUF_NONNULL MetricsSet::mutable_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.test_metrics.MetricsSet.metrics)
  return _internal_mutable_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>* PROTOBUF_NONNULL MetricsSet::mutable_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.test_metrics.MetricsSet.metrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metrics();
}
inline const ::webrtc::test_metrics::Metric& MetricsSet::metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.MetricsSet.metrics)
  return _internal_metrics().Get(index);
}
inline ::webrtc::test_metrics::Metric* PROTOBUF_NONNULL MetricsSet::add_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::test_metrics::Metric* _add = _internal_mutable_metrics()->Add();
  // @@protoc_insertion_point(field_add:webrtc.test_metrics.MetricsSet.metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>& MetricsSet::metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.test_metrics.MetricsSet.metrics)
  return _internal_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>&
MetricsSet::_internal_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric>* PROTOBUF_NONNULL
MetricsSet::_internal_mutable_metrics() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metrics_;
}

// map<string, string> metadata = 2;
inline int MetricsSet::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int MetricsSet::metadata_size() const {
  return _internal_metadata_size();
}
inline void MetricsSet::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetricsSet::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetricsSet::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:webrtc.test_metrics.MetricsSet.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL MetricsSet::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL MetricsSet::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:webrtc.test_metrics.MetricsSet.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metric_TimeSeries_Sample

// int64 timestamp_us = 1;
inline void Metric_TimeSeries_Sample::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Metric_TimeSeries_Sample::timestamp_us() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.TimeSeries.Sample.timestamp_us)
  return _internal_timestamp_us();
}
inline void Metric_TimeSeries_Sample::set_timestamp_us(::int64_t value) {
  _internal_set_timestamp_us(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.TimeSeries.Sample.timestamp_us)
}
inline ::int64_t Metric_TimeSeries_Sample::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void Metric_TimeSeries_Sample::_internal_set_timestamp_us(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// double value = 2;
inline void Metric_TimeSeries_Sample::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Metric_TimeSeries_Sample::value() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.TimeSeries.Sample.value)
  return _internal_value();
}
inline void Metric_TimeSeries_Sample::set_value(double value) {
  _internal_set_value(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.TimeSeries.Sample.value)
}
inline double Metric_TimeSeries_Sample::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void Metric_TimeSeries_Sample::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// map<string, string> sample_metadata = 3;
inline int Metric_TimeSeries_Sample::_internal_sample_metadata_size() const {
  return _internal_sample_metadata().size();
}
inline int Metric_TimeSeries_Sample::sample_metadata_size() const {
  return _internal_sample_metadata_size();
}
inline void Metric_TimeSeries_Sample::clear_sample_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metric_TimeSeries_Sample::_internal_sample_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metric_TimeSeries_Sample::sample_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:webrtc.test_metrics.Metric.TimeSeries.Sample.sample_metadata)
  return _internal_sample_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL Metric_TimeSeries_Sample::_internal_mutable_sample_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sample_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL Metric_TimeSeries_Sample::mutable_sample_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:webrtc.test_metrics.Metric.TimeSeries.Sample.sample_metadata)
  return _internal_mutable_sample_metadata();
}

// -------------------------------------------------------------------

// Metric_TimeSeries

// repeated .webrtc.test_metrics.Metric.TimeSeries.Sample samples = 1;
inline int Metric_TimeSeries::_internal_samples_size() const {
  return _internal_samples().size();
}
inline int Metric_TimeSeries::samples_size() const {
  return _internal_samples_size();
}
inline void Metric_TimeSeries::clear_samples() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.samples_.Clear();
}
inline ::webrtc::test_metrics::Metric_TimeSeries_Sample* PROTOBUF_NONNULL Metric_TimeSeries::mutable_samples(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.test_metrics.Metric.TimeSeries.samples)
  return _internal_mutable_samples()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>* PROTOBUF_NONNULL Metric_TimeSeries::mutable_samples()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.test_metrics.Metric.TimeSeries.samples)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_samples();
}
inline const ::webrtc::test_metrics::Metric_TimeSeries_Sample& Metric_TimeSeries::samples(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.TimeSeries.samples)
  return _internal_samples().Get(index);
}
inline ::webrtc::test_metrics::Metric_TimeSeries_Sample* PROTOBUF_NONNULL Metric_TimeSeries::add_samples()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::test_metrics::Metric_TimeSeries_Sample* _add = _internal_mutable_samples()->Add();
  // @@protoc_insertion_point(field_add:webrtc.test_metrics.Metric.TimeSeries.samples)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>& Metric_TimeSeries::samples() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.test_metrics.Metric.TimeSeries.samples)
  return _internal_samples();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>&
Metric_TimeSeries::_internal_samples() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.samples_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::test_metrics::Metric_TimeSeries_Sample>* PROTOBUF_NONNULL
Metric_TimeSeries::_internal_mutable_samples() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.samples_;
}

// -------------------------------------------------------------------

// Metric_Stats

// optional double mean = 1;
inline bool Metric_Stats::has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Metric_Stats::clear_mean() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Metric_Stats::mean() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.Stats.mean)
  return _internal_mean();
}
inline void Metric_Stats::set_mean(double value) {
  _internal_set_mean(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.Stats.mean)
}
inline double Metric_Stats::_internal_mean() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mean_;
}
inline void Metric_Stats::_internal_set_mean(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mean_ = value;
}

// optional double stddev = 2;
inline bool Metric_Stats::has_stddev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Metric_Stats::clear_stddev() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stddev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Metric_Stats::stddev() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.Stats.stddev)
  return _internal_stddev();
}
inline void Metric_Stats::set_stddev(double value) {
  _internal_set_stddev(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.Stats.stddev)
}
inline double Metric_Stats::_internal_stddev() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stddev_;
}
inline void Metric_Stats::_internal_set_stddev(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stddev_ = value;
}

// optional double min = 3;
inline bool Metric_Stats::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Metric_Stats::clear_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Metric_Stats::min() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.Stats.min)
  return _internal_min();
}
inline void Metric_Stats::set_min(double value) {
  _internal_set_min(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.Stats.min)
}
inline double Metric_Stats::_internal_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_;
}
inline void Metric_Stats::_internal_set_min(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = value;
}

// optional double max = 4;
inline bool Metric_Stats::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Metric_Stats::clear_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Metric_Stats::max() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.Stats.max)
  return _internal_max();
}
inline void Metric_Stats::set_max(double value) {
  _internal_set_max(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.Stats.max)
}
inline double Metric_Stats::_internal_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_;
}
inline void Metric_Stats::_internal_set_max(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = value;
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metric::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Metric::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.name)
}
inline std::string* PROTOBUF_NONNULL Metric::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:webrtc.test_metrics.Metric.name)
  return _s;
}
inline const std::string& Metric::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Metric::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Metric::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.test_metrics.Metric.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Metric::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.test_metrics.Metric.name)
}

// .webrtc.test_metrics.Unit unit = 2;
inline void Metric::clear_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::webrtc::test_metrics::Unit Metric::unit() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.unit)
  return _internal_unit();
}
inline void Metric::set_unit(::webrtc::test_metrics::Unit value) {
  _internal_set_unit(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.unit)
}
inline ::webrtc::test_metrics::Unit Metric::_internal_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::test_metrics::Unit>(_impl_.unit_);
}
inline void Metric::_internal_set_unit(::webrtc::test_metrics::Unit value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_ = value;
}

// .webrtc.test_metrics.ImprovementDirection improvement_direction = 3;
inline void Metric::clear_improvement_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.improvement_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::webrtc::test_metrics::ImprovementDirection Metric::improvement_direction() const {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.improvement_direction)
  return _internal_improvement_direction();
}
inline void Metric::set_improvement_direction(::webrtc::test_metrics::ImprovementDirection value) {
  _internal_set_improvement_direction(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.improvement_direction)
}
inline ::webrtc::test_metrics::ImprovementDirection Metric::_internal_improvement_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::test_metrics::ImprovementDirection>(_impl_.improvement_direction_);
}
inline void Metric::_internal_set_improvement_direction(::webrtc::test_metrics::ImprovementDirection value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.improvement_direction_ = value;
}

// string test_case = 4;
inline void Metric::clear_test_case() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_case_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Metric::test_case() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.test_case)
  return _internal_test_case();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Metric::set_test_case(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.test_case_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.test_metrics.Metric.test_case)
}
inline std::string* PROTOBUF_NONNULL Metric::mutable_test_case()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_test_case();
  // @@protoc_insertion_point(field_mutable:webrtc.test_metrics.Metric.test_case)
  return _s;
}
inline const std::string& Metric::_internal_test_case() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_case_.Get();
}
inline void Metric::_internal_set_test_case(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.test_case_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Metric::_internal_mutable_test_case() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.test_case_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Metric::release_test_case() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.test_metrics.Metric.test_case)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.test_case_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.test_case_.Set("", GetArena());
  }
  return released;
}
inline void Metric::set_allocated_test_case(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.test_case_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.test_case_.IsDefault()) {
    _impl_.test_case_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.test_metrics.Metric.test_case)
}

// map<string, string> metric_metadata = 5;
inline int Metric::_internal_metric_metadata_size() const {
  return _internal_metric_metadata().size();
}
inline int Metric::metric_metadata_size() const {
  return _internal_metric_metadata_size();
}
inline void Metric::clear_metric_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metric::_internal_metric_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metric_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metric::metric_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:webrtc.test_metrics.Metric.metric_metadata)
  return _internal_metric_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL Metric::_internal_mutable_metric_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metric_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL Metric::mutable_metric_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:webrtc.test_metrics.Metric.metric_metadata)
  return _internal_mutable_metric_metadata();
}

// .webrtc.test_metrics.Metric.TimeSeries time_series = 6;
inline bool Metric::has_time_series() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_series_ != nullptr);
  return value;
}
inline void Metric::clear_time_series() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_series_ != nullptr) _impl_.time_series_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::webrtc::test_metrics::Metric_TimeSeries& Metric::_internal_time_series() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::webrtc::test_metrics::Metric_TimeSeries* p = _impl_.time_series_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::test_metrics::Metric_TimeSeries&>(::webrtc::test_metrics::_Metric_TimeSeries_default_instance_);
}
inline const ::webrtc::test_metrics::Metric_TimeSeries& Metric::time_series() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.time_series)
  return _internal_time_series();
}
inline void Metric::unsafe_arena_set_allocated_time_series(
    ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_series_);
  }
  _impl_.time_series_ = reinterpret_cast<::webrtc::test_metrics::Metric_TimeSeries*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.test_metrics.Metric.time_series)
}
inline ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE Metric::release_time_series() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::webrtc::test_metrics::Metric_TimeSeries* released = _impl_.time_series_;
  _impl_.time_series_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE Metric::unsafe_arena_release_time_series() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.test_metrics.Metric.time_series)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::webrtc::test_metrics::Metric_TimeSeries* temp = _impl_.time_series_;
  _impl_.time_series_ = nullptr;
  return temp;
}
inline ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NONNULL Metric::_internal_mutable_time_series() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_series_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::test_metrics::Metric_TimeSeries>(GetArena());
    _impl_.time_series_ = reinterpret_cast<::webrtc::test_metrics::Metric_TimeSeries*>(p);
  }
  return _impl_.time_series_;
}
inline ::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NONNULL Metric::mutable_time_series()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::webrtc::test_metrics::Metric_TimeSeries* _msg = _internal_mutable_time_series();
  // @@protoc_insertion_point(field_mutable:webrtc.test_metrics.Metric.time_series)
  return _msg;
}
inline void Metric::set_allocated_time_series(::webrtc::test_metrics::Metric_TimeSeries* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_series_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.time_series_ = reinterpret_cast<::webrtc::test_metrics::Metric_TimeSeries*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.test_metrics.Metric.time_series)
}

// .webrtc.test_metrics.Metric.Stats stats = 7;
inline bool Metric::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void Metric::clear_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::webrtc::test_metrics::Metric_Stats& Metric::_internal_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::webrtc::test_metrics::Metric_Stats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::webrtc::test_metrics::Metric_Stats&>(::webrtc::test_metrics::_Metric_Stats_default_instance_);
}
inline const ::webrtc::test_metrics::Metric_Stats& Metric::stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.test_metrics.Metric.stats)
  return _internal_stats();
}
inline void Metric::unsafe_arena_set_allocated_stats(
    ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::webrtc::test_metrics::Metric_Stats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.test_metrics.Metric.stats)
}
inline ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE Metric::release_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::webrtc::test_metrics::Metric_Stats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE Metric::unsafe_arena_release_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.test_metrics.Metric.stats)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::webrtc::test_metrics::Metric_Stats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NONNULL Metric::_internal_mutable_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stats_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::test_metrics::Metric_Stats>(GetArena());
    _impl_.stats_ = reinterpret_cast<::webrtc::test_metrics::Metric_Stats*>(p);
  }
  return _impl_.stats_;
}
inline ::webrtc::test_metrics::Metric_Stats* PROTOBUF_NONNULL Metric::mutable_stats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::webrtc::test_metrics::Metric_Stats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:webrtc.test_metrics.Metric.stats)
  return _msg;
}
inline void Metric::set_allocated_stats(::webrtc::test_metrics::Metric_Stats* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.stats_ = reinterpret_cast<::webrtc::test_metrics::Metric_Stats*>(value);
  // @@protoc_insertion_point(field_set_allocated:webrtc.test_metrics.Metric.stats)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace test_metrics
}  // namespace webrtc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::webrtc::test_metrics::Unit> : std::true_type {};
template <>
struct is_proto_enum<::webrtc::test_metrics::ImprovementDirection> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // metric_2eproto_2epb_2eh
