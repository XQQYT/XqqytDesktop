// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chart.proto
// Protobuf C++ Version: 6.30.1

#ifndef chart_2eproto_2epb_2eh
#define chart_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "chart_enums.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chart_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chart_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace analytics {
class Chart;
struct ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<23> Chart_class_data_;
class ChartCollection;
struct ChartCollectionDefaultTypeInternal;
extern ChartCollectionDefaultTypeInternal _ChartCollection_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<33> ChartCollection_class_data_;
class DataSet;
struct DataSetDefaultTypeInternal;
extern DataSetDefaultTypeInternal _DataSet_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<25> DataSet_class_data_;
class TickLabel;
struct TickLabelDefaultTypeInternal;
extern TickLabelDefaultTypeInternal _TickLabel_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<27> TickLabel_class_data_;
}  // namespace analytics
}  // namespace webrtc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace analytics {

// ===================================================================


// -------------------------------------------------------------------

class TickLabel final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.analytics.TickLabel) */ {
 public:
  inline TickLabel() : TickLabel(nullptr) {}
  ~TickLabel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TickLabel* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TickLabel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TickLabel(::google::protobuf::internal::ConstantInitialized);

  inline TickLabel(const TickLabel& from) : TickLabel(nullptr, from) {}
  inline TickLabel(TickLabel&& from) noexcept
      : TickLabel(nullptr, std::move(from)) {}
  inline TickLabel& operator=(const TickLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickLabel& operator=(TickLabel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TickLabel& default_instance() {
    return *reinterpret_cast<const TickLabel*>(
        &_TickLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TickLabel& a, TickLabel& b) { a.Swap(&b); }
  inline void Swap(TickLabel* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickLabel* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TickLabel* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<TickLabel>(arena);
  }
  void CopyFrom(const TickLabel& from);
  void MergeFrom(const TickLabel& from) { TickLabel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TickLabel* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.analytics.TickLabel"; }

 protected:
  explicit TickLabel(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TickLabel(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TickLabel& from);
  TickLabel(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TickLabel&& from) noexcept
      : TickLabel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_label();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_label();
  void set_allocated_label(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_label() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_label();

  public:
  // float value = 1;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.analytics.TickLabel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 40,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TickLabel& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    float value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<27> TickLabel_class_data_;
// -------------------------------------------------------------------

class DataSet final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.analytics.DataSet) */ {
 public:
  inline DataSet() : DataSet(nullptr) {}
  ~DataSet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataSet* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataSet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataSet(::google::protobuf::internal::ConstantInitialized);

  inline DataSet(const DataSet& from) : DataSet(nullptr, from) {}
  inline DataSet(DataSet&& from) noexcept
      : DataSet(nullptr, std::move(from)) {}
  inline DataSet& operator=(const DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSet& operator=(DataSet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DataSet& default_instance() {
    return *reinterpret_cast<const DataSet*>(
        &_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DataSet& a, DataSet& b) { a.Swap(&b); }
  inline void Swap(DataSet* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSet* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataSet* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<DataSet>(arena);
  }
  void CopyFrom(const DataSet& from);
  void MergeFrom(const DataSet& from) { DataSet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataSet* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.analytics.DataSet"; }

 protected:
  explicit DataSet(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataSet(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataSet& from);
  DataSet(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataSet&& from) noexcept
      : DataSet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXValuesFieldNumber = 1,
    kYValuesFieldNumber = 2,
    kLabelFieldNumber = 3,
    kStyleFieldNumber = 4,
    kHighlightPointsFieldNumber = 5,
  };
  // repeated float x_values = 1;
  int x_values_size() const;
  private:
  int _internal_x_values_size() const;

  public:
  void clear_x_values() ;
  float x_values(int index) const;
  void set_x_values(int index, float value);
  void add_x_values(float value);
  const ::google::protobuf::RepeatedField<float>& x_values() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL mutable_x_values();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_x_values() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL _internal_mutable_x_values();

  public:
  // repeated float y_values = 2;
  int y_values_size() const;
  private:
  int _internal_y_values_size() const;

  public:
  void clear_y_values() ;
  float y_values(int index) const;
  void set_y_values(int index, float value);
  void add_y_values(float value);
  const ::google::protobuf::RepeatedField<float>& y_values() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL mutable_y_values();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_y_values() const;
  ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL _internal_mutable_y_values();

  public:
  // string label = 3;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_label();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_label();
  void set_allocated_label(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_label() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_label();

  public:
  // .webrtc.analytics.ChartStyle.Type style = 4;
  void clear_style() ;
  ::webrtc::analytics::ChartStyle_Type style() const;
  void set_style(::webrtc::analytics::ChartStyle_Type value);

  private:
  ::webrtc::analytics::ChartStyle_Type _internal_style() const;
  void _internal_set_style(::webrtc::analytics::ChartStyle_Type value);

  public:
  // bool highlight_points = 5;
  void clear_highlight_points() ;
  bool highlight_points() const;
  void set_highlight_points(bool value);

  private:
  bool _internal_highlight_points() const;
  void _internal_set_highlight_points(bool value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.analytics.DataSet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 38,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataSet& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> x_values_;
    ::google::protobuf::RepeatedField<float> y_values_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    int style_;
    bool highlight_points_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<25> DataSet_class_data_;
// -------------------------------------------------------------------

class Chart final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.analytics.Chart) */ {
 public:
  inline Chart() : Chart(nullptr) {}
  ~Chart() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Chart* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Chart));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Chart(::google::protobuf::internal::ConstantInitialized);

  inline Chart(const Chart& from) : Chart(nullptr, from) {}
  inline Chart(Chart&& from) noexcept
      : Chart(nullptr, std::move(from)) {}
  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart& operator=(Chart&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Chart& default_instance() {
    return *reinterpret_cast<const Chart*>(
        &_Chart_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Chart& a, Chart& b) { a.Swap(&b); }
  inline void Swap(Chart* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chart* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Chart>(arena);
  }
  void CopyFrom(const Chart& from);
  void MergeFrom(const Chart& from) { Chart::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Chart* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.analytics.Chart"; }

 protected:
  explicit Chart(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Chart(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Chart& from);
  Chart(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Chart&& from) noexcept
      : Chart(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataSetsFieldNumber = 1,
    kYaxisTickLabelsFieldNumber = 10,
    kXaxisLabelFieldNumber = 4,
    kYaxisLabelFieldNumber = 7,
    kTitleFieldNumber = 8,
    kIdFieldNumber = 9,
    kXaxisMinFieldNumber = 2,
    kXaxisMaxFieldNumber = 3,
    kYaxisMinFieldNumber = 5,
    kYaxisMaxFieldNumber = 6,
  };
  // repeated .webrtc.analytics.DataSet data_sets = 1;
  int data_sets_size() const;
  private:
  int _internal_data_sets_size() const;

  public:
  void clear_data_sets() ;
  ::webrtc::analytics::DataSet* PROTOBUF_NONNULL mutable_data_sets(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>* PROTOBUF_NONNULL mutable_data_sets();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>& _internal_data_sets() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>* PROTOBUF_NONNULL _internal_mutable_data_sets();
  public:
  const ::webrtc::analytics::DataSet& data_sets(int index) const;
  ::webrtc::analytics::DataSet* PROTOBUF_NONNULL add_data_sets();
  const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>& data_sets() const;
  // repeated .webrtc.analytics.TickLabel yaxis_tick_labels = 10;
  int yaxis_tick_labels_size() const;
  private:
  int _internal_yaxis_tick_labels_size() const;

  public:
  void clear_yaxis_tick_labels() ;
  ::webrtc::analytics::TickLabel* PROTOBUF_NONNULL mutable_yaxis_tick_labels(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>* PROTOBUF_NONNULL mutable_yaxis_tick_labels();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>& _internal_yaxis_tick_labels() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>* PROTOBUF_NONNULL _internal_mutable_yaxis_tick_labels();
  public:
  const ::webrtc::analytics::TickLabel& yaxis_tick_labels(int index) const;
  ::webrtc::analytics::TickLabel* PROTOBUF_NONNULL add_yaxis_tick_labels();
  const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>& yaxis_tick_labels() const;
  // string xaxis_label = 4;
  void clear_xaxis_label() ;
  const std::string& xaxis_label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_xaxis_label(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_xaxis_label();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_xaxis_label();
  void set_allocated_xaxis_label(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_xaxis_label() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_xaxis_label(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_xaxis_label();

  public:
  // string yaxis_label = 7;
  void clear_yaxis_label() ;
  const std::string& yaxis_label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_yaxis_label(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_yaxis_label();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_yaxis_label();
  void set_allocated_yaxis_label(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_yaxis_label() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_yaxis_label(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_yaxis_label();

  public:
  // string title = 8;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_title();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_title();
  void set_allocated_title(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_title() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_title();

  public:
  // string id = 9;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // float xaxis_min = 2;
  void clear_xaxis_min() ;
  float xaxis_min() const;
  void set_xaxis_min(float value);

  private:
  float _internal_xaxis_min() const;
  void _internal_set_xaxis_min(float value);

  public:
  // float xaxis_max = 3;
  void clear_xaxis_max() ;
  float xaxis_max() const;
  void set_xaxis_max(float value);

  private:
  float _internal_xaxis_max() const;
  void _internal_set_xaxis_max(float value);

  public:
  // float yaxis_min = 5;
  void clear_yaxis_min() ;
  float yaxis_min() const;
  void set_yaxis_min(float value);

  private:
  float _internal_yaxis_min() const;
  void _internal_set_yaxis_min(float value);

  public:
  // float yaxis_max = 6;
  void clear_yaxis_max() ;
  float yaxis_max() const;
  void set_yaxis_max(float value);

  private:
  float _internal_yaxis_max() const;
  void _internal_set_yaxis_max(float value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.analytics.Chart)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   2, 68,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Chart& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet > data_sets_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::TickLabel > yaxis_tick_labels_;
    ::google::protobuf::internal::ArenaStringPtr xaxis_label_;
    ::google::protobuf::internal::ArenaStringPtr yaxis_label_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    float xaxis_min_;
    float xaxis_max_;
    float yaxis_min_;
    float yaxis_max_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<23> Chart_class_data_;
// -------------------------------------------------------------------

class ChartCollection final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.analytics.ChartCollection) */ {
 public:
  inline ChartCollection() : ChartCollection(nullptr) {}
  ~ChartCollection() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChartCollection* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChartCollection));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChartCollection(::google::protobuf::internal::ConstantInitialized);

  inline ChartCollection(const ChartCollection& from) : ChartCollection(nullptr, from) {}
  inline ChartCollection(ChartCollection&& from) noexcept
      : ChartCollection(nullptr, std::move(from)) {}
  inline ChartCollection& operator=(const ChartCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartCollection& operator=(ChartCollection&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChartCollection& default_instance() {
    return *reinterpret_cast<const ChartCollection*>(
        &_ChartCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ChartCollection& a, ChartCollection& b) { a.Swap(&b); }
  inline void Swap(ChartCollection* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartCollection* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartCollection* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<ChartCollection>(arena);
  }
  void CopyFrom(const ChartCollection& from);
  void MergeFrom(const ChartCollection& from) { ChartCollection::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChartCollection* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.analytics.ChartCollection"; }

 protected:
  explicit ChartCollection(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChartCollection(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChartCollection& from);
  ChartCollection(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChartCollection&& from) noexcept
      : ChartCollection(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChartsFieldNumber = 1,
    kCalltimeToUtcMsFieldNumber = 2,
  };
  // repeated .webrtc.analytics.Chart charts = 1;
  int charts_size() const;
  private:
  int _internal_charts_size() const;

  public:
  void clear_charts() ;
  ::webrtc::analytics::Chart* PROTOBUF_NONNULL mutable_charts(int index);
  ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>* PROTOBUF_NONNULL mutable_charts();

  private:
  const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>& _internal_charts() const;
  ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>* PROTOBUF_NONNULL _internal_mutable_charts();
  public:
  const ::webrtc::analytics::Chart& charts(int index) const;
  ::webrtc::analytics::Chart* PROTOBUF_NONNULL add_charts();
  const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>& charts() const;
  // int64 calltime_to_utc_ms = 2;
  void clear_calltime_to_utc_ms() ;
  ::int64_t calltime_to_utc_ms() const;
  void set_calltime_to_utc_ms(::int64_t value);

  private:
  ::int64_t _internal_calltime_to_utc_ms() const;
  void _internal_set_calltime_to_utc_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.analytics.ChartCollection)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChartCollection& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart > charts_;
    ::int64_t calltime_to_utc_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<33> ChartCollection_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DataSet

// repeated float x_values = 1;
inline int DataSet::_internal_x_values_size() const {
  return _internal_x_values().size();
}
inline int DataSet::x_values_size() const {
  return _internal_x_values_size();
}
inline void DataSet::clear_x_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_values_.Clear();
}
inline float DataSet::x_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.x_values)
  return _internal_x_values().Get(index);
}
inline void DataSet::set_x_values(int index, float value) {
  _internal_mutable_x_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.x_values)
}
inline void DataSet::add_x_values(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_x_values()->Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.x_values)
}
inline const ::google::protobuf::RepeatedField<float>& DataSet::x_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.x_values)
  return _internal_x_values();
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL DataSet::mutable_x_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.x_values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_x_values();
}
inline const ::google::protobuf::RepeatedField<float>&
DataSet::_internal_x_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_values_;
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL
DataSet::_internal_mutable_x_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.x_values_;
}

// repeated float y_values = 2;
inline int DataSet::_internal_y_values_size() const {
  return _internal_y_values().size();
}
inline int DataSet::y_values_size() const {
  return _internal_y_values_size();
}
inline void DataSet::clear_y_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_values_.Clear();
}
inline float DataSet::y_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.y_values)
  return _internal_y_values().Get(index);
}
inline void DataSet::set_y_values(int index, float value) {
  _internal_mutable_y_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.y_values)
}
inline void DataSet::add_y_values(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_y_values()->Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.y_values)
}
inline const ::google::protobuf::RepeatedField<float>& DataSet::y_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.y_values)
  return _internal_y_values();
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL DataSet::mutable_y_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.y_values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_y_values();
}
inline const ::google::protobuf::RepeatedField<float>&
DataSet::_internal_y_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_values_;
}
inline ::google::protobuf::RepeatedField<float>* PROTOBUF_NONNULL
DataSet::_internal_mutable_y_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.y_values_;
}

// string label = 3;
inline void DataSet::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataSet::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataSet::set_label(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.label)
}
inline std::string* PROTOBUF_NONNULL DataSet::mutable_label()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.DataSet.label)
  return _s;
}
inline const std::string& DataSet::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void DataSet::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataSet::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataSet::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.analytics.DataSet.label)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.label_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.label_.Set("", GetArena());
  }
  return released;
}
inline void DataSet::set_allocated_label(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.DataSet.label)
}

// .webrtc.analytics.ChartStyle.Type style = 4;
inline void DataSet::clear_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.style_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::analytics::ChartStyle_Type DataSet::style() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.style)
  return _internal_style();
}
inline void DataSet::set_style(::webrtc::analytics::ChartStyle_Type value) {
  _internal_set_style(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.style)
}
inline ::webrtc::analytics::ChartStyle_Type DataSet::_internal_style() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::analytics::ChartStyle_Type>(_impl_.style_);
}
inline void DataSet::_internal_set_style(::webrtc::analytics::ChartStyle_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.style_ = value;
}

// bool highlight_points = 5;
inline void DataSet::clear_highlight_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.highlight_points_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DataSet::highlight_points() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.highlight_points)
  return _internal_highlight_points();
}
inline void DataSet::set_highlight_points(bool value) {
  _internal_set_highlight_points(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.highlight_points)
}
inline bool DataSet::_internal_highlight_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.highlight_points_;
}
inline void DataSet::_internal_set_highlight_points(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.highlight_points_ = value;
}

// -------------------------------------------------------------------

// TickLabel

// float value = 1;
inline void TickLabel::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float TickLabel::value() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.TickLabel.value)
  return _internal_value();
}
inline void TickLabel::set_value(float value) {
  _internal_set_value(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.TickLabel.value)
}
inline float TickLabel::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void TickLabel::_internal_set_value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// string label = 2;
inline void TickLabel::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TickLabel::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.TickLabel.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TickLabel::set_label(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.analytics.TickLabel.label)
}
inline std::string* PROTOBUF_NONNULL TickLabel::mutable_label()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.TickLabel.label)
  return _s;
}
inline const std::string& TickLabel::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void TickLabel::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TickLabel::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TickLabel::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.analytics.TickLabel.label)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.label_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.label_.Set("", GetArena());
  }
  return released;
}
inline void TickLabel::set_allocated_label(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.TickLabel.label)
}

// -------------------------------------------------------------------

// Chart

// repeated .webrtc.analytics.DataSet data_sets = 1;
inline int Chart::_internal_data_sets_size() const {
  return _internal_data_sets().size();
}
inline int Chart::data_sets_size() const {
  return _internal_data_sets_size();
}
inline void Chart::clear_data_sets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_sets_.Clear();
}
inline ::webrtc::analytics::DataSet* PROTOBUF_NONNULL Chart::mutable_data_sets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.data_sets)
  return _internal_mutable_data_sets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>* PROTOBUF_NONNULL Chart::mutable_data_sets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.Chart.data_sets)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data_sets();
}
inline const ::webrtc::analytics::DataSet& Chart::data_sets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.data_sets)
  return _internal_data_sets().Get(index);
}
inline ::webrtc::analytics::DataSet* PROTOBUF_NONNULL Chart::add_data_sets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::analytics::DataSet* _add = _internal_mutable_data_sets()->Add();
  // @@protoc_insertion_point(field_add:webrtc.analytics.Chart.data_sets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>& Chart::data_sets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.analytics.Chart.data_sets)
  return _internal_data_sets();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>&
Chart::_internal_data_sets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_sets_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::analytics::DataSet>* PROTOBUF_NONNULL
Chart::_internal_mutable_data_sets() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_sets_;
}

// float xaxis_min = 2;
inline void Chart::clear_xaxis_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xaxis_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Chart::xaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_min)
  return _internal_xaxis_min();
}
inline void Chart::set_xaxis_min(float value) {
  _internal_set_xaxis_min(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_min)
}
inline float Chart::_internal_xaxis_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xaxis_min_;
}
inline void Chart::_internal_set_xaxis_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xaxis_min_ = value;
}

// float xaxis_max = 3;
inline void Chart::clear_xaxis_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xaxis_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Chart::xaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_max)
  return _internal_xaxis_max();
}
inline void Chart::set_xaxis_max(float value) {
  _internal_set_xaxis_max(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_max)
}
inline float Chart::_internal_xaxis_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xaxis_max_;
}
inline void Chart::_internal_set_xaxis_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xaxis_max_ = value;
}

// string xaxis_label = 4;
inline void Chart::clear_xaxis_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xaxis_label_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chart::xaxis_label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_label)
  return _internal_xaxis_label();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Chart::set_xaxis_label(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.xaxis_label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_label)
}
inline std::string* PROTOBUF_NONNULL Chart::mutable_xaxis_label()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_xaxis_label();
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.xaxis_label)
  return _s;
}
inline const std::string& Chart::_internal_xaxis_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xaxis_label_.Get();
}
inline void Chart::_internal_set_xaxis_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.xaxis_label_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Chart::_internal_mutable_xaxis_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.xaxis_label_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Chart::release_xaxis_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.xaxis_label)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.xaxis_label_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.xaxis_label_.Set("", GetArena());
  }
  return released;
}
inline void Chart::set_allocated_xaxis_label(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.xaxis_label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.xaxis_label_.IsDefault()) {
    _impl_.xaxis_label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.xaxis_label)
}

// float yaxis_min = 5;
inline void Chart::clear_yaxis_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaxis_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Chart::yaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_min)
  return _internal_yaxis_min();
}
inline void Chart::set_yaxis_min(float value) {
  _internal_set_yaxis_min(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_min)
}
inline float Chart::_internal_yaxis_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaxis_min_;
}
inline void Chart::_internal_set_yaxis_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaxis_min_ = value;
}

// float yaxis_max = 6;
inline void Chart::clear_yaxis_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaxis_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Chart::yaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_max)
  return _internal_yaxis_max();
}
inline void Chart::set_yaxis_max(float value) {
  _internal_set_yaxis_max(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_max)
}
inline float Chart::_internal_yaxis_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaxis_max_;
}
inline void Chart::_internal_set_yaxis_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaxis_max_ = value;
}

// string yaxis_label = 7;
inline void Chart::clear_yaxis_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaxis_label_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Chart::yaxis_label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_label)
  return _internal_yaxis_label();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Chart::set_yaxis_label(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.yaxis_label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_label)
}
inline std::string* PROTOBUF_NONNULL Chart::mutable_yaxis_label()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_yaxis_label();
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.yaxis_label)
  return _s;
}
inline const std::string& Chart::_internal_yaxis_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaxis_label_.Get();
}
inline void Chart::_internal_set_yaxis_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.yaxis_label_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Chart::_internal_mutable_yaxis_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.yaxis_label_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Chart::release_yaxis_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.yaxis_label)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.yaxis_label_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.yaxis_label_.Set("", GetArena());
  }
  return released;
}
inline void Chart::set_allocated_yaxis_label(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.yaxis_label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.yaxis_label_.IsDefault()) {
    _impl_.yaxis_label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.yaxis_label)
}

// string title = 8;
inline void Chart::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Chart::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Chart::set_title(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.title)
}
inline std::string* PROTOBUF_NONNULL Chart::mutable_title()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.title)
  return _s;
}
inline const std::string& Chart::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void Chart::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Chart::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Chart::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.title)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.title_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.title_.Set("", GetArena());
  }
  return released;
}
inline void Chart::set_allocated_title(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.title)
}

// string id = 9;
inline void Chart::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Chart::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Chart::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.id)
}
inline std::string* PROTOBUF_NONNULL Chart::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.id)
  return _s;
}
inline const std::string& Chart::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Chart::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Chart::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Chart::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.id)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void Chart::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.id)
}

// repeated .webrtc.analytics.TickLabel yaxis_tick_labels = 10;
inline int Chart::_internal_yaxis_tick_labels_size() const {
  return _internal_yaxis_tick_labels().size();
}
inline int Chart::yaxis_tick_labels_size() const {
  return _internal_yaxis_tick_labels_size();
}
inline void Chart::clear_yaxis_tick_labels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaxis_tick_labels_.Clear();
}
inline ::webrtc::analytics::TickLabel* PROTOBUF_NONNULL Chart::mutable_yaxis_tick_labels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.yaxis_tick_labels)
  return _internal_mutable_yaxis_tick_labels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>* PROTOBUF_NONNULL Chart::mutable_yaxis_tick_labels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.Chart.yaxis_tick_labels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_yaxis_tick_labels();
}
inline const ::webrtc::analytics::TickLabel& Chart::yaxis_tick_labels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_tick_labels)
  return _internal_yaxis_tick_labels().Get(index);
}
inline ::webrtc::analytics::TickLabel* PROTOBUF_NONNULL Chart::add_yaxis_tick_labels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::analytics::TickLabel* _add = _internal_mutable_yaxis_tick_labels()->Add();
  // @@protoc_insertion_point(field_add:webrtc.analytics.Chart.yaxis_tick_labels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>& Chart::yaxis_tick_labels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.analytics.Chart.yaxis_tick_labels)
  return _internal_yaxis_tick_labels();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>&
Chart::_internal_yaxis_tick_labels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaxis_tick_labels_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::analytics::TickLabel>* PROTOBUF_NONNULL
Chart::_internal_mutable_yaxis_tick_labels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.yaxis_tick_labels_;
}

// -------------------------------------------------------------------

// ChartCollection

// repeated .webrtc.analytics.Chart charts = 1;
inline int ChartCollection::_internal_charts_size() const {
  return _internal_charts().size();
}
inline int ChartCollection::charts_size() const {
  return _internal_charts_size();
}
inline void ChartCollection::clear_charts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.charts_.Clear();
}
inline ::webrtc::analytics::Chart* PROTOBUF_NONNULL ChartCollection::mutable_charts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.ChartCollection.charts)
  return _internal_mutable_charts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>* PROTOBUF_NONNULL ChartCollection::mutable_charts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.ChartCollection.charts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_charts();
}
inline const ::webrtc::analytics::Chart& ChartCollection::charts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.analytics.ChartCollection.charts)
  return _internal_charts().Get(index);
}
inline ::webrtc::analytics::Chart* PROTOBUF_NONNULL ChartCollection::add_charts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::webrtc::analytics::Chart* _add = _internal_mutable_charts()->Add();
  // @@protoc_insertion_point(field_add:webrtc.analytics.ChartCollection.charts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>& ChartCollection::charts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:webrtc.analytics.ChartCollection.charts)
  return _internal_charts();
}
inline const ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>&
ChartCollection::_internal_charts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.charts_;
}
inline ::google::protobuf::RepeatedPtrField<::webrtc::analytics::Chart>* PROTOBUF_NONNULL
ChartCollection::_internal_mutable_charts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.charts_;
}

// int64 calltime_to_utc_ms = 2;
inline void ChartCollection::clear_calltime_to_utc_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calltime_to_utc_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t ChartCollection::calltime_to_utc_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.ChartCollection.calltime_to_utc_ms)
  return _internal_calltime_to_utc_ms();
}
inline void ChartCollection::set_calltime_to_utc_ms(::int64_t value) {
  _internal_set_calltime_to_utc_ms(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.analytics.ChartCollection.calltime_to_utc_ms)
}
inline ::int64_t ChartCollection::_internal_calltime_to_utc_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.calltime_to_utc_ms_;
}
inline void ChartCollection::_internal_set_calltime_to_utc_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calltime_to_utc_ms_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace analytics
}  // namespace webrtc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // chart_2eproto_2epb_2eh
