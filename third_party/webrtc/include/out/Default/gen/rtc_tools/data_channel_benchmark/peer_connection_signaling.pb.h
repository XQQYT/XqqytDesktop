// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: peer_connection_signaling.proto
// Protobuf C++ Version: 6.30.1

#ifndef peer_5fconnection_5fsignaling_2eproto_2epb_2eh
#define peer_5fconnection_5fsignaling_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_peer_5fconnection_5fsignaling_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_peer_5fconnection_5fsignaling_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace GrpcSignaling {
enum SessionDescription_SessionDescriptionType : int;
extern const uint32_t SessionDescription_SessionDescriptionType_internal_data_[];
class IceCandidate;
struct IceCandidateDefaultTypeInternal;
extern IceCandidateDefaultTypeInternal _IceCandidate_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<34> IceCandidate_class_data_;
class SessionDescription;
struct SessionDescriptionDefaultTypeInternal;
extern SessionDescriptionDefaultTypeInternal _SessionDescription_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<40> SessionDescription_class_data_;
class SignalingMessage;
struct SignalingMessageDefaultTypeInternal;
extern SignalingMessageDefaultTypeInternal _SignalingMessage_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<38> SignalingMessage_class_data_;
}  // namespace GrpcSignaling
}  // namespace webrtc
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType>;
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace GrpcSignaling {
enum SessionDescription_SessionDescriptionType : int {
  SessionDescription_SessionDescriptionType_OFFER = 0,
  SessionDescription_SessionDescriptionType_ANSWER = 1,
  SessionDescription_SessionDescriptionType_SessionDescription_SessionDescriptionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SessionDescription_SessionDescriptionType_SessionDescription_SessionDescriptionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t SessionDescription_SessionDescriptionType_internal_data_[];
inline constexpr SessionDescription_SessionDescriptionType SessionDescription_SessionDescriptionType_SessionDescriptionType_MIN =
    static_cast<SessionDescription_SessionDescriptionType>(0);
inline constexpr SessionDescription_SessionDescriptionType SessionDescription_SessionDescriptionType_SessionDescriptionType_MAX =
    static_cast<SessionDescription_SessionDescriptionType>(1);
inline bool SessionDescription_SessionDescriptionType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int SessionDescription_SessionDescriptionType_SessionDescriptionType_ARRAYSIZE = 1 + 1;
const std::string& SessionDescription_SessionDescriptionType_Name(SessionDescription_SessionDescriptionType value);
template <typename T>
const std::string& SessionDescription_SessionDescriptionType_Name(T value) {
  static_assert(std::is_same<T, SessionDescription_SessionDescriptionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SessionDescriptionType_Name().");
  return SessionDescription_SessionDescriptionType_Name(static_cast<SessionDescription_SessionDescriptionType>(value));
}
bool SessionDescription_SessionDescriptionType_Parse(
    absl::string_view name, SessionDescription_SessionDescriptionType* PROTOBUF_NONNULL value);

// ===================================================================


// -------------------------------------------------------------------

class SessionDescription final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.GrpcSignaling.SessionDescription) */ {
 public:
  inline SessionDescription() : SessionDescription(nullptr) {}
  ~SessionDescription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SessionDescription* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SessionDescription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SessionDescription(::google::protobuf::internal::ConstantInitialized);

  inline SessionDescription(const SessionDescription& from) : SessionDescription(nullptr, from) {}
  inline SessionDescription(SessionDescription&& from) noexcept
      : SessionDescription(nullptr, std::move(from)) {}
  inline SessionDescription& operator=(const SessionDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionDescription& operator=(SessionDescription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SessionDescription& default_instance() {
    return *reinterpret_cast<const SessionDescription*>(
        &_SessionDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SessionDescription& a, SessionDescription& b) { a.Swap(&b); }
  inline void Swap(SessionDescription* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionDescription* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionDescription* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<SessionDescription>(arena);
  }
  void CopyFrom(const SessionDescription& from);
  void MergeFrom(const SessionDescription& from) { SessionDescription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SessionDescription* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.GrpcSignaling.SessionDescription"; }

 protected:
  explicit SessionDescription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SessionDescription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SessionDescription& from);
  SessionDescription(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SessionDescription&& from) noexcept
      : SessionDescription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using SessionDescriptionType = SessionDescription_SessionDescriptionType;
  static constexpr SessionDescriptionType OFFER = SessionDescription_SessionDescriptionType_OFFER;
  static constexpr SessionDescriptionType ANSWER = SessionDescription_SessionDescriptionType_ANSWER;
  static inline bool SessionDescriptionType_IsValid(int value) {
    return SessionDescription_SessionDescriptionType_IsValid(value);
  }
  static constexpr SessionDescriptionType SessionDescriptionType_MIN = SessionDescription_SessionDescriptionType_SessionDescriptionType_MIN;
  static constexpr SessionDescriptionType SessionDescriptionType_MAX = SessionDescription_SessionDescriptionType_SessionDescriptionType_MAX;
  static constexpr int SessionDescriptionType_ARRAYSIZE = SessionDescription_SessionDescriptionType_SessionDescriptionType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& SessionDescriptionType_Name(T value) {
    return SessionDescription_SessionDescriptionType_Name(value);
  }
  static inline bool SessionDescriptionType_Parse(
      absl::string_view name, SessionDescriptionType* PROTOBUF_NONNULL value) {
    return SessionDescription_SessionDescriptionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_content();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_content();
  void set_allocated_content(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_content() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_content();

  public:
  // .webrtc.GrpcSignaling.SessionDescription.SessionDescriptionType type = 1;
  void clear_type() ;
  ::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType type() const;
  void set_type(::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType value);

  private:
  ::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType _internal_type() const;
  void _internal_set_type(::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.GrpcSignaling.SessionDescription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 55,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SessionDescription& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_peer_5fconnection_5fsignaling_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<40> SessionDescription_class_data_;
// -------------------------------------------------------------------

class IceCandidate final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.GrpcSignaling.IceCandidate) */ {
 public:
  inline IceCandidate() : IceCandidate(nullptr) {}
  ~IceCandidate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IceCandidate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IceCandidate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IceCandidate(::google::protobuf::internal::ConstantInitialized);

  inline IceCandidate(const IceCandidate& from) : IceCandidate(nullptr, from) {}
  inline IceCandidate(IceCandidate&& from) noexcept
      : IceCandidate(nullptr, std::move(from)) {}
  inline IceCandidate& operator=(const IceCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline IceCandidate& operator=(IceCandidate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IceCandidate& default_instance() {
    return *reinterpret_cast<const IceCandidate*>(
        &_IceCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(IceCandidate& a, IceCandidate& b) { a.Swap(&b); }
  inline void Swap(IceCandidate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IceCandidate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IceCandidate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<IceCandidate>(arena);
  }
  void CopyFrom(const IceCandidate& from);
  void MergeFrom(const IceCandidate& from) { IceCandidate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IceCandidate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.GrpcSignaling.IceCandidate"; }

 protected:
  explicit IceCandidate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  IceCandidate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const IceCandidate& from);
  IceCandidate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, IceCandidate&& from) noexcept
      : IceCandidate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMidFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kMlineIndexFieldNumber = 2,
  };
  // string mid = 1;
  void clear_mid() ;
  const std::string& mid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_mid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_mid();
  void set_allocated_mid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_mid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_mid();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_description();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_description();
  void set_allocated_description(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_description() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_description();

  public:
  // int32 mline_index = 2;
  void clear_mline_index() ;
  ::int32_t mline_index() const;
  void set_mline_index(::int32_t value);

  private:
  ::int32_t _internal_mline_index() const;
  void _internal_set_mline_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.GrpcSignaling.IceCandidate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 56,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const IceCandidate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr mid_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::int32_t mline_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_peer_5fconnection_5fsignaling_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<34> IceCandidate_class_data_;
// -------------------------------------------------------------------

class SignalingMessage final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.GrpcSignaling.SignalingMessage) */ {
 public:
  inline SignalingMessage() : SignalingMessage(nullptr) {}
  ~SignalingMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignalingMessage* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignalingMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignalingMessage(::google::protobuf::internal::ConstantInitialized);

  inline SignalingMessage(const SignalingMessage& from) : SignalingMessage(nullptr, from) {}
  inline SignalingMessage(SignalingMessage&& from) noexcept
      : SignalingMessage(nullptr, std::move(from)) {}
  inline SignalingMessage& operator=(const SignalingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalingMessage& operator=(SignalingMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SignalingMessage& default_instance() {
    return *reinterpret_cast<const SignalingMessage*>(
        &_SignalingMessage_default_instance_);
  }
  enum ContentCase {
    kDescription = 1,
    kCandidate = 2,
    CONTENT_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SignalingMessage& a, SignalingMessage& b) { a.Swap(&b); }
  inline void Swap(SignalingMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalingMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalingMessage* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<SignalingMessage>(arena);
  }
  void CopyFrom(const SignalingMessage& from);
  void MergeFrom(const SignalingMessage& from) { SignalingMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignalingMessage* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.GrpcSignaling.SignalingMessage"; }

 protected:
  explicit SignalingMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SignalingMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SignalingMessage& from);
  SignalingMessage(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SignalingMessage&& from) noexcept
      : SignalingMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDescriptionFieldNumber = 1,
    kCandidateFieldNumber = 2,
  };
  // .webrtc.GrpcSignaling.SessionDescription description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;

  public:
  void clear_description() ;
  const ::webrtc::GrpcSignaling::SessionDescription& description() const;
  [[nodiscard]] ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE release_description();
  ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NONNULL mutable_description();
  void set_allocated_description(::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_description(::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE value);
  ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE unsafe_arena_release_description();

  private:
  const ::webrtc::GrpcSignaling::SessionDescription& _internal_description() const;
  ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NONNULL _internal_mutable_description();

  public:
  // .webrtc.GrpcSignaling.IceCandidate candidate = 2;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;

  public:
  void clear_candidate() ;
  const ::webrtc::GrpcSignaling::IceCandidate& candidate() const;
  [[nodiscard]] ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE release_candidate();
  ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NONNULL mutable_candidate();
  void set_allocated_candidate(::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_candidate(::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE value);
  ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE unsafe_arena_release_candidate();

  private:
  const ::webrtc::GrpcSignaling::IceCandidate& _internal_candidate() const;
  ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NONNULL _internal_mutable_candidate();

  public:
  void clear_Content();
  ContentCase Content_case() const;
  // @@protoc_insertion_point(class_scope:webrtc.GrpcSignaling.SignalingMessage)
 private:
  class _Internal;
  void set_has_description();
  void set_has_candidate();
  inline bool has_Content() const;
  inline void clear_has_Content();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SignalingMessage& from_msg);
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE description_;
      ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE candidate_;
    } Content_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_peer_5fconnection_5fsignaling_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<38> SignalingMessage_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SignalingMessage

// .webrtc.GrpcSignaling.SessionDescription description = 1;
inline bool SignalingMessage::has_description() const {
  return Content_case() == kDescription;
}
inline bool SignalingMessage::_internal_has_description() const {
  return Content_case() == kDescription;
}
inline void SignalingMessage::set_has_description() {
  _impl_._oneof_case_[0] = kDescription;
}
inline void SignalingMessage::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (Content_case() == kDescription) {
    if (GetArena() == nullptr) {
      delete _impl_.Content_.description_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.Content_.description_ != nullptr) {
        _impl_.Content_.description_->Clear();
      }
    }
    clear_has_Content();
  }
}
inline ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE SignalingMessage::release_description() {
  // @@protoc_insertion_point(field_release:webrtc.GrpcSignaling.SignalingMessage.description)
  if (Content_case() == kDescription) {
    clear_has_Content();
    auto* temp = _impl_.Content_.description_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Content_.description_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::GrpcSignaling::SessionDescription& SignalingMessage::_internal_description() const {
  return Content_case() == kDescription ? *_impl_.Content_.description_ : reinterpret_cast<::webrtc::GrpcSignaling::SessionDescription&>(::webrtc::GrpcSignaling::_SessionDescription_default_instance_);
}
inline const ::webrtc::GrpcSignaling::SessionDescription& SignalingMessage::description() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.GrpcSignaling.SignalingMessage.description)
  return _internal_description();
}
inline ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE SignalingMessage::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.GrpcSignaling.SignalingMessage.description)
  if (Content_case() == kDescription) {
    clear_has_Content();
    auto* temp = _impl_.Content_.description_;
    _impl_.Content_.description_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignalingMessage::unsafe_arena_set_allocated_description(
    ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Content();
  if (value) {
    set_has_description();
    _impl_.Content_.description_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.GrpcSignaling.SignalingMessage.description)
}
inline ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NONNULL SignalingMessage::_internal_mutable_description() {
  if (Content_case() != kDescription) {
    clear_Content();
    set_has_description();
    _impl_.Content_.description_ = 
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::GrpcSignaling::SessionDescription>(GetArena());
  }
  return _impl_.Content_.description_;
}
inline ::webrtc::GrpcSignaling::SessionDescription* PROTOBUF_NONNULL SignalingMessage::mutable_description()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::GrpcSignaling::SessionDescription* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:webrtc.GrpcSignaling.SignalingMessage.description)
  return _msg;
}

// .webrtc.GrpcSignaling.IceCandidate candidate = 2;
inline bool SignalingMessage::has_candidate() const {
  return Content_case() == kCandidate;
}
inline bool SignalingMessage::_internal_has_candidate() const {
  return Content_case() == kCandidate;
}
inline void SignalingMessage::set_has_candidate() {
  _impl_._oneof_case_[0] = kCandidate;
}
inline void SignalingMessage::clear_candidate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (Content_case() == kCandidate) {
    if (GetArena() == nullptr) {
      delete _impl_.Content_.candidate_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.Content_.candidate_ != nullptr) {
        _impl_.Content_.candidate_->Clear();
      }
    }
    clear_has_Content();
  }
}
inline ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE SignalingMessage::release_candidate() {
  // @@protoc_insertion_point(field_release:webrtc.GrpcSignaling.SignalingMessage.candidate)
  if (Content_case() == kCandidate) {
    clear_has_Content();
    auto* temp = _impl_.Content_.candidate_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Content_.candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::webrtc::GrpcSignaling::IceCandidate& SignalingMessage::_internal_candidate() const {
  return Content_case() == kCandidate ? *_impl_.Content_.candidate_ : reinterpret_cast<::webrtc::GrpcSignaling::IceCandidate&>(::webrtc::GrpcSignaling::_IceCandidate_default_instance_);
}
inline const ::webrtc::GrpcSignaling::IceCandidate& SignalingMessage::candidate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.GrpcSignaling.SignalingMessage.candidate)
  return _internal_candidate();
}
inline ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE SignalingMessage::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:webrtc.GrpcSignaling.SignalingMessage.candidate)
  if (Content_case() == kCandidate) {
    clear_has_Content();
    auto* temp = _impl_.Content_.candidate_;
    _impl_.Content_.candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignalingMessage::unsafe_arena_set_allocated_candidate(
    ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Content();
  if (value) {
    set_has_candidate();
    _impl_.Content_.candidate_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webrtc.GrpcSignaling.SignalingMessage.candidate)
}
inline ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NONNULL SignalingMessage::_internal_mutable_candidate() {
  if (Content_case() != kCandidate) {
    clear_Content();
    set_has_candidate();
    _impl_.Content_.candidate_ = 
        ::google::protobuf::MessageLite::DefaultConstruct<::webrtc::GrpcSignaling::IceCandidate>(GetArena());
  }
  return _impl_.Content_.candidate_;
}
inline ::webrtc::GrpcSignaling::IceCandidate* PROTOBUF_NONNULL SignalingMessage::mutable_candidate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::webrtc::GrpcSignaling::IceCandidate* _msg = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:webrtc.GrpcSignaling.SignalingMessage.candidate)
  return _msg;
}

inline bool SignalingMessage::has_Content() const {
  return Content_case() != CONTENT_NOT_SET;
}
inline void SignalingMessage::clear_has_Content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline SignalingMessage::ContentCase SignalingMessage::Content_case() const {
  return SignalingMessage::ContentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SessionDescription

// .webrtc.GrpcSignaling.SessionDescription.SessionDescriptionType type = 1;
inline void SessionDescription::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType SessionDescription::type() const {
  // @@protoc_insertion_point(field_get:webrtc.GrpcSignaling.SessionDescription.type)
  return _internal_type();
}
inline void SessionDescription::set_type(::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.GrpcSignaling.SessionDescription.type)
}
inline ::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType SessionDescription::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType>(_impl_.type_);
}
inline void SessionDescription::_internal_set_type(::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string content = 2;
inline void SessionDescription::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionDescription::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.GrpcSignaling.SessionDescription.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SessionDescription::set_content(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.GrpcSignaling.SessionDescription.content)
}
inline std::string* PROTOBUF_NONNULL SessionDescription::mutable_content()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:webrtc.GrpcSignaling.SessionDescription.content)
  return _s;
}
inline const std::string& SessionDescription::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void SessionDescription::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL SessionDescription::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE SessionDescription::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.GrpcSignaling.SessionDescription.content)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.content_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.content_.Set("", GetArena());
  }
  return released;
}
inline void SessionDescription::set_allocated_content(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.GrpcSignaling.SessionDescription.content)
}

// -------------------------------------------------------------------

// IceCandidate

// string mid = 1;
inline void IceCandidate::clear_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IceCandidate::mid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.GrpcSignaling.IceCandidate.mid)
  return _internal_mid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void IceCandidate::set_mid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.GrpcSignaling.IceCandidate.mid)
}
inline std::string* PROTOBUF_NONNULL IceCandidate::mutable_mid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:webrtc.GrpcSignaling.IceCandidate.mid)
  return _s;
}
inline const std::string& IceCandidate::_internal_mid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mid_.Get();
}
inline void IceCandidate::_internal_set_mid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL IceCandidate::_internal_mutable_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE IceCandidate::release_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.GrpcSignaling.IceCandidate.mid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.mid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mid_.Set("", GetArena());
  }
  return released;
}
inline void IceCandidate::set_allocated_mid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.GrpcSignaling.IceCandidate.mid)
}

// int32 mline_index = 2;
inline void IceCandidate::clear_mline_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mline_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t IceCandidate::mline_index() const {
  // @@protoc_insertion_point(field_get:webrtc.GrpcSignaling.IceCandidate.mline_index)
  return _internal_mline_index();
}
inline void IceCandidate::set_mline_index(::int32_t value) {
  _internal_set_mline_index(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.GrpcSignaling.IceCandidate.mline_index)
}
inline ::int32_t IceCandidate::_internal_mline_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mline_index_;
}
inline void IceCandidate::_internal_set_mline_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mline_index_ = value;
}

// string description = 3;
inline void IceCandidate::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IceCandidate::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:webrtc.GrpcSignaling.IceCandidate.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void IceCandidate::set_description(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:webrtc.GrpcSignaling.IceCandidate.description)
}
inline std::string* PROTOBUF_NONNULL IceCandidate::mutable_description()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:webrtc.GrpcSignaling.IceCandidate.description)
  return _s;
}
inline const std::string& IceCandidate::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void IceCandidate::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL IceCandidate::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE IceCandidate::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:webrtc.GrpcSignaling.IceCandidate.description)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.description_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.description_.Set("", GetArena());
  }
  return released;
}
inline void IceCandidate::set_allocated_description(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.GrpcSignaling.IceCandidate.description)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace GrpcSignaling
}  // namespace webrtc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::webrtc::GrpcSignaling::SessionDescription_SessionDescriptionType> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // peer_5fconnection_5fsignaling_2eproto_2epb_2eh
