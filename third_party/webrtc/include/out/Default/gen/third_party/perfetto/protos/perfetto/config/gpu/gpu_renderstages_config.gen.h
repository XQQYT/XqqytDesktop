// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_CONFIG_GPU_GPU_RENDERSTAGES_CONFIG_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_CONFIG_GPU_GPU_RENDERSTAGES_CONFIG_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class GpuRenderStagesConfig;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT GpuRenderStagesConfig : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kFullLoadstoreFieldNumber = 1,
    kLowOverheadFieldNumber = 2,
    kTraceMetricsFieldNumber = 3,
  };

  GpuRenderStagesConfig();
  ~GpuRenderStagesConfig() override;
  GpuRenderStagesConfig(GpuRenderStagesConfig&&) noexcept;
  GpuRenderStagesConfig& operator=(GpuRenderStagesConfig&&);
  GpuRenderStagesConfig(const GpuRenderStagesConfig&);
  GpuRenderStagesConfig& operator=(const GpuRenderStagesConfig&);
  bool operator==(const GpuRenderStagesConfig&) const;
  bool operator!=(const GpuRenderStagesConfig& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_full_loadstore() const { return _has_field_[1]; }
  bool full_loadstore() const { return full_loadstore_; }
  void set_full_loadstore(bool value) { full_loadstore_ = value; _has_field_.set(1); }

  bool has_low_overhead() const { return _has_field_[2]; }
  bool low_overhead() const { return low_overhead_; }
  void set_low_overhead(bool value) { low_overhead_ = value; _has_field_.set(2); }

  const std::vector<std::string>& trace_metrics() const { return trace_metrics_; }
  std::vector<std::string>* mutable_trace_metrics() { return &trace_metrics_; }
  int trace_metrics_size() const { return static_cast<int>(trace_metrics_.size()); }
  void clear_trace_metrics() { trace_metrics_.clear(); }
  void add_trace_metrics(std::string value) { trace_metrics_.emplace_back(value); }
  std::string* add_trace_metrics() { trace_metrics_.emplace_back(); return &trace_metrics_.back(); }

 private:
  bool full_loadstore_{};
  bool low_overhead_{};
  std::vector<std::string> trace_metrics_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_CONFIG_GPU_GPU_RENDERSTAGES_CONFIG_PROTO_CPP_H_
