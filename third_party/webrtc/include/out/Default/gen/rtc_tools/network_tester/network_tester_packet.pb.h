// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: network_tester_packet.proto
// Protobuf C++ Version: 6.30.1

#ifndef network_5ftester_5fpacket_2eproto_2epb_2eh
#define network_5ftester_5fpacket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_network_5ftester_5fpacket_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5ftester_5fpacket_2eproto {
  static const ::uint32_t offsets[];
};
namespace webrtc {
namespace network_tester {
namespace packet {
enum NetworkTesterPacket_Type : int;
extern const uint32_t NetworkTesterPacket_Type_internal_data_[];
class NetworkTesterPacket;
struct NetworkTesterPacketDefaultTypeInternal;
extern NetworkTesterPacketDefaultTypeInternal _NetworkTesterPacket_default_instance_;
extern const ::google::protobuf::internal::ClassDataLite<49> NetworkTesterPacket_class_data_;
}  // namespace packet
}  // namespace network_tester
}  // namespace webrtc
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::webrtc::network_tester::packet::NetworkTesterPacket_Type_internal_data_>
    internal::EnumTraitsImpl::value<::webrtc::network_tester::packet::NetworkTesterPacket_Type>;
}  // namespace protobuf
}  // namespace google

namespace webrtc {
namespace network_tester {
namespace packet {
enum NetworkTesterPacket_Type : int {
  NetworkTesterPacket_Type_HAND_SHAKING = 0,
  NetworkTesterPacket_Type_TEST_START = 1,
  NetworkTesterPacket_Type_TEST_DATA = 2,
  NetworkTesterPacket_Type_TEST_DONE = 3,
};

extern const uint32_t NetworkTesterPacket_Type_internal_data_[];
inline constexpr NetworkTesterPacket_Type NetworkTesterPacket_Type_Type_MIN =
    static_cast<NetworkTesterPacket_Type>(0);
inline constexpr NetworkTesterPacket_Type NetworkTesterPacket_Type_Type_MAX =
    static_cast<NetworkTesterPacket_Type>(3);
inline bool NetworkTesterPacket_Type_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int NetworkTesterPacket_Type_Type_ARRAYSIZE = 3 + 1;
const std::string& NetworkTesterPacket_Type_Name(NetworkTesterPacket_Type value);
template <typename T>
const std::string& NetworkTesterPacket_Type_Name(T value) {
  static_assert(std::is_same<T, NetworkTesterPacket_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return NetworkTesterPacket_Type_Name(static_cast<NetworkTesterPacket_Type>(value));
}
bool NetworkTesterPacket_Type_Parse(
    absl::string_view name, NetworkTesterPacket_Type* PROTOBUF_NONNULL value);

// ===================================================================


// -------------------------------------------------------------------

class NetworkTesterPacket final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:webrtc.network_tester.packet.NetworkTesterPacket) */ {
 public:
  inline NetworkTesterPacket() : NetworkTesterPacket(nullptr) {}
  ~NetworkTesterPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkTesterPacket* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkTesterPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkTesterPacket(::google::protobuf::internal::ConstantInitialized);

  inline NetworkTesterPacket(const NetworkTesterPacket& from) : NetworkTesterPacket(nullptr, from) {}
  inline NetworkTesterPacket(NetworkTesterPacket&& from) noexcept
      : NetworkTesterPacket(nullptr, std::move(from)) {}
  inline NetworkTesterPacket& operator=(const NetworkTesterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkTesterPacket& operator=(NetworkTesterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkTesterPacket& default_instance() {
    return *reinterpret_cast<const NetworkTesterPacket*>(
        &_NetworkTesterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NetworkTesterPacket& a, NetworkTesterPacket& b) { a.Swap(&b); }
  inline void Swap(NetworkTesterPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkTesterPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkTesterPacket* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<NetworkTesterPacket>(arena);
  }
  void CopyFrom(const NetworkTesterPacket& from);
  void MergeFrom(const NetworkTesterPacket& from) { NetworkTesterPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkTesterPacket* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "webrtc.network_tester.packet.NetworkTesterPacket"; }

 protected:
  explicit NetworkTesterPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NetworkTesterPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NetworkTesterPacket& from);
  NetworkTesterPacket(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NetworkTesterPacket&& from) noexcept
      : NetworkTesterPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  // nested types ----------------------------------------------------
  using Type = NetworkTesterPacket_Type;
  static constexpr Type HAND_SHAKING = NetworkTesterPacket_Type_HAND_SHAKING;
  static constexpr Type TEST_START = NetworkTesterPacket_Type_TEST_START;
  static constexpr Type TEST_DATA = NetworkTesterPacket_Type_TEST_DATA;
  static constexpr Type TEST_DONE = NetworkTesterPacket_Type_TEST_DONE;
  static inline bool Type_IsValid(int value) {
    return NetworkTesterPacket_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = NetworkTesterPacket_Type_Type_MIN;
  static constexpr Type Type_MAX = NetworkTesterPacket_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = NetworkTesterPacket_Type_Type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return NetworkTesterPacket_Type_Name(value);
  }
  static inline bool Type_Parse(
      absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return NetworkTesterPacket_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSendTimestampFieldNumber = 2,
    kArrivalTimestampFieldNumber = 3,
    kTypeFieldNumber = 1,
    kPacketSizeFieldNumber = 5,
    kSequenceNumberFieldNumber = 4,
  };
  // optional int64 send_timestamp = 2;
  bool has_send_timestamp() const;
  void clear_send_timestamp() ;
  ::int64_t send_timestamp() const;
  void set_send_timestamp(::int64_t value);

  private:
  ::int64_t _internal_send_timestamp() const;
  void _internal_set_send_timestamp(::int64_t value);

  public:
  // optional int64 arrival_timestamp = 3;
  bool has_arrival_timestamp() const;
  void clear_arrival_timestamp() ;
  ::int64_t arrival_timestamp() const;
  void set_arrival_timestamp(::int64_t value);

  private:
  ::int64_t _internal_arrival_timestamp() const;
  void _internal_set_arrival_timestamp(::int64_t value);

  public:
  // optional .webrtc.network_tester.packet.NetworkTesterPacket.Type type = 1;
  bool has_type() const;
  void clear_type() ;
  ::webrtc::network_tester::packet::NetworkTesterPacket_Type type() const;
  void set_type(::webrtc::network_tester::packet::NetworkTesterPacket_Type value);

  private:
  ::webrtc::network_tester::packet::NetworkTesterPacket_Type _internal_type() const;
  void _internal_set_type(::webrtc::network_tester::packet::NetworkTesterPacket_Type value);

  public:
  // optional int32 packet_size = 5;
  bool has_packet_size() const;
  void clear_packet_size() ;
  ::int32_t packet_size() const;
  void set_packet_size(::int32_t value);

  private:
  ::int32_t _internal_packet_size() const;
  void _internal_set_packet_size(::int32_t value);

  public:
  // optional int64 sequence_number = 4;
  bool has_sequence_number() const;
  void clear_sequence_number() ;
  ::int64_t sequence_number() const;
  void set_sequence_number(::int64_t value);

  private:
  ::int64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:webrtc.network_tester.packet.NetworkTesterPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NetworkTesterPacket& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t send_timestamp_;
    ::int64_t arrival_timestamp_;
    int type_;
    ::int32_t packet_size_;
    ::int64_t sequence_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5ftester_5fpacket_2eproto;
};

extern const ::google::protobuf::internal::ClassDataLite<49> NetworkTesterPacket_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NetworkTesterPacket

// optional .webrtc.network_tester.packet.NetworkTesterPacket.Type type = 1;
inline bool NetworkTesterPacket::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetworkTesterPacket::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::webrtc::network_tester::packet::NetworkTesterPacket_Type NetworkTesterPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.type)
  return _internal_type();
}
inline void NetworkTesterPacket::set_type(::webrtc::network_tester::packet::NetworkTesterPacket_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.type)
}
inline ::webrtc::network_tester::packet::NetworkTesterPacket_Type NetworkTesterPacket::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::webrtc::network_tester::packet::NetworkTesterPacket_Type>(_impl_.type_);
}
inline void NetworkTesterPacket::_internal_set_type(::webrtc::network_tester::packet::NetworkTesterPacket_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::webrtc::network_tester::packet::NetworkTesterPacket_Type_internal_data_));
                                          _impl_.type_ = value;
}

// optional int64 send_timestamp = 2;
inline bool NetworkTesterPacket::has_send_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetworkTesterPacket::clear_send_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t NetworkTesterPacket::send_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.send_timestamp)
  return _internal_send_timestamp();
}
inline void NetworkTesterPacket::set_send_timestamp(::int64_t value) {
  _internal_set_send_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.send_timestamp)
}
inline ::int64_t NetworkTesterPacket::_internal_send_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.send_timestamp_;
}
inline void NetworkTesterPacket::_internal_set_send_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_timestamp_ = value;
}

// optional int64 arrival_timestamp = 3;
inline bool NetworkTesterPacket::has_arrival_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetworkTesterPacket::clear_arrival_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arrival_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t NetworkTesterPacket::arrival_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.arrival_timestamp)
  return _internal_arrival_timestamp();
}
inline void NetworkTesterPacket::set_arrival_timestamp(::int64_t value) {
  _internal_set_arrival_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.arrival_timestamp)
}
inline ::int64_t NetworkTesterPacket::_internal_arrival_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.arrival_timestamp_;
}
inline void NetworkTesterPacket::_internal_set_arrival_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arrival_timestamp_ = value;
}

// optional int64 sequence_number = 4;
inline bool NetworkTesterPacket::has_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NetworkTesterPacket::clear_sequence_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t NetworkTesterPacket::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.sequence_number)
  return _internal_sequence_number();
}
inline void NetworkTesterPacket::set_sequence_number(::int64_t value) {
  _internal_set_sequence_number(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.sequence_number)
}
inline ::int64_t NetworkTesterPacket::_internal_sequence_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_number_;
}
inline void NetworkTesterPacket::_internal_set_sequence_number(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = value;
}

// optional int32 packet_size = 5;
inline bool NetworkTesterPacket::has_packet_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NetworkTesterPacket::clear_packet_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t NetworkTesterPacket::packet_size() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.packet.NetworkTesterPacket.packet_size)
  return _internal_packet_size();
}
inline void NetworkTesterPacket::set_packet_size(::int32_t value) {
  _internal_set_packet_size(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.packet.NetworkTesterPacket.packet_size)
}
inline ::int32_t NetworkTesterPacket::_internal_packet_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_size_;
}
inline void NetworkTesterPacket::_internal_set_packet_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace packet
}  // namespace network_tester
}  // namespace webrtc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::webrtc::network_tester::packet::NetworkTesterPacket_Type> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // network_5ftester_5fpacket_2eproto_2epb_2eh
